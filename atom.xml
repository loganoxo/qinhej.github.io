<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦贺的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-01T10:02:04.366Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>QinHe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro-Springboot</title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/Shiro-Springboot%C2%A0/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/Shiro-Springboot /</id>
    <published>2018-08-01T10:02:04.364Z</published>
    <updated>2018-08-01T10:02:04.366Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>1、shiro配置类：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.mgr.conf.shiro; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.pam.AuthenticationStrategy; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.pam.FirstSuccessfulStrategy; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.ModularRealmAuthorizer; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.ehcache.EhCacheManager; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.SessionDAO; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.Cookie; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.ShiroHttpSession; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.SimpleCookie; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.session.mgt.DefaultWebSessionManager; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory; </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter; </span><br><span class="line"><span class="keyword">import</span> java.util.*; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Shiro 配置 </span></span><br><span class="line"><span class="comment">* Apache Shiro 核心通过 Filter 来实现，就好像SpringMvc 通过DispachServlet 来主控制一样。 </span></span><br><span class="line"><span class="comment">* 既然是使用 Filter 一般也就能猜到，是通过URL规则来进行过滤和权限校验，所以我们需要定义一系列关于URL的规则和访问权限。 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()); </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 凭证匹配器 </span></span><br><span class="line"><span class="comment">* （由于我们的密码校验交给Shiro的SimpleAuthenticationInfo进行处理了 </span></span><br><span class="line"><span class="comment">* 所以我们需要修改下doGetAuthenticationInfo中的代码; </span></span><br><span class="line"><span class="comment">* ） </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"adminHashedCredentialsMatcher"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">adminHashedCredentialsMatcher</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.adminHashedCredentialsMatcher()"</span>); </span><br><span class="line">HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher(); </span><br><span class="line">hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);<span class="comment">//散列算法:这里使用MD5算法; </span></span><br><span class="line">hashedCredentialsMatcher.setHashIterations(<span class="number">2</span>);<span class="comment">//散列的次数，当于 m比如散列两次，相d5(md5("")); </span></span><br><span class="line"><span class="keyword">return</span> hashedCredentialsMatcher; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"customHashedCredentialsMatcher"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">customHashedCredentialsMatcher</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.adminHashedCredentialsMatcher()"</span>); </span><br><span class="line">HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher(); </span><br><span class="line">hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);<span class="comment">//散列算法:这里使用MD5算法; </span></span><br><span class="line">hashedCredentialsMatcher.setHashIterations(<span class="number">1</span>);<span class="comment">//散列的次数，当于 m比如散列两次，相d5(md5("")); </span></span><br><span class="line"><span class="keyword">return</span> hashedCredentialsMatcher; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 前台身份认证realm; </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"customShiroRealm"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomShiroRealm <span class="title">customShiroRealm</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.customShiroRealm()"</span>); </span><br><span class="line">CustomShiroRealm customShiroRealm = <span class="keyword">new</span> CustomShiroRealm(); </span><br><span class="line">customShiroRealm.setCredentialsMatcher(customHashedCredentialsMatcher()); </span><br><span class="line"><span class="keyword">return</span> customShiroRealm; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 后台身份认证realm; </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"adminShiroRealm"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> AdminShiroRealm <span class="title">adminShiroRealm</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.adminShiroRealm()"</span>); </span><br><span class="line">AdminShiroRealm adminShiroRealm = <span class="keyword">new</span> AdminShiroRealm(); </span><br><span class="line">adminShiroRealm.setCredentialsMatcher(adminHashedCredentialsMatcher()); </span><br><span class="line"><span class="keyword">return</span> adminShiroRealm; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* shiro缓存管理器; </span></span><br><span class="line"><span class="comment">* 需要注入对应的其它的实体类中： </span></span><br><span class="line"><span class="comment">* 1、安全管理器：securityManager </span></span><br><span class="line"><span class="comment">* 可见securityManager是整个shiro的核心； </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"ehCacheManager"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">ehCacheManager</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.ehCacheManager()"</span>); </span><br><span class="line">EhCacheManager cacheManager = <span class="keyword">new</span> EhCacheManager(); </span><br><span class="line">cacheManager.setCacheManagerConfigFile(<span class="string">"classpath:ehcache-shiro.xml"</span>); </span><br><span class="line"><span class="keyword">return</span> cacheManager; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Shiro默认提供了三种 AuthenticationStrategy 实现： </span></span><br><span class="line"><span class="comment">* AtLeastOneSuccessfulStrategy ：其中一个通过则成功。 </span></span><br><span class="line"><span class="comment">* FirstSuccessfulStrategy ：其中一个通过则成功，但只返回第一个通过的Realm提供的验证信息。 </span></span><br><span class="line"><span class="comment">* AllSuccessfulStrategy ：凡是配置到应用中的Realm都必须全部通过。 </span></span><br><span class="line"><span class="comment">* authenticationStrategy </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"authenticationStrategy"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationStrategy <span class="title">authenticationStrategy</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.authenticationStrategy()"</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FirstSuccessfulStrategy(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> DefaultWebSessionManager </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"sessionManager"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">defaultWebSessionManager</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.defaultWebSessionManager()"</span>); </span><br><span class="line">DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager(); </span><br><span class="line">sessionManager.setSessionDAO(redisSessionDAO()); </span><br><span class="line">sessionManager.setCacheManager(ehCacheManager()); </span><br><span class="line"><span class="comment">//单位为毫秒（1秒=1000毫秒） 3600000毫秒为1个小时 </span></span><br><span class="line">sessionManager.setSessionValidationInterval(<span class="number">3600000</span> * <span class="number">12</span>); </span><br><span class="line"><span class="comment">//3600000 milliseconds = 1 hour </span></span><br><span class="line">sessionManager.setGlobalSessionTimeout(<span class="number">3600000</span> * <span class="number">12</span>); </span><br><span class="line">sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>); </span><br><span class="line">sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>); </span><br><span class="line">Cookie cookie = <span class="keyword">new</span> SimpleCookie(ShiroHttpSession.DEFAULT_SESSION_ID_NAME); </span><br><span class="line">cookie.setName(<span class="string">"WEBID"</span>); </span><br><span class="line">cookie.setHttpOnly(<span class="keyword">true</span>); </span><br><span class="line">sessionManager.setSessionIdCookie(cookie); </span><br><span class="line"><span class="keyword">return</span> sessionManager; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> SessionDAO <span class="title">redisSessionDAO</span><span class="params">()</span> </span>&#123; </span><br><span class="line">RedisSessionDAO sessionDAO = <span class="keyword">new</span> RedisSessionDAO(); </span><br><span class="line"><span class="keyword">return</span> sessionDAO; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> org.apache.shiro.mgt.SecurityManager </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.getDefaultWebSecurityManage()"</span>); </span><br><span class="line">DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager(); </span><br><span class="line"> </span><br><span class="line">Map&lt;String, Object&gt; shiroAuthenticatorRealms = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line">shiroAuthenticatorRealms.put(<span class="string">"adminShiroRealm"</span>, adminShiroRealm()); </span><br><span class="line">shiroAuthenticatorRealms.put(<span class="string">"customShiroRealm"</span>, customShiroRealm()); </span><br><span class="line"> </span><br><span class="line">Collection&lt;Realm&gt; shiroAuthorizerRealms = <span class="keyword">new</span> ArrayList&lt;Realm&gt;(); </span><br><span class="line">shiroAuthorizerRealms.add(adminShiroRealm()); </span><br><span class="line">shiroAuthorizerRealms.add(customShiroRealm()); </span><br><span class="line"> </span><br><span class="line">CustomModularRealmAuthenticator customModularRealmAuthenticator = <span class="keyword">new</span> CustomModularRealmAuthenticator(); </span><br><span class="line">customModularRealmAuthenticator.setDefinedRealms(shiroAuthenticatorRealms); </span><br><span class="line">customModularRealmAuthenticator.setAuthenticationStrategy(authenticationStrategy()); </span><br><span class="line">securityManager.setAuthenticator(customModularRealmAuthenticator); </span><br><span class="line">ModularRealmAuthorizer customModularRealmAuthorizer = <span class="keyword">new</span> ModularRealmAuthorizer(); </span><br><span class="line">customModularRealmAuthorizer.setRealms(shiroAuthorizerRealms); </span><br><span class="line">securityManager.setAuthorizer(customModularRealmAuthorizer); </span><br><span class="line"><span class="comment">//设置realm. </span></span><br><span class="line"><span class="comment">//securityManager.setRealm(adminShiroRealm()); </span></span><br><span class="line"><span class="comment">//securityManager.setRealm(customShiroRealm()); </span></span><br><span class="line"><span class="comment">//注入缓存管理器; </span></span><br><span class="line">securityManager.setCacheManager(ehCacheManager());<span class="comment">//这个如果执行多次，也是同样的一个对象; </span></span><br><span class="line">securityManager.setSessionManager(defaultWebSessionManager()); </span><br><span class="line"><span class="keyword">return</span> securityManager; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 开启shiro aop注解支持. </span></span><br><span class="line"><span class="comment">* 使用代理方式;所以需要开启代码支持; </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> securityManager </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"authorizationAttributeSourceAdvisor"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.authorizationAttributeSourceAdvisor()"</span>); </span><br><span class="line">AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor(); </span><br><span class="line">authorizationAttributeSourceAdvisor.setSecurityManager(securityManager); </span><br><span class="line"><span class="keyword">return</span> authorizationAttributeSourceAdvisor; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* ShiroFilterFactoryBean 处理拦截资源文件问题。 </span></span><br><span class="line"><span class="comment">* 注意：单独一个ShiroFilterFactoryBean配置是或报错的，以为在 </span></span><br><span class="line"><span class="comment">* 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager </span></span><br><span class="line"><span class="comment">* Filter Chain定义说明 </span></span><br><span class="line"><span class="comment">* 1、一个URL可以配置多个Filter，使用逗号分隔 </span></span><br><span class="line"><span class="comment">* 2、当设置多个过滤器时，全部验证通过，才视为通过 </span></span><br><span class="line"><span class="comment">* 3、部分过滤器可指定参数，如perms，roles </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"shiroFilter"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.shiroFilter()"</span>); </span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean(); </span><br><span class="line"><span class="comment">// 必须设置 SecurityManager </span></span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager); </span><br><span class="line"><span class="comment">//增加自定义过滤 </span></span><br><span class="line">Map&lt;String, Filter&gt; filters = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line">filters.put(<span class="string">"admin"</span>, <span class="keyword">new</span> AdminFormAuthenticationFilter()); </span><br><span class="line">filters.put(<span class="string">"custom"</span>, <span class="keyword">new</span> CustomFormAuthenticationFilter()); </span><br><span class="line">shiroFilterFactoryBean.setFilters(filters); </span><br><span class="line"><span class="comment">//拦截器. </span></span><br><span class="line">Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;(); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//配置退出过滤器,其中的具体的退出代码Shiro已经替我们实现了 </span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* anon（匿名）org.apache.shiro.web.filter.authc.AnonymousFilter </span></span><br><span class="line"><span class="comment">* authc（身份验证）org.apache.shiro.web.filter.authc.FormAuthenticationFilter </span></span><br><span class="line"><span class="comment">* authcBasic（http基本验证）org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter </span></span><br><span class="line"><span class="comment">* logout（退出）org.apache.shiro.web.filter.authc.LogoutFilter </span></span><br><span class="line"><span class="comment">* noSessionCreation（不创建session） org.apache.shiro.web.filter.session.NoSessionCreationFilter </span></span><br><span class="line"><span class="comment">* perms(许可验证)  org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter </span></span><br><span class="line"><span class="comment">* port（端口验证）org.apache.shiro.web.filter.authz.PortFilter </span></span><br><span class="line"><span class="comment">* rest  (rest方面)  org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter </span></span><br><span class="line"><span class="comment">* roles（权限验证）org.apache.shiro.web.filter.authz.RolesAuthorizationFilter </span></span><br><span class="line"><span class="comment">* ssl （ssl方面）org.apache.shiro.web.filter.authz.SslFilter </span></span><br><span class="line"><span class="comment">* member （用户方面）org.apache.shiro.web.filter.authc.UserFilter </span></span><br><span class="line"><span class="comment">* user表示用户不一定已通过认证,只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了; </span></span><br><span class="line"><span class="comment">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt; </span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/**/login"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/console/dashboard/zhu/**"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/console/dashboard/phone/**"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/**/logout"</span>, <span class="string">"logout"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/member/reg"</span>, <span class="string">"anon"</span>); </span><br><span class="line"><span class="comment">//配置记住我或认证通过可以访问的地址 </span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/console/**"</span>, <span class="string">"admin"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/member/**"</span>, <span class="string">"custom"</span>); </span><br><span class="line"><span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面 </span></span><br><span class="line"><span class="comment">//shiroFilterFactoryBean.setLoginUrl("/member/login"); </span></span><br><span class="line"><span class="comment">// 登录成功后要跳转的链接 </span></span><br><span class="line"><span class="comment">//shiroFilterFactoryBean.setSuccessUrl("/member/index"); </span></span><br><span class="line"><span class="comment">//未授权界面; </span></span><br><span class="line"><span class="comment">//shiroFilterFactoryBean.setUnauthorizedUrl("/console/403"); </span></span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap); </span><br><span class="line"><span class="keyword">return</span> shiroFilterFactoryBean; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 注入LifecycleBeanPostProcessor </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"lifecycleBeanPostProcessor"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.lifecycleBeanPostProcessor()"</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> </span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"defaultAdvisorAutoProxyCreator"</span>) </span><br><span class="line"><span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">getDefaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123; </span><br><span class="line">logger.info(<span class="string">"ShiroConfiguration.getDefaultAdvisorAutoProxyCreator()"</span>); </span><br><span class="line">DefaultAdvisorAutoProxyCreator daap = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator(); </span><br><span class="line">daap.setProxyTargetClass(<span class="keyword">true</span>); </span><br><span class="line"><span class="keyword">return</span> daap; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、假设现在有这样一种需求：存在两张表user和admin，分别记录普通用户和管理员的信息。并且现在要实现普通用户和管理员的分开登录，即需要两个Realm——UserRealm和AdminRealm，分别处理普通用户和管理员的验证功能。<br>但是正常情况下，当定义了两个Realm，无论是普通用户登录，还是管理员登录，都会由这两个Realm共同处理。这是因为，当配置了多个Realm时，我们通常使用的认证器是shiro自带的org.apache.shiro.authc.pam.ModularRealmAuthenticator， </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.mgr.conf.shiro; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.ShiroException; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.pam.ModularRealmAuthenticator; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.CollectionUtils; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Collection; </span><br><span class="line"><span class="keyword">import</span> java.util.Map; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomModularRealmAuthenticator</span> <span class="keyword">extends</span> <span class="title">ModularRealmAuthenticator</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; definedRealms; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 多个realm实现 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doMultiRealmAuthentication</span><span class="params">(Collection&lt;Realm&gt; realms, AuthenticationToken token)</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.doMultiRealmAuthentication(realms, token); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 调用单个realm执行操作 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doSingleRealmAuthentication</span><span class="params">(Realm realm,AuthenticationToken token)</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果该realms不支持(不能验证)当前token </span></span><br><span class="line"><span class="keyword">if</span> (!realm.supports(token)) &#123; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShiroException(<span class="string">"token错误!"</span>); </span><br><span class="line">&#125; </span><br><span class="line">AuthenticationInfo info = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">info = realm.getAuthenticationInfo(token); </span><br><span class="line"><span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShiroException(<span class="string">"token不存在!"</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShiroException(<span class="string">"用户名或者密码错误!"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> info; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 判断登录类型执行操作  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doAuthenticate</span><span class="params">(AuthenticationToken authenticationToken)</span><span class="keyword">throws</span> AuthenticationException </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.assertRealmsConfigured(); </span><br><span class="line">Realm realm = <span class="keyword">null</span>; </span><br><span class="line">CustomerAuthenticationToken token = (CustomerAuthenticationToken) authenticationToken; </span><br><span class="line"><span class="comment">//判断是否是后台用户 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="string">"1"</span>.equals(token.getLoginType())) &#123; </span><br><span class="line">realm = (Realm) <span class="keyword">this</span>.definedRealms.get(<span class="string">"customShiroRealm"</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">realm = (Realm) <span class="keyword">this</span>.definedRealms.get(<span class="string">"adminShiroRealm"</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.doSingleRealmAuthentication(realm, authenticationToken); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 判断realm是否为空 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">assertRealmsConfigured</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.definedRealms = <span class="keyword">this</span>.getDefinedRealms(); </span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(<span class="keyword">this</span>.definedRealms)) &#123; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShiroException(<span class="string">"值传递错误!"</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getDefinedRealms</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.definedRealms; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefinedRealms</span><span class="params">(Map&lt;String, Object&gt; definedRealms)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.definedRealms = definedRealms; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、shiro配置类：&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="shiro" scheme="http://yoursite.com/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-Spring</title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/Shiro-Spring%C2%A0/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/Shiro-Spring /</id>
    <published>2018-08-01T09:52:20.614Z</published>
    <updated>2018-08-01T09:52:20.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro总结"><a href="#Shiro总结" class="headerlink" title="Shiro总结"></a>Shiro总结</h1><p>一、配置</p><ul><li>1、Shiro框架的搭建 </li></ul><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2、在web.xml中添加过滤器<br>这个过滤器一定要放在Struts2过滤器的前面 </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3、添加一个spring的配置文件 applicationContext_shiro.xml<br>内容：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.html"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/error.html"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>  </span><br><span class="line">/error.html = anon  </span><br><span class="line">/*.html = authc  </span><br><span class="line"><span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二、认证 </p><ul><li>1、改写登录方法<br>获取令牌—–获取主题—-开始认证<br>shiro框架改造登录方法 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、获取令牌 </span></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, md5.toString()); </span><br><span class="line"><span class="comment">// 2、获取主题--shiro框架  当做shiro框架和应用程序的入口 </span></span><br><span class="line">Subject subject = SecurityUtils.getSubject(); </span><br><span class="line"><span class="comment">// 3、开始认证 </span></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">subject.login(token); </span><br><span class="line">write(ajaxReturn(<span class="keyword">true</span>, <span class="string">"登录成功"</span>)); </span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123; </span><br><span class="line">write(ajaxReturn(<span class="keyword">false</span>, <span class="string">"用户名或密码错误，请重新输入"</span>)); </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、创建realm </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErpRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> IEmpBiz empBiz; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> IMenuBiz menuBiz; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuBiz</span><span class="params">(IMenuBiz menuBiz)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.menuBiz = menuBiz; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpBiz</span><span class="params">(IEmpBiz empBiz)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.empBiz = empBiz; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 授权--每次请求都会访问这个方法 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 认证 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken agr0)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;   <span class="comment">//如果这里如突然null  ，loginAction中的checkUser方法就会抛异常 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、完善认证方法—是与配置文件中的authc过滤相关 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken agr0)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123; </span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken)agr0; </span><br><span class="line">String username = token.getUsername(); </span><br><span class="line">String pwd = <span class="keyword">new</span> String(token.getPassword()); </span><br><span class="line">Emp emp = empBiz.findEmpByUsernameAndPwd(username, pwd); </span><br><span class="line"><span class="keyword">if</span>(emp!=<span class="keyword">null</span>)&#123; </span><br><span class="line"><span class="comment">// principal 主角, credentials 密码, realmName </span></span><br><span class="line">SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(emp, pwd, getName()); </span><br><span class="line"><span class="keyword">return</span> info; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;   <span class="comment">//如果这里如突然null  ，loginAction中的checkUser方法就会抛异常 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4、授权<br>如果访问dep.html时需要判断当前登录人是否有此权限<br>dep.html=perms[部门]  –意味着访问dep.html是需要“”部门“”权限<br>需要告诉shiro框架当前登录人有哪些权限 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 授权--每次请求都会访问这个方法  </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123; </span><br><span class="line">SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo(); </span><br><span class="line">Emp emp = (Emp)principals.getPrimaryPrincipal(); </span><br><span class="line"><span class="comment">// 获取当前登录人拥有的所有权限 </span></span><br><span class="line">List&lt;Menu&gt; list = menuBiz.getMenuListByEmpuuid(emp.getUuid()); </span><br><span class="line"><span class="keyword">for</span> (Menu menu : list) &#123; </span><br><span class="line">info.addStringPermission(menu.getMenuname()); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="keyword">return</span> info; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个特殊的情况<br>Supplier.html 这个页面代表 客户和供应商 从目前的配置上来看可以写成supplier.html=perms[‘供应商’,’客户’]<br>但是supplier.html=perms[‘供应商’,’客户’] 意味着 访问supplier.html页面需要同时拥有客户和供应商权限 </p><p>自定义过滤器<br>目的：supplier.html=perms[‘供应商’,’客户’] 但凡符合其中的一个权限就能访问supplier.html </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.erp.filter; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest; </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject; </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.authz.AuthorizationFilter; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPermsFilter</span> <span class="keyword">extends</span> <span class="title">AuthorizationFilter</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">Subject subject = getSubject(request, response); </span><br><span class="line">     String[] perms = (String[]) mappedValue; </span><br><span class="line"><span class="comment">//      [] </span></span><br><span class="line"><span class="comment">//      ["客户"] </span></span><br><span class="line"><span class="comment">//      ["客户","供应商"] </span></span><br><span class="line">     <span class="keyword">if</span> (perms != <span class="keyword">null</span> &amp;&amp; perms.length &gt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; perms.length; i++) &#123; </span><br><span class="line">    <span class="keyword">if</span>(subject.isPermitted(perms[i]))&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">     &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">     &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的shiro配置文件 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 当实例化一个bean是,spring保证该Bean所依赖的其他bean已经初始化 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span> <span class="attr">depends-on</span>=<span class="string">"myPermsFilter"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- shiro框架的中央枢纽 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 如果访问页面或请求是没有当前登录人，会跳转到login.html中 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.html"</span> /&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 如果当前登录人访问的页面或请求没有权限时，跳转到error.html --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/error.html"</span> /&gt;</span>  </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"perms"</span> <span class="attr">value-ref</span>=<span class="string">"myPermsFilter"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>  </span><br><span class="line">/error.html = anon </span><br><span class="line">/login_*.action=anon </span><br><span class="line"> </span><br><span class="line">/emp_updatePwd.action= perms[] </span><br><span class="line">/pwd.html=perms["重置密码"]  </span><br><span class="line">/emp_updatePwd_reset.action=perms["重置密码"] </span><br><span class="line"> </span><br><span class="line">/orders.html= perms["采购申请","采购订单查询","采购审核","采购确认","采购入库","销售订单录入","销售订单查询","销售订单出库"]  </span><br><span class="line">/orders_add.action= perms["采购申请","销售订单录入"]  </span><br><span class="line">/goods_list.action= perms["采购申请","销售订单录入","库存查询","库存变动记录"]  </span><br><span class="line">/supplier_list.action= perms["采购申请","销售订单录入"] </span><br><span class="line"> </span><br><span class="line">/orders_listByPage.action= perms["采购申请","采购订单查询","采购审核","采购确认","采购入库","销售订单录入","销售订单查询","销售订单出库"] </span><br><span class="line"> </span><br><span class="line">/orders_doCheck.action=perms["采购审核"] </span><br><span class="line">/orders_doStart.action=perms["采购确认"]  </span><br><span class="line">/store_mylist.action= perms["采购入库","销售订单出库"] </span><br><span class="line">/orderdetail_doInstore.action=perms["采购入库"] </span><br><span class="line">/orderdetail_doOutstore.action=perms["销售订单出库"] </span><br><span class="line"> </span><br><span class="line">/storedetail.html= perms["库存查询"] </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/store_*.action= perms["仓库"] </span><br><span class="line"> </span><br><span class="line">/goods_get.action= perms["库存查询","库存变动记录"] </span><br><span class="line">/store_list.action= perms["库存查询","库存变动记录"] </span><br><span class="line">/store_get.action= perms["库存查询","库存变动记录"] </span><br><span class="line">/storedetail_listByPage.action= perms["库存查询"] </span><br><span class="line">/storeoper_listByPage.action= perms["库存查询"] </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">/storeoper.html= perms["库存变动记录"] </span><br><span class="line">/storeoper_listByPage.action= perms["库存变动记录"] </span><br><span class="line">  </span><br><span class="line">/emp_list.action= perms["库存变动记录"] </span><br><span class="line">/emp_get.action= perms["库存变动记录"] </span><br><span class="line"> </span><br><span class="line">/store.html= perms["仓库"] </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/orderReport.html= perms["销售统计表"] </span><br><span class="line">/report_orderReport*.action= perms["销售统计表"] </span><br><span class="line">  </span><br><span class="line">/orderTrend.html= perms["销售趋势分析"] </span><br><span class="line">/report_orderTrend*.action= perms["销售趋势分析"] </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">/roleMenuSet.html=perms["角色权限设置"] </span><br><span class="line">/role_list.action=perms["角色权限设置"] </span><br><span class="line">/role_readRoleMenus.action=perms["角色权限设置"] </span><br><span class="line">/role_updateRoleMenus.action=perms["角色权限设置"] </span><br><span class="line"> </span><br><span class="line">/empRoleSet.html=perms["用户角色设置"] </span><br><span class="line">/emp_list.action=perms["用户角色设置"] </span><br><span class="line">/emp_readEmpRoles.action=perms["用户角色设置"] </span><br><span class="line">/emp_updateEmpRoles.action=perms["用户角色设置"] </span><br><span class="line">  </span><br><span class="line">/role.html= perms["角色设置"] </span><br><span class="line">/role_*.action= perms["角色设置"]  </span><br><span class="line">  </span><br><span class="line">/goodstype.html= perms["商品类型"]  </span><br><span class="line">/goodstype_*.action= perms["商品类型"]  </span><br><span class="line"> </span><br><span class="line">/goods.html= perms["商品"]  </span><br><span class="line">/goods_*.action= perms["商品"] </span><br><span class="line">  </span><br><span class="line">/supplier.html = perms["供应商","客户"]  </span><br><span class="line">/supplier_*.action = perms["供应商","客户"] </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">/emp.html= perms["员工"]  </span><br><span class="line">/emp_*.action= perms["员工"] </span><br><span class="line">/dep_list.action=perms["员工"] </span><br><span class="line"> </span><br><span class="line">/dep.html= perms["部门"]  </span><br><span class="line">/dep_*.action= perms["部门"]  </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- shiro框架的中央枢纽 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"erpRealm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"erpRealm"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.erp.realm.ErpRealm"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empBiz"</span> <span class="attr">ref</span>=<span class="string">"empBiz"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"menuBiz"</span> <span class="attr">ref</span>=<span class="string">"menuBiz"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myPermsFilter"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.erp.filter.MyPermsFilter"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shiro总结&quot;&gt;&lt;a href=&quot;#Shiro总结&quot; class=&quot;headerlink&quot; title=&quot;Shiro总结&quot;&gt;&lt;/a&gt;Shiro总结&lt;/h1&gt;&lt;p&gt;一、配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、Shiro框架的搭建 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="shiro" scheme="http://yoursite.com/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>Java常用的八种排序算法与代码实现</title>
    <link href="http://yoursite.com/2018/08/01/java/java/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E5%85%AB%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/08/01/java/java/Java常用的八种排序算法与代码实现/</id>
    <published>2018-08-01T09:41:19.459Z</published>
    <updated>2018-08-01T09:41:19.460Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1、直接插入排序</li></ul><p>我们经常会到这样一类排序问题：<a id="more"></a>把新的数据插入到已经排好的数据列中。将第一个数和第二个数排序，然后构成一个有序序列将第三个数插入进去，构成一个新的有序序列。对第四个数、第五个数……直到最后一个数，重复第二步。如题所示：</p><p><img src="https://img-blog.csdn.net/20180801162925644?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>直接插入排序（Straight Insertion Sorting）的基本思想：在要排序的一组数中，假设前面(n-1) [n&gt;=2] 个数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。</p><p>代码实现：</p><p>首先设定插入次数，即循环次数，for(int i=1;i&lt;length;i++)，1个数的那次不用插入。<br>设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。<br>从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。<br>将当前数放置到空着的位置，即j+1。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> [] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=a.length;<span class="comment">//单独把数组长度拿出来，提高效率</span></span><br><span class="line">       <span class="keyword">int</span> insertNum;<span class="comment">//要插入的数</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;<span class="comment">//因为第一次不用，所以从1开始</span></span><br><span class="line">            insertNum=a[i];</span><br><span class="line">           <span class="keyword">int</span> j=i-<span class="number">1</span>;<span class="comment">//序列元素个数</span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;a[j]&gt;insertNum)&#123;<span class="comment">//从后往前循环，将大于insertNum的数向后移动</span></span><br><span class="line">                a[j+<span class="number">1</span>]=a[j];<span class="comment">//元素向后移动</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j+<span class="number">1</span>]=insertNum;<span class="comment">//找到位置，插入当前元素</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、希尔排序</li></ul><p>针对直接插入排序的下效率问题，有人对次进行了改进与升级，这就是现在的希尔排序。希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><p>插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率<br>但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位<br>如图所示：</p><p><img src="https://img-blog.csdn.net/20180801163251875?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>对于直接插入排序问题，数据量巨大时。<br>将数的个数设为n，取奇数k=n/2，将下标差值为k的数分为一组，构成有序序列。<br>再取k=k/2 ，将下标差值为k的书分为一组，构成有序序列。<br>重复第二步，直到k=1执行简单插入排序。</p><p>代码实现：</p><p>首先确定分的组数。<br>然后对组中元素进行插入排序。<br>然后将length/2，重复1,2步，直到length=0为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sheelSort</span><span class="params">(<span class="keyword">int</span> [] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=a.length;<span class="comment">//单独把数组长度拿出来，提高效率</span></span><br><span class="line">        <span class="keyword">while</span>(len!=<span class="number">0</span>)&#123;</span><br><span class="line">            len=len/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;<span class="comment">//分组</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+len;j&lt;a.length;j+=len)&#123;<span class="comment">//元素从第二个开始</span></span><br><span class="line">                    <span class="keyword">int</span> k=j-len;<span class="comment">//k为有序序列最后一位的位数</span></span><br><span class="line">                    <span class="keyword">int</span> temp=a[j];<span class="comment">//要插入的元素</span></span><br><span class="line">                    <span class="comment">/*for(;k&gt;=0&amp;&amp;temp&lt;a[k];k-=len)&#123;</span></span><br><span class="line"><span class="comment">                        a[k+len]=a[k];</span></span><br><span class="line"><span class="comment">                    &#125;*/</span></span><br><span class="line">                    <span class="keyword">while</span>(k&gt;=<span class="number">0</span>&amp;&amp;temp&lt;a[k])&#123;<span class="comment">//从后往前遍历</span></span><br><span class="line">                        a[k+len]=a[k];</span><br><span class="line">                        k-=len;<span class="comment">//向后移动len位</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    a[k+len]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、简单选择排序<br>常用于取序列中最大最小的几个数时。<br>(如果每次比较都交换，那么就是交换排序；如果每次比较完一个循环再交换，就是简单选择排序。)<br>遍历整个序列，将最小的数放在最前面。<br>遍历剩下的序列，将最小的数放在最前面。<br>重复第二步，直到只剩下一个数。</li></ul><p><img src="https://img-blog.csdn.net/20180801163457914?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>代码实现：</p><p>首先确定循环次数，并且记住当前数字和当前位置。<br>将当前位置后面所有的数与当前数字进行对比，小数赋值给key，并记住小数的位置。<br>比对完成后，将最小的值与第一个数的值交换。<br>重复2、3步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[]a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=a.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;<span class="comment">//循环次数</span></span><br><span class="line">            <span class="keyword">int</span> value=a[i];</span><br><span class="line">            <span class="keyword">int</span> position=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;<span class="comment">//找到最小的值和位置</span></span><br><span class="line">                <span class="keyword">if</span>(a[j]&lt;value)&#123;</span><br><span class="line">                    value=a[j];</span><br><span class="line">                    position=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[position]=a[i];<span class="comment">//进行交换</span></span><br><span class="line">            a[i]=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>4、堆排序<br>对简单选择排序的优化。<br>将序列构建成大顶堆。<br>将根节点与最后一个节点交换，然后断开最后一个节点。<br>重复第一、二步，直到所有节点断开。</p><p><img src="https://img-blog.csdn.net/20180801163619782?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">           <span class="keyword">int</span> len=a.length;</span><br><span class="line">           <span class="comment">//循环建堆  </span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">1</span>;i++)&#123;</span><br><span class="line">               <span class="comment">//建堆  </span></span><br><span class="line">               buildMaxHeap(a,len-<span class="number">1</span>-i);</span><br><span class="line">               <span class="comment">//交换堆顶和最后一个元素  </span></span><br><span class="line">               swap(a,<span class="number">0</span>,len-<span class="number">1</span>-i);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">//交换方法</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> tmp=data[i];</span><br><span class="line">           data[i]=data[j];</span><br><span class="line">           data[j]=tmp;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//对data数组从0到lastIndex建大顶堆  </span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始  </span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">               <span class="comment">//k保存正在判断的节点  </span></span><br><span class="line">               <span class="keyword">int</span> k=i;</span><br><span class="line">               <span class="comment">//如果当前k节点的子节点存在  </span></span><br><span class="line">               <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</span><br><span class="line">                   <span class="comment">//k节点的左子节点的索引  </span></span><br><span class="line">                   <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">                   <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  </span></span><br><span class="line">                   <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;</span><br><span class="line">                       <span class="comment">//若果右子节点的值较大  </span></span><br><span class="line">                       <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;</span><br><span class="line">                           <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></span><br><span class="line">                           biggerIndex++;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></span><br><span class="line">                   <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;</span><br><span class="line">                       <span class="comment">//交换他们  </span></span><br><span class="line">                       swap(data,k,biggerIndex);</span><br><span class="line">                       <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></span><br><span class="line">                       k=biggerIndex;</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li>5、冒泡排序<br>很简单，用到的很少，据了解，面试的时候问的比较多！<br>将序列中所有元素两两比较，将最大的放在最后面。<br>将剩余序列中所有元素两两比较，将最大的放在最后面。<br>重复第二步，直到只剩下一个数。</li></ul><p><img src="https://img-blog.csdn.net/20180801163822502?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>代码实现：</p><p>设置循环次数。<br>设置开始比较的位数，和结束的位数。<br>两两比较，将最小的放到前面去。<br>重复2、3步，直到循环次数完毕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</span><br><span class="line">          <span class="keyword">int</span> len=a.length;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len-i-<span class="number">1</span>;j++)&#123;<span class="comment">//注意第二重循环的条件</span></span><br><span class="line">                  <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                      <span class="keyword">int</span> temp=a[j];</span><br><span class="line">                      a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                      a[j+<span class="number">1</span>]=temp;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>6.快速排序<br>要求时间最快时。<br>选择第一个数为p，小于p的数放在左边，大于p的数放在右边。<br>递归的将p左边和右边的数都按照第一步进行，直到不能递归。</p><p> <img src="https://img-blog.csdn.net/20180801163841272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(start&lt;end)&#123;</span><br><span class="line">              <span class="keyword">int</span> baseNum=a[start];<span class="comment">//选基准值</span></span><br><span class="line">              <span class="keyword">int</span> midNum;<span class="comment">//记录中间值</span></span><br><span class="line">              <span class="keyword">int</span> i=start;</span><br><span class="line">              <span class="keyword">int</span> j=end;</span><br><span class="line">              <span class="keyword">do</span>&#123;</span><br><span class="line">                  <span class="keyword">while</span>((a[i]&lt;baseNum)&amp;&amp;i&lt;end)&#123;</span><br><span class="line">                      i++;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">while</span>((a[j]&gt;baseNum)&amp;&amp;j&gt;start)&#123;</span><br><span class="line">                      j--;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span>(i&lt;=j)&#123;</span><br><span class="line">                      midNum=a[i];</span><br><span class="line">                      a[i]=a[j];</span><br><span class="line">                      a[j]=midNum;</span><br><span class="line">                      i++;</span><br><span class="line">                      j--;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;<span class="keyword">while</span>(i&lt;=j);</span><br><span class="line">               <span class="keyword">if</span>(start&lt;j)&#123;</span><br><span class="line">                   quickSort(a,start,j);</span><br><span class="line">               &#125;       </span><br><span class="line">               <span class="keyword">if</span>(end&gt;i)&#123;</span><br><span class="line">                   quickSort(a,i,end);</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>7、归并排序<br>速度仅次于快速排序，内存少的时候使用，可以进行并行计算的时候使用。<br>选择相邻两个数组成一个有序序列。<br>选择相邻的两个有序序列组成一个有序序列。<br>重复第二步，直到全部组成一个有序序列。</li></ul><p><img src="https://img-blog.csdn.net/20180801163954573?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">int</span> t = <span class="number">1</span>;<span class="comment">// 每组元素个数  </span></span><br><span class="line">          <span class="keyword">int</span> size = right - left + <span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">while</span> (t &lt; size) &#123;  </span><br><span class="line">              <span class="keyword">int</span> s = t;<span class="comment">// 本次循环每组元素个数  </span></span><br><span class="line">              t = <span class="number">2</span> * s;  </span><br><span class="line">              <span class="keyword">int</span> i = left;  </span><br><span class="line">              <span class="keyword">while</span> (i + (t - <span class="number">1</span>) &lt; size) &#123;  </span><br><span class="line">                  merge(a, i, i + (s - <span class="number">1</span>), i + (t - <span class="number">1</span>));  </span><br><span class="line">                  i += t;  </span><br><span class="line">              &#125;  </span><br><span class="line">              <span class="keyword">if</span> (i + (s - <span class="number">1</span>) &lt; right)  </span><br><span class="line">                  merge(a, i, i + (s - <span class="number">1</span>), right);  </span><br><span class="line">          &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">      </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> r)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[data.length];  </span><br><span class="line">          <span class="keyword">int</span> s = p;  </span><br><span class="line">          <span class="keyword">int</span> t = q + <span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">int</span> k = p;  </span><br><span class="line">          <span class="keyword">while</span> (s &lt;= q &amp;&amp; t &lt;= r) &#123;  </span><br><span class="line">              <span class="keyword">if</span> (data[s] &lt;= data[t]) &#123;  </span><br><span class="line">                  B[k] = data[s];  </span><br><span class="line">                  s++;  </span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                  B[k] = data[t];  </span><br><span class="line">                  t++;  </span><br><span class="line">              &#125;  </span><br><span class="line">              k++;  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">if</span> (s == q + <span class="number">1</span>)  </span><br><span class="line">              B[k++] = data[t++];  </span><br><span class="line">          <span class="keyword">else</span>  </span><br><span class="line">              B[k++] = data[s++];  </span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= r; i++)  </span><br><span class="line">              data[i] = B[i];  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><p>8、基数排序<br>用于大量数，很长的数进行排序时。<br>将所有的数的个位数取出，按照个位数进行排序，构成一个序列。<br>将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。</p><p>代码实现：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baseSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//首先确定排序的趟数;    </span></span><br><span class="line">              <span class="keyword">int</span> max = a[<span class="number">0</span>];</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (a[i] &gt; max) &#123;</span><br><span class="line">                      max = a[i];</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">              <span class="comment">//判断位数;    </span></span><br><span class="line">              <span class="keyword">while</span> (max &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  max /= <span class="number">10</span>;</span><br><span class="line">                  time++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//建立10个队列;    </span></span><br><span class="line">              List&lt;ArrayList&lt;Integer&gt;&gt; queue = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                  ArrayList&lt;Integer&gt; queue1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                  queue.add(queue1);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//进行time次分配和收集;    </span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">                  <span class="comment">//分配数组元素;    </span></span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                      <span class="comment">//得到数字的第time+1位数;  </span></span><br><span class="line">                      <span class="keyword">int</span> x = a[j] % (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i + <span class="number">1</span>) / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</span><br><span class="line">                      ArrayList&lt;Integer&gt; queue2 = queue.get(x);</span><br><span class="line">                      queue2.add(a[j]);</span><br><span class="line">                      queue.set(x, queue2);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//元素计数器;    </span></span><br><span class="line">                  <span class="comment">//收集队列元素;    </span></span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">                      <span class="keyword">while</span> (queue.get(k).size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                          ArrayList&lt;Integer&gt; queue3 = queue.get(k);</span><br><span class="line">                          a[count] = queue3.get(<span class="number">0</span>);</span><br><span class="line">                          queue3.remove(<span class="number">0</span>);</span><br><span class="line">                          count++;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>新建测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            <span class="comment">//a[i]=(int)(new Random().nextInt(100));</span></span><br><span class="line">            a[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"排序前的数组为："</span>+Arrays.toString(a));</span><br><span class="line">        Sort s=<span class="keyword">new</span> Sort();</span><br><span class="line">        <span class="comment">//排序方法测试</span></span><br><span class="line">        <span class="comment">//s.insertSort(a);</span></span><br><span class="line">        <span class="comment">//s.sheelSort(a);</span></span><br><span class="line">        <span class="comment">//s.selectSort(a);</span></span><br><span class="line">        <span class="comment">//s.heapSort(a);</span></span><br><span class="line">        <span class="comment">//s.bubbleSort(a);</span></span><br><span class="line">        <span class="comment">//s.quickSort(a, 1, 9);</span></span><br><span class="line">        <span class="comment">//s.mergeSort(a, 3, 7);</span></span><br><span class="line">        s.baseSort(a);</span><br><span class="line">        System.out.println(<span class="string">"排序后的数组为："</span>+Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分结果如下:</p><p><img src="https://img-blog.csdn.net/20180801164250720?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>如果要进行比较可已加入时间，输出排序时间，从而比较各个排序算法的优缺点，这里不再做介绍。</p><ul><li>8、总结：<br>一、稳定性:</li></ul><p>　   稳定：冒泡排序、插入排序、归并排序和基数排序</p><p>　　不稳定：选择排序、快速排序、希尔排序、堆排序</p><p>二、平均时间复杂度</p><p>　　O(n^2):直接插入排序，简单选择排序，冒泡排序。</p><p>　　在数据规模较小时（9W内），直接插入排序，简单选择排序差不多。当数据较大时，冒泡排序算法的时间代价最高。性能为O(n^2)的算法基本上是相邻元素进行比较，基本上都是稳定的。</p><p>　　O(nlogn):快速排序，归并排序，希尔排序，堆排序。</p><p>　　其中，快排是最好的， 其次是归并和希尔，堆排序在数据量很大时效果明显。</p><p>三、排序算法的选择</p><p>　　1.数据规模较小</p><p>  　　（1）待排序列基本序的情况下，可以选择直接插入排序；</p><p>  　　（2）对稳定性不作要求宜用简单选择排序，对稳定性有要求宜用插入或冒泡</p><p>　　2.数据规模不是很大</p><p>　　（1）完全可以用内存空间，序列杂乱无序，对稳定性没有要求，快速排序，此时要付出log（N）的额外空间。</p><p>　　（2）序列本身可能有序，对稳定性有要求，空间允许下，宜用归并排序</p><p>　　3.数据规模很大</p><p>   　　（1）对稳定性有求，则可考虑归并排序。</p><pre><code>　　（2）对稳定性没要求，宜用堆排序</code></pre><p>　　4.序列初始基本有序（正序），宜用直接插入，冒泡</p><p> 各算法复杂度如下：</p><p><img src="https://img-blog.csdn.net/20180801164323823?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1、直接插入排序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们经常会到这样一类排序问题：
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>AOP </title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/AOP/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/AOP/</id>
    <published>2018-08-01T08:09:03.946Z</published>
    <updated>2018-08-01T08:09:03.948Z</updated>
    
    <content type="html"><![CDATA[<p>代码控制使用spring的Aop<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.mgr.aop; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject; </span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.mgr.service.dashboard.impl.DashboardService; </span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.model.ControllerResult; </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint; </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around; </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect; </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Aspect</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashBoardCacheAop</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DashboardService dashboardService; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()); </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DashBoardCacheAop</span><span class="params">(DashboardService dashboardService)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.dashboardService = dashboardService; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">* 定义一个切入点 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.zhibi.xiuba.mgr.controller.dashboard.DashboardController.getDashboard*(..))"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeService</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"executeService()"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">processTx</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">String methodName = jp.getSignature().getName(); </span><br><span class="line">String key = <span class="string">"DashBoard:"</span> + methodName.toUpperCase(); </span><br><span class="line">logger.info(<span class="string">"key:"</span> + key); </span><br><span class="line">JSONObject jsonObject = dashboardService.getCache(key); </span><br><span class="line"><span class="keyword">if</span> (jsonObject != <span class="keyword">null</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> ControllerResult.ok(jsonObject); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">Object o = jp.proceed(jp.getArgs()); </span><br><span class="line"><span class="keyword">if</span> (o != <span class="keyword">null</span> &amp;&amp; o <span class="keyword">instanceof</span> ControllerResult) &#123; </span><br><span class="line">ControllerResult controllerResult = (ControllerResult) o; </span><br><span class="line"><span class="keyword">if</span> (controllerResult.getStatus()) &#123; </span><br><span class="line">dashboardService.setCache(key, (JSONObject) controllerResult.getData()); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> controllerResult; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码控制使用spring的Aop
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>zuul笔记</title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/zuul%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/zuul笔记/</id>
    <published>2018-08-01T08:01:58.354Z</published>
    <updated>2018-08-01T08:01:58.356Z</updated>
    
    <content type="html"><![CDATA[<p>一、微服务网关背景及简介<br>不同的微服务一般有不同的网络地址，而外部的客户端可能需要调用多个服务的接口才能完成一个业务需求。比如一个电影购票的收集APP,可能回调用电影分类微服务，用户微服务，支付微服务等。如果客户端直接和微服务进行通信，会存在一下问题：<br> <a id="more"></a></p><ul><li><p>客户端会多次请求不同微服务，增加客户端的复杂性 </p></li><li><p>存在跨域请求，在一定场景下处理相对复杂 </p></li><li><p>认证复杂，每一个服务都需要独立认证 </p></li><li><p>难以重构，随着项目的迭代，可能需要重新划分微服务，如果客户端直接和微服务通信，那么重构会难以实施 </p></li><li><p>某些微服务可能使用了其他协议，直接访问有一定困难 </p></li></ul><p>上述问题，都可以借助微服务网管解决。微服务网管是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关，架构演变成： </p><p><img src="https://img-blog.csdn.net/20180801154246999?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>这样客户端只需要和网关交互，而无需直接调用特定微服务的接口，而且方便监控，易于认证，减少客户端和各个微服务之间的交互次数。 </p><p>二、zuul简介 </p><p>Zuul是Netflix开源的微服务网关，他可以和Eureka,Ribbon,Hystrix等组件配合使用。Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能： </p><ul><li><p>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求 </p></li><li><p>审查与监控： </p></li><li><p>动态路由：动态将请求路由到不同后端集群 </p></li><li><p>压力测试：逐渐增加指向集群的流量，以了解性能 </p></li><li><p>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求 </p></li><li><p>静态响应处理：边缘位置进行响应，避免转发到内部集群 </p></li><li><p>多区域弹性：跨域AWS Region进行请求路由，旨在实现ELB(ElasticLoad Balancing)使用多样化 </p></li></ul><p>Spring Cloud对Zuul进行了整合和增强。目前，Zuul使用的默认是Apache的HTTP Client，也可以使用Rest Client，可以设置ribbon.restclient.enabled=true. </p><p>三、编写Zuul微服务网关 </p><ul><li><p>1、添加依赖 </p><p>  Zuul的依赖肯定是要加的，如何和Eureka配合使用， Zuul需要注册到Eureka上，但是Zuul的依赖不包含Eureka Discovery客户端，所以还需要添加Eureka的客户端依赖 </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2、启动类加上注解@EnableZuulProxy </p><p>  它默认加上了@EnableCircuitBreaker和@EnableDiscoveryClient </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="meta">@EnableZuulProxy</span> </span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> </span><br><span class="line"><span class="meta">@EnableTurbine</span> </span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line"> </span><br><span class="line">           SpringApplication.run(ZuulApplication.class, args); </span><br><span class="line">      &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、 配置application.yml </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">  port:</span> <span class="number">8040</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">  application:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-gateway-zuul</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">  client:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">      defaultZone:</span><span class="attr">http://nicky:123abcABC@localhost:8761/eureka</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">  instance:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">    ip-address:</span> <span class="literal">true</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">zuul:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">  ignoredServices:</span> <span class="string">'*'</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">  routes:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">    microservice-provider-user:</span> <span class="string">/ecom/**</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">zuul:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr"> ignoredServices:</span> <span class="string">'*'</span> <span class="string">//</span> <span class="string">忽略所有请求</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr"> routes:</span> </span><br><span class="line"> </span><br><span class="line">    <span class="string">服务名:</span> <span class="string">/ecom/**</span> <span class="string">//允许将服务名映射到ecom</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignoredServices:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    user-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/user/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">    task-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/task/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">taskservice</span></span><br><span class="line"><span class="attr">    order-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">    pay-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/pay/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">payservice</span></span><br><span class="line"><span class="attr">    search-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/search/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">searchservice</span></span><br><span class="line"><span class="attr">    wechat-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/wechat/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">wechatservice</span></span><br><span class="line"><span class="attr">    wxapi-api:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/wxapi/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">wechatservice</span></span><br></pre></td></tr></table></figure><ul><li><p>4、启动Eureka，Zuul和 其他应用 </p><p>  访问<a href="http://localhost:8040/ecom/user/1" target="_blank" rel="noopener">http://localhost:8040/ecom/user/1</a> </p><p>  或者 </p><p>  <a href="http://localhost:8040/microservice-provider-user/user/1" target="_blank" rel="noopener">http://localhost:8040/microservice-provider-user/user/1</a> </p><p>  都可以 </p></li></ul><p>四、过滤header </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">routes:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">abc:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">path:</span> <span class="string">/provider/**</span> </span><br><span class="line"><span class="attr">service-id:</span> <span class="string">microservice-provider-user</span> </span><br><span class="line"><span class="attr">sensitiveHeaders:</span><span class="string">Cookie,Set-Cookie,Authorization</span> </span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://downstream</span></span><br></pre></td></tr></table></figure><p>sensitiveHeaders会过滤客户端附带的headers<br>例如：<br>sensitiveHeaders: X-ABC<br>如果客户端在发请求是带了X-ABC，那么X-ABC不会传递给下游服务 </p><p>ignoredHeaders会过滤服务之间通信附带的headers<br>例如：<br>ignoredHeaders: X-ABC<br>如果客户端在发请求是带了X-ABC，那么X-ABC依然会传递给下游服务。但是如果下游服务再转发就会被过滤 </p><p>还有一种情况就是客户端带了X-ABC，在ZUUL的Filter中又addZuulRequestHeader(“X-ABC”, “new”),<br>那么客户端的X-ABC将会被覆盖，此时不需要sensitiveHeaders。如果设置了sensitiveHeaders: X-ABC，那么Filter中设置的X-ABC依然不会被过滤。 </p><p>五、Zuul的容错与回退<br>在Spring Cloud, Zuul默认已经整合了Hystrix, 而且如果启动了Dashborad，也可以知道Zuul对Hystrix监控的粒度是微服务，而不是某一个API; 同时也说明所有经过Zuul的请求都会被Hystrix保护起来。 </p><p>为Zuul添加回退：<br>想要为Zuul添加回退，需要实现ZuulFallbackProvider接口。在实现类中，指定为哪一个微服务提供回退，并且提供一个ClientHttpResponse作为回退响应 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> classUserFallbackProvider implementsZuulFallbackProvider&#123; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span></span>&#123; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 指定为哪一个微服务提供回退 </span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"microservice-provider-user"</span>; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"><span class="function">publicClientHttpResponse <span class="title">fallbackResponse</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> newClientHttpResponse() &#123; </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HttpHeadersgetHeaders</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置header </span></span><br><span class="line"> </span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders(); </span><br><span class="line"> </span><br><span class="line">MediaType mediaType = <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, </span><br><span class="line"> </span><br><span class="line"><span class="string">"json"</span>,Charset.forName(<span class="string">"UTF-8"</span>)); </span><br><span class="line"> </span><br><span class="line">headers.setContentType(mediaType); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> headers; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">InputStreamgetBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 响应体 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> newByteArrayInputStream( </span><br><span class="line"> </span><br><span class="line"><span class="string">"Usermicro-service is unavailable, please try it again later!"</span>.getBytes()); </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">StringgetStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 返回状态文本 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().getReasonPhrase(); </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HttpStatusgetStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> HttpStatus.OK; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">intgetRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 返回数字类型的状态码 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().value(); </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动Eureka Server，microservice-gateway-zuul-fallback以及microservice-provider-user </p><p>我们正常通过zuul访问microservice-provider-user微服务 </p><p><a href="http://localhost:8040/microservice-provider-user/user/1" target="_blank" rel="noopener">http://localhost:8040/microservice-provider-user/user/1</a> 没有问题 </p><p>然后我们关掉microservice-provider-user微服务 </p><p>在访问<a href="http://localhost:8040/microservice-provider-user/user/1，则会出现User" target="_blank" rel="noopener">http://localhost:8040/microservice-provider-user/user/1，则会出现User</a> micro-service is unavailable, please try it again later!<br>而不是以前不友好的那个页面了 </p><p>六、Zuul的高可用<br>Zuul的高可用非常关键，因为外部请求到后端的微服务的流量都会经过Zuul。故而在生产环境中一般都需要部署高可用的Zuul以避免单点故障 </p><p>此种情况，Zuul的高可用实现比较简单，只需将多个Zuul节点注册到Eureka Server,就可以实现Zuul高可用。此时，Zuul与其他的微服务高可用没啥区别。Zuul客户端会自动从Eureka Server中查询Zuul Server的列表，并使用Ribbon负载均衡的请求Zuul集群 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、微服务网关背景及简介&lt;br&gt;不同的微服务一般有不同的网络地址，而外部的客户端可能需要调用多个服务的接口才能完成一个业务需求。比如一个电影购票的收集APP,可能回调用电影分类微服务，用户微服务，支付微服务等。如果客户端直接和微服务进行通信，会存在一下问题：&lt;br&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="zuul" scheme="http://yoursite.com/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>springboot异步 </title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot异步/</id>
    <published>2018-08-01T07:04:07.216Z</published>
    <updated>2018-08-01T07:04:07.217Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在做白拿拿项目的时候，有一些不需要即时完成的，也不需要即时获取返回值的工作，可以放到异步方法中执行，原理是springboot会自动开启另一个线程去做这件事</p><p>实现方法：  </p><ul><li><p>1.启动类上要有一个注解开启异步  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.在那个方法上加上注解 ，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Async</span>(<span class="string">"线程池名字，如果没有则用默认的"</span>) </span><br><span class="line"> <span class="function">publicFuture&lt;String&gt; <span class="title">doTaskOne</span><span class="params">()</span> throwsException </span>&#123; </span><br><span class="line"> System.out.println(<span class="string">"开始做任务一"</span>); </span><br><span class="line"> longstart = System.currentTimeMillis(); </span><br><span class="line"> Thread.sleep(random.nextInt(<span class="number">10000</span>)); </span><br><span class="line"> longend = System.currentTimeMillis(); </span><br><span class="line"> System.out.println(<span class="string">"完成任务一，耗时："</span>+ (end - start) +<span class="string">"毫秒"</span>); </span><br><span class="line"> returnnewAsyncResult&lt;&gt;(<span class="string">"任务一完成"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在做白拿拿项目的时候，有一些不需要即时完成的，也不需要即时获取返回值的工作，可以放到异步方法中执行，原理是springboot会自动开启另一个线程去做这件事&lt;/p&gt;
&lt;p&gt;实现方法：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.启动类上要有一个注解开启异
      
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>springboot定时任务 </title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot定时任务/</id>
    <published>2018-08-01T07:04:07.171Z</published>
    <updated>2018-08-01T07:04:07.172Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一、白拿拿项目中需要每天凌晨统计一次昨天一天的邀请排行榜,与定时任务有关代码示例如下：  <a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleHandler</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IChannelSourceConfigService channelSourceConfigService; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScheduleHandler</span><span class="params">(IChannelSourceConfigService channelSourceConfigService)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.channelSourceConfigService = channelSourceConfigService; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 7 0 * * ?"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShowkerCountCache</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        channelSourceConfigService.refreshAll(); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二、当有多个定时器的时候  需要异步使用 增加定时器线程池配置 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@EnableScheduling</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123; </span><br><span class="line">        taskRegistrar.setScheduler(taskExecutor()); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">100</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>三、详细内容  </p><p>  Spring 定时任务实例<br>  Spring 中使用定时任务很简单，只需要@EnableScheudling 注解启用即可，并不要求是一个 Spring Mvc 的项目。<br>  对于一个 Spring Boot 项目，使用定时任务的简单方式如下：<br>  pom.xml 中 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><pre><code>Application.java </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> </span><br><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"> SpringApplication.run(Application.class, args); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableScheduling 是必须的。默认时定时任务的线程是由 Executors.defaultThreadFactory() 产生的，线程名称是 “pool-NUMBER-thread-…”, 关键是线程的 daemon 属性为 false, 阻止了主线程的退出，使得任务能一遍遍执行。   </p><p>SchedulRunner.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleRunner</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">", job1@"</span> + LocalTime.now()); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺带提一下注解@Scheduled的各个属性 </p><ol><li>cron: 以 UN<em>X 的 cron 的方式定义 job, 如 “0 </em> <em> </em> * NON-FRI” </li><li>fixedRate: 每次任务启动时的间隔时间，fixedRateString，意义是一样，只是可以通过外部来定义，如 fixedRateString = “${job1.fixed.rate}” </li><li>fixedDelay: 上次任务结束后间隔多少时间再启动下一次任务，这样避免前一个任务尚未结束又启动下一个任务，fixedDelayString 类似 fixedRateString </li><li>intialDelay: 程序启动后至任务首次执行时的间隔时间，针对 fixedRate(fixedRateString), fixedDelay(fixedDelayString) </li><li>zone: 给 cron 表达式用的时区   </li><li>注意, 以上的时间都是毫秒   </li></ol><p>&emsp;启动这个 Spring Boot 项目，可以看到 job1 每隔五分钟执行一次，并且全部由一个线程来执行<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:57:46.822<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:57:51.831<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:57:56.836<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:58:01.841<br>&emsp;居然总是同一个线程<br>&emsp;如果我们把上面的 fixedDelay 改成 fixedRate, 并且用 Thread.sleep(20000) 来模拟单次任务耗时 20 秒，试图让上次任务还在进行当中执行下一次任务 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleRunner</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job1</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> System.out.println(Thread.currentThread() + <span class="string">", job1@"</span> + LocalTime.now()); </span><br><span class="line"> <span class="keyword">try</span> &#123; </span><br><span class="line"> Thread.sleep(<span class="number">20000</span>); </span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">  &#125; </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&emsp;执行后，发现事与愿为<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:58:57.564<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:59:17.572<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:59:37.575<br>&emsp;Thread[pool-1-thread-1,5,main], job1@21:59:57.580<br>&emsp;&emsp;并非每五秒启动下一个任务，而是每隔20 秒，原来是只有一个线程来执行所有任务，后面的任务必须等前一个任务释放出了线程才能得到执行。我们可以理解为 Spring 在任务调度时，fixedRate, fixedDelay 或 cron 只是决定提交任务到线程池的时刻，至于真正执行任务的时间就看有没有空闲的线程，因此最终决定于线程池的配置。<br>&emsp;同样，如果我们在ScheduleRunner 中声明两个任务(后续的执行输出结果都以这两个任务为例) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleRunner</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>) </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job1</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> System.out.println(Thread.currentThread() + <span class="string">", job1@"</span> + LocalTime.now()); </span><br><span class="line"> <span class="keyword">try</span> &#123; </span><br><span class="line"> Thread.sleep(<span class="number">20000</span>); </span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">  &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>) </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  System.out.println(Thread.currentThread() + <span class="string">", job2@"</span> + LocalTime.now()); </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>执行的效果是下面那样的<br>Thread[pool-1-thread-1,5,main], job2@22:05:12.236<br>Thread[pool-1-thread-1,5,main], job1@22:05:12.241<br>Thread[pool-1-thread-1,5,main], job2@22:05:32.244<br>Thread[pool-1-thread-1,5,main], job1@22:05:37.246<br>Thread[pool-1-thread-1,5,main], job2@22:05:57.250<br>Thread[pool-1-thread-1,5,main], job1@22:06:02.253<br>也是因为始终只有一个线程的缘故，任务调度无法按照预定的要求，job1 和 job2 不能同时进行，更别说 job1 或是 job2 的前后两次任务同时进行。job2 每次要等待 job1 执行完释放出线程来执行，所以不管 fixedDelay 或 fixedRate 配置多小的时间间隔，中间都至少要等 20 秒。<br>既然我们知晓了是单一线程的原因，那么再追根究底看看，以及解决办法是什么？<br>如何创建任务线程的？<br>查看源代码是最有效的，采用顺藤摸瓜的办法，从 @EnableScheduling 起，在 EnableScheduling 中找到 @see ScheduledAnnotationBeanPostProcessor, 来到ScheduledAnnotationBeanPostProcessor.setScheduler(Object scheduler)方法的 JavaDoc<br>说的是定时任务需要一个线程池(TaskScheduler 或 ScheduledExecutorService) 来执行，Spring 会通过以下顺序去获得 TaskScheduler 或是 ScheduledExecutorService 包装为 TaskScheduler 实例<br> 1、类型为 TaskScheduler 的唯一 Bean<br> 2、如果第 1 步未找到，或找到多个就尝试查找名称为 “taskScheduler”, 类型为 TaskScheduler 的 Bean<br> 3、查找类型为 ScheduledExecutorService 的 Bean, 并包装为 TaskScheduler 实例<br> 4、如果第 3 步未到，或找到多个就尝试查找 名称为”taskScheduler”, 类型为 ScheduledExecutorService 的 Bean, 并包装为 TaskScheduler 实例   </p><p>也就是可以定一唯的类型为 TaskScheduler 或 ScheduledExecutorService 的 Bean, 或者是名称为 “taskScheduler” 的 TaskScheduler 或 ScheduledExecutorService 实例。   </p><p>查找 TaskScheduler 的方法是ScheduledAnnotationBeanPostProcessor.finishRegistration(), 点接该链接查看源代码。<br>找到了 TaskScheduler 或 ScheduledExecutorService 后设置 Scheduler 的代码如下，在ScheduledTaskRegistrar类中 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScheduler</span><span class="params">(Object scheduler)</span> </span>&#123; </span><br><span class="line">Assert.notNull(scheduler, <span class="string">"Scheduler object must not be null"</span>); </span><br><span class="line"><span class="keyword">if</span> (scheduler <span class="keyword">instanceof</span> TaskScheduler) &#123; </span><br><span class="line"><span class="keyword">this</span>.taskScheduler = (TaskScheduler) scheduler; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (scheduler <span class="keyword">instanceof</span> ScheduledExecutorService) &#123; </span><br><span class="line"><span class="keyword">this</span>.taskScheduler = <span class="keyword">new</span> ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported scheduler type: "</span> + scheduler.getClass()); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对 ScheduledExecutorService 的包装是通过 ConsurrentTaskScheduler 类。<br>而在 ScheduledTaskRegistrar 中注册任务是由 scheduleTasks() 实现的， </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">scheduleTasks</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>.taskScheduler == <span class="keyword">null</span>) &#123; </span><br><span class="line"> <span class="keyword">this</span>.localExecutor = Executors.newSingleThreadScheduledExecutor(); </span><br><span class="line"> <span class="keyword">this</span>.taskScheduler = <span class="keyword">new</span> ConcurrentTaskScheduler(<span class="keyword">this</span>.localExecutor); </span><br><span class="line"> &#125; </span><br><span class="line"> ...... </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这才看到为什么默认情况下 Spring 用单线程来执行所有的任务, 因为 Spring 未定义 TaskScheduler 和 ScheduledExecutorService 这两个实例。此名，上面的<br>Executors.newSingleThreadScheduledExecutor()<br>最终会调用 Executors.defaultThreadFactory() 来创建 daemon 为 false 的线程。 </p><ul><li>四、提供自定义的任务线程池   </li></ul><p>一般来说，只用一个线程来执行所有的任务是满足不了我们的需求的，除非项目中只有一个任务时的以下两种情况<br>• 用 fixedDelay 来配置的<br>• fixedRate 或 cron, 并且在时间间隔内每次任务必须能执行完成<br>知道了来龙去脉，就可以参考上面 1, 2, 3, 4 的顺序来定义一个自己的 TaskScheduler 来 ScheduledExecutorService 实例<br>• 类型为 TaskScheduler 或 ScheduledExecutorService 的实例<br>• 名称为 “taskScheduler” 的 TaskScheduler 或 ScheduledExecutorService 实例<br>TaskScheduler 接口有三个实现，分别是 ThreadPoolTaskScheduler,<br>ConcurrentTaskScheduler, 和 DefaultMangedTaskScheduler(继承自 ConsurrentTaskScheduler)<br>ScheduledExecutorService 接口有两个实现类，分别是 ScheduledThreadPoolExecutor<br>DelegatedScheduledExecutorService<br>下面是几个例子，可在前面的 Application 类中配置一个 @Bean, 代码如下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Bean</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler(); </span><br><span class="line"> taskScheduler.setPoolSize(<span class="number">5</span>); </span><br><span class="line"> <span class="keyword">return</span> taskScheduler; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再次运行<br><br>Thread[taskScheduler-1,5,main], job2@23:21:09.307<br><br>Thread[taskScheduler-2,5,main], job1@23:21:09.307<br><br>Thread[taskScheduler-1,5,main], job2@23:21:14.315<br><br>Thread[taskScheduler-3,5,main], job2@23:21:19.318<br><br>Thread[taskScheduler-1,5,main], job2@23:21:24.322<br><br>Thread[taskScheduler-1,5,main], job2@23:21:29.326<br><br>Thread[taskScheduler-2,5,main], job1@23:21:34.320<br><br>Thread[taskScheduler-4,5,main], job2@23:21:34.327<br><br><br><br>现在分别由不同的的线程来执行各自的任务，互不干涉，每次任务由谁来执行只取决于池中的空闲线程。现在终于是 job1 每 25(20+5) 秒， job2 每 5 秒执行一次。应用中应根据任务间隔与每个任务执行时长来配置线程池的大小。此时线程池的名称是 TaskScheduler Bean 的名称，所以我们想改变线程池名称的话可以命一个新的 Bean 名称，改方法名或是指定 @Bean 的 name 属性，如 <br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Bean</span>(name = <span class="string">"TaskPool"</span>) </span><br><span class="line"> <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> ..... </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><br>那么执行后打印的线程名称是<br><br>Thread[TaskPool-2,5,main], job1@23:26:09.330<br><br>Thread[TaskPool-1,5,main], job2@23:26:09.330<br><br>线程 daemon 应该是 false, 除非主线程自己不退<br><br>注意，如果是自己定义的线程池不能把线程的 daemon 设置为 true, 否则主线程很快退出进而整个进程结束，那就不是定时任务了。例如我们声明如下的 taskScheduler <br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123; </span><br><span class="line">AtomicInteger number = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>); </span><br><span class="line">ConcurrentTaskScheduler taskScheduler = <span class="keyword">new</span> ConcurrentTaskScheduler( </span><br><span class="line">Executors.newScheduledThreadPool(<span class="number">3</span>, r -&gt; &#123; </span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(r); </span><br><span class="line">thread.setName(<span class="string">"TaskPool-thread-"</span> + number.getAndIncrement()); </span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//daemon 为 true 导致主线程很快退出，从而进程退出 </span></span><br><span class="line"><span class="keyword">return</span> thread; </span><br><span class="line"> &#125;)); </span><br><span class="line"> <span class="keyword">return</span> taskScheduler; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><br>执行程序后的效果可能是这样的<br><br>这还比较幸运，任务被执行了一次，进程退出了，也有可能一次任务都无法执行，如果是 fixedDelay 稍长的任务更是不可能得到一次执行的机会进程就退出了。如果你的主线程自己控制了永不退出也是可行的。<br><br>这种情况下，我们一般是不会这么干 – 把线程的 daemon 设置为 true，这也就是为什么 ConcurrentTaskScheduler 接收的是一个 ScheduledExecutorService 参数。<br><br>名称 “taskScheduler” 或类型 “ScheduledExecutorService” 来查找相应的 Bean, 如果都没有找到，就会使用默认的单线程的 scheduler 来 执行任务，这就是我们之前看到的效果。   </p><p>@Scheduled 与 @Async<br>还是有必要提到一种情况，@Scheduled 和 @Async 是可以共存的。可以试着这么做<br>• 给 Application 类加上 @EnableAsync<br>• 给 ScheduleRunner 的 job1() 和 job2() 方法加上注解 @Async<br>执行后<br><br>Thread[SimpleAsyncTaskExecutor-1,5,main], job1@00:13:36.763<br><br>Thread[SimpleAsyncTaskExecutor-2,5,main], job2@00:13:36.763<br><br>Thread[SimpleAsyncTaskExecutor-3,5,main], job1@00:13:41.738<br><br>Thread[SimpleAsyncTaskExecutor-4,5,main], job2@00:13:41.738<br><br>Thread[SimpleAsyncTaskExecutor-5,5,main], job1@00:13:46.742<br><br>Thread[SimpleAsyncTaskExecutor-6,5,main], job2@00:13:46.742<br><br>SimpleAsyncTaskExecutor 并不使用线程池来执行任务，而是每次创建新的线程来执行任务，由于 job1() 和 job2() 两方法是异步的，所以 fixedDelay 的效果与 fixedRate 是一样的，因为方法一调用即认为是结束，马上就安排下一次执行的时间。如果想用 fixedDelay 让前后两次任务是有关联的，方法不能为 @Async.<br><br><br><br>给自己备注一下：<br><br>用 @Scheduled 标注的方法最后是包装到ScheduledMethodRunnable 中被执行的，它是一个 Runnable 接口的实现<br><br>Runnable runnable = new ScheduledMethodRunnable(bean, invocableMethod); </p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;一、白拿拿项目中需要每天凌晨统计一次昨天一天的邀请排行榜,与定时任务有关代码示例如下：
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="配置文件" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>springboot与swagger与zuul整合 </title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot%E4%B8%8Eswagger%E4%B8%8Ezuul%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot与swagger与zuul整合/</id>
    <published>2018-08-01T07:04:07.133Z</published>
    <updated>2018-08-01T07:04:07.135Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1、项目结构：<br>涉及到的服务有：<br>api-gateway、userservice、taskservice，项目由Springboot-springcloud-jpa-fegin-consul-zuul构成微服务 <a id="more"></a></li><li>2、网关服务：<br>其中 api-gateway 是网关服务 ，负责url的分发到各个微服务，用的是zuul，通过url匹配，在consul中找到并分发到不同服务，服务注册发现容器用的是consul，还可以用于配置项目key-value<br>consul配置如下： <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">cloud:</span> </span><br><span class="line"><span class="attr">inetutils:</span> </span><br><span class="line"><span class="attr">ignoredInterfaces:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">docker0</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">veth.*</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">VMware.*</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">VPN.*</span> </span><br><span class="line"><span class="attr">consul:</span> </span><br><span class="line"><span class="attr">host:</span> <span class="string">consul.zhibi.config</span> </span><br><span class="line"><span class="comment">#port: 8500 </span></span><br><span class="line"><span class="attr">discovery:</span> </span><br><span class="line"><span class="attr">healthCheckInterval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment">#服务中心健康检查间隔 </span></span><br><span class="line"><span class="attr">preferIpAddress:</span> <span class="literal">true</span><span class="comment">#使用外部IP注册服务，默认使用的是主机名 </span></span><br><span class="line"><span class="attr">health-check-critical-timeout:</span> <span class="number">5</span><span class="string">m</span> <span class="comment">#5分钟没有恢复服务的从服务注册中心移除 </span></span><br><span class="line"><span class="attr">instanceId:</span> <span class="string">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> </span><br><span class="line"><span class="attr">config:</span> </span><br><span class="line"><span class="attr">prefix:</span> <span class="string">config</span> </span><br><span class="line"><span class="attr">defaultContext:</span> <span class="string">xiuba-apigateway</span> </span><br><span class="line"><span class="attr">profileSeparator:</span> <span class="string">','</span> </span><br><span class="line"><span class="attr">format:</span> <span class="string">PROPERTIES</span></span><br></pre></td></tr></table></figure></li></ul><p>服务分发用的是cloud全家桶中的zuul服务<br>配置如下： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">   <span class="attr">application:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">apigateway</span> </span><br><span class="line"><span class="attr">zuul:</span> </span><br><span class="line">     <span class="attr">ignoredServices:</span> <span class="string">'*'</span> </span><br><span class="line">    <span class="attr">routes:</span> </span><br><span class="line">         <span class="attr">user-api:</span> </span><br><span class="line">             <span class="attr">path:</span> <span class="string">/user/**</span> </span><br><span class="line">           <span class="attr">stripPrefix:</span> <span class="literal">false</span> </span><br><span class="line">           <span class="attr">serviceId:</span> <span class="string">userservice</span> </span><br><span class="line">        <span class="attr">task-api:</span> </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/task/**</span> </span><br><span class="line">           <span class="attr">stripPrefix:</span> <span class="literal">false</span> </span><br><span class="line">           <span class="attr">serviceId:</span> <span class="string">taskservice</span> </span><br><span class="line">      <span class="attr">debug:</span> </span><br><span class="line">           <span class="attr">request:</span> <span class="literal">true</span> </span><br><span class="line">           <span class="attr">include-debug-header:</span> <span class="literal">true</span> </span><br><span class="line"> </span><br><span class="line">      <span class="attr">host:</span> </span><br><span class="line">          <span class="attr">connect-timeout-millis:</span> <span class="number">10000</span> </span><br><span class="line">          <span class="attr">socket-timeout-millis:</span> <span class="number">60000</span> </span><br><span class="line">          <span class="attr">max-total-connections:</span> <span class="number">1000</span> </span><br><span class="line">         <span class="attr">max-per-route-connections:</span> <span class="number">200</span> </span><br><span class="line">      <span class="attr">ribbon:</span> </span><br><span class="line">          <span class="attr">ReadTimeout:</span> <span class="number">10000</span> </span><br><span class="line">          <span class="comment">#开启饥饿模式，启动时创建好对应服务的client </span></span><br><span class="line">          <span class="attr">eager-load:</span> </span><br><span class="line">                 <span class="attr">enabled:</span> <span class="literal">true</span> </span><br><span class="line">          <span class="attr">clients:</span> <span class="string">userservice,taskservice,orderservice,payservice,searchservice</span></span><br></pre></td></tr></table></figure><p>以/user开始的url会被分配到userservice服务中， <br><br>以/task开始的url会被分派到taskservice服务中，  <br><br>stripPrefix: true的时候，访问相应服务的时候会去掉前面的/user、/task前缀  <br></p><ul><li>3、task、user服务<br>cloud配置： </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">cloud:</span> </span><br><span class="line"><span class="attr">inetutils:</span> </span><br><span class="line"><span class="attr">ignoredInterfaces:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">docker0</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">veth.*</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">VMware.*</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">VPN.*</span> </span><br><span class="line"><span class="attr">consul:</span> </span><br><span class="line"><span class="attr"> host:</span> <span class="string">consul.zhibi.config</span> </span><br><span class="line"> <span class="comment">#port: 8500 </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="attr">discovery:</span> </span><br><span class="line"><span class="attr"> healthCheckInterval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment">#服务中心健康检查间隔 </span></span><br><span class="line"> </span><br><span class="line"><span class="attr">preferIpAddress:</span> <span class="literal">true</span><span class="comment">#使用外部IP注册服务，默认使用的是主机名 </span></span><br><span class="line"> </span><br><span class="line"><span class="attr">health-check-critical-timeout:</span> <span class="number">5</span><span class="string">m</span> <span class="comment">#5分钟没有恢复服务的从服务注册中心移除 </span></span><br><span class="line"> </span><br><span class="line"><span class="attr">instanceId:</span> <span class="string">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> </span><br><span class="line"><span class="attr"> config:</span> </span><br><span class="line"><span class="attr"> prefix:</span> <span class="string">config</span> </span><br><span class="line"><span class="attr"> defaultContext:</span> <span class="string">xiuba-task</span> </span><br><span class="line"><span class="attr"> profileSeparator:</span> <span class="string">','</span> </span><br><span class="line"><span class="attr"> format:</span> <span class="string">PROPERTIES</span></span><br></pre></td></tr></table></figure><ul><li>4、swagger的maven依赖如下： </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>5、zuul-swagger配置   </li></ul><p>①、SwaggerConfig.java:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.config; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.UiConfiguration; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by qinhe_admin on 2017/9/20. </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@EnableSwagger</span>2 </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2) </span><br><span class="line">.apiInfo(apiInfo()); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder() </span><br><span class="line">.title(<span class="string">"白拿拿系统"</span>) </span><br><span class="line">.description(<span class="string">"白拿拿系统接口文档说明"</span>) </span><br><span class="line">.termsOfServiceUrl(<span class="string">"http://www.xiuba365.com"</span>) </span><br><span class="line">.contact(<span class="keyword">new</span> Contact(<span class="string">"秦贺"</span>, <span class="string">""</span>, <span class="string">"qinhelili@gmail.com"</span>)) </span><br><span class="line">.version(<span class="string">"1.0"</span>) </span><br><span class="line">.build(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function">UiConfiguration <span class="title">uiConfig</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UiConfiguration(<span class="keyword">null</span>, <span class="string">"list"</span>, <span class="string">"alpha"</span>, <span class="string">"schema"</span>, </span><br><span class="line">UiConfiguration.Constants.DEFAULT_SUBMIT_METHODS, <span class="keyword">false</span>, <span class="keyword">true</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、DocumentationConfig </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.config; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary; </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList; </span><br><span class="line"><span class="keyword">import</span> java.util.List; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by qinhe_admin on 2017/9/20. </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@Primary</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentationConfig</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span> </span>&#123; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span> </span>&#123; </span><br><span class="line">List resources = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">resources.add(swaggerResource(<span class="string">"活动task模块API"</span>, <span class="string">"/task/v2/api-docs"</span>, <span class="string">"2.0"</span>)); </span><br><span class="line">resources.add(swaggerResource(<span class="string">"用户账户user模块API"</span>, <span class="string">"/user/v2/api-docs"</span>, <span class="string">"2.0"</span>)); </span><br><span class="line"><span class="keyword">return</span> resources; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> SwaggerResource <span class="title">swaggerResource</span><span class="params">(String name, String location, String version)</span> </span>&#123; </span><br><span class="line">SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource(); </span><br><span class="line">swaggerResource.setName(name); </span><br><span class="line">swaggerResource.setLocation(location); </span><br><span class="line">swaggerResource.setSwaggerVersion(version); </span><br><span class="line"><span class="keyword">return</span> swaggerResource; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6、task和user服务的swagger配置 </li></ul><p>配置：   </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">xiuba:</span> </span><br><span class="line"><span class="attr">swagger:</span> </span><br><span class="line"><span class="attr">title:</span> <span class="string">活动task模块API</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">活动模块接口文档说明</span> </span><br><span class="line"><span class="attr">termsOfServiceUrl:</span> <span class="attr">http://www.xiuba365.com/</span> </span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span> </span><br><span class="line"><span class="attr">basePackage:</span> <span class="string">com.zhibi.xiuba.controller</span> </span><br><span class="line"><span class="attr">module:</span> <span class="string">task</span> </span><br><span class="line"><span class="attr">xiuba:</span> </span><br><span class="line"><span class="attr">swagger:</span> </span><br><span class="line"><span class="attr">title:</span> <span class="string">用户账户user模块API</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">用户账户模块接口文档说明</span> </span><br><span class="line"><span class="attr">termsOfServiceUrl:</span> <span class="attr">http://www.xiuba365.com/</span> </span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span> </span><br><span class="line"><span class="attr">basePackage:</span> <span class="string">com.zhibi.xiuba.controller</span> </span><br><span class="line"><span class="attr">module:</span> <span class="string">user</span></span><br></pre></td></tr></table></figure><p>SwaggerConfig.java:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.configers; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.UiConfiguration; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by qinhe_admin on 2017/9/20. </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"xiuba.swagger"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String title; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String description; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String termsOfServiceUrl; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String version; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String basePackage; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> title; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.title = title; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> description; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.description = description; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTermsOfServiceUrl</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> termsOfServiceUrl; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTermsOfServiceUrl</span><span class="params">(String termsOfServiceUrl)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.termsOfServiceUrl = termsOfServiceUrl; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> version; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(String version)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.version = version; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBasePackage</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> basePackage; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasePackage</span><span class="params">(String basePackage)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.basePackage = basePackage; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2) </span><br><span class="line">.apiInfo(apiInfo()) </span><br><span class="line">.select() </span><br><span class="line">.apis(RequestHandlerSelectors.basePackage(basePackage)) </span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class)) </span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) </span></span><br><span class="line">.paths(PathSelectors.any()) </span><br><span class="line">.build(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder() </span><br><span class="line">.title(title) </span><br><span class="line">.description(description) </span><br><span class="line">.termsOfServiceUrl(termsOfServiceUrl) </span><br><span class="line">.contact(<span class="keyword">new</span> Contact(<span class="string">"秦贺"</span>, <span class="string">""</span>, <span class="string">"qinhelili@gmail.com"</span>)) </span><br><span class="line">.version(version) </span><br><span class="line">.build(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function">UiConfiguration <span class="title">uiConfig</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UiConfiguration(<span class="keyword">null</span>, <span class="string">"list"</span>, <span class="string">"alpha"</span>, <span class="string">"schema"</span>, UiConfiguration.Constants.DEFAULT_SUBMIT_METHODS, <span class="keyword">false</span>, <span class="keyword">true</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改源代码的url： </p><p>Swagger2Controller.java:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.configers; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Optional; </span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Strings; </span><br><span class="line"><span class="keyword">import</span> io.swagger.models.Swagger; </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties; </span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment; </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus; </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity; </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller; </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*; </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponents; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.annotations.ApiIgnore; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Documentation; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.DocumentationCache; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.PropertySourcedMapping; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.json.Json; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.json.JsonSerializer; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket; </span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.mappers.ServiceModelToSwagger2Mapper; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.base.Strings.isNullOrEmpty; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.zhibi.xiuba.configers.HostNameProvider.componentsFrom; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.util.MimeTypeUtils.APPLICATION_JSON_VALUE; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="meta">@ApiIgnore</span> </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"xiuba.swagger"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Controller</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String <span class="keyword">module</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HAL_MEDIA_TYPE = <span class="string">"application/hal+json"</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String hostNameOverride; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DocumentationCache documentationCache; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServiceModelToSwagger2Mapper mapper; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> JsonSerializer jsonSerializer; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getModule</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">module</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModule</span><span class="params">(String <span class="keyword">module</span>)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Swagger2Controller</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">Environment environment, </span></span></span><br><span class="line"><span class="function"><span class="params">DocumentationCache documentationCache, </span></span></span><br><span class="line"><span class="function"><span class="params">ServiceModelToSwagger2Mapper mapper, </span></span></span><br><span class="line"><span class="function"><span class="params">JsonSerializer jsonSerializer)</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">this</span>.hostNameOverride = environment.getProperty(<span class="string">"springfox.documentation.swagger.v2.host"</span>, <span class="string">"DEFAULT"</span>); </span><br><span class="line"><span class="keyword">this</span>.documentationCache = documentationCache; </span><br><span class="line"><span class="keyword">this</span>.mapper = mapper; </span><br><span class="line"><span class="keyword">this</span>.jsonSerializer = jsonSerializer; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;module&#125;/v2/api-docs"</span>, method = RequestMethod.GET, produces = &#123;APPLICATION_JSON_VALUE, HAL_MEDIA_TYPE&#125;) </span><br><span class="line"><span class="meta">@PropertySourcedMapping</span>( </span><br><span class="line">value = <span class="string">"$&#123;springfox.documentation.swagger.v2.path&#125;"</span>, </span><br><span class="line">propertyKey = <span class="string">"springfox.documentation.swagger.v2.path"</span>) </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Json&gt; <span class="title">getDocumentation</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">@RequestParam(value = <span class="string">"group"</span>, required = <span class="keyword">false</span>)</span> String swaggerGroup, </span></span><br><span class="line"><span class="function">@<span class="title">PathVariable</span><span class="params">(value = <span class="string">"module"</span>, required = <span class="keyword">true</span>)</span> String <span class="keyword">module</span>, </span></span><br><span class="line"><span class="function">HttpServletRequest servletRequest) </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (org.apache.commons.lang3.StringUtils.isNotBlank(<span class="keyword">module</span>) &amp;&amp; <span class="keyword">module</span>.equalsIgnoreCase(<span class="keyword">this</span>.<span class="keyword">module</span>)) &#123; </span><br><span class="line">String groupName = Optional.fromNullable(swaggerGroup).or(Docket.DEFAULT_GROUP_NAME); </span><br><span class="line">Documentation documentation = documentationCache.documentationByGroup(groupName); </span><br><span class="line"><span class="keyword">if</span> (documentation == <span class="keyword">null</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Json&gt;(HttpStatus.NOT_FOUND); </span><br><span class="line">&#125; </span><br><span class="line">Swagger swagger = mapper.mapDocumentation(documentation); </span><br><span class="line">UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath()); </span><br><span class="line">swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? <span class="string">"/"</span> : uriComponents.getPath()); </span><br><span class="line"><span class="keyword">if</span> (isNullOrEmpty(swagger.getHost())) &#123; </span><br><span class="line">swagger.host(hostName(uriComponents)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Json&gt;(jsonSerializer.toJson(swagger), HttpStatus.OK); </span><br><span class="line">&#125;<span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Json&gt;(HttpStatus.NOT_FOUND); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">hostName</span><span class="params">(UriComponents uriComponents)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (<span class="string">"DEFAULT"</span>.equals(hostNameOverride)) &#123; </span><br><span class="line">String host = uriComponents.getHost(); </span><br><span class="line"><span class="keyword">int</span> port = uriComponents.getPort(); </span><br><span class="line"><span class="keyword">if</span> (port &gt; -<span class="number">1</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">"%s:%d"</span>, host, port); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> host; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> hostNameOverride; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HostNameProvider.java:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.configers; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest; </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.ServletUriComponentsBuilder; </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponents; </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponentsBuilder; </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UrlPathHelper; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.util.StringUtils.hasText; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromContextPath; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostNameProvider</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HostNameProvider</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> UriComponents <span class="title">componentsFrom</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">String basePath)</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">ServletUriComponentsBuilder builder = fromServletMapping(request, basePath); </span><br><span class="line"> </span><br><span class="line">UriComponents components = UriComponentsBuilder.fromHttpRequest( </span><br><span class="line"><span class="keyword">new</span> ServletServerHttpRequest(request)) </span><br><span class="line">.build(); </span><br><span class="line"> </span><br><span class="line">String host = components.getHost(); </span><br><span class="line"><span class="keyword">if</span> (!hasText(host)) &#123; </span><br><span class="line"><span class="keyword">return</span> builder.build(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">builder.host(host); </span><br><span class="line">builder.port(components.getPort()); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> builder.build(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ServletUriComponentsBuilder <span class="title">fromServletMapping</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">String basePath)</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">ServletUriComponentsBuilder builder = fromContextPath(request); </span><br><span class="line"> </span><br><span class="line">builder.replacePath(prependForwardedPrefix(request, basePath)); </span><br><span class="line"><span class="keyword">if</span> (hasText(<span class="keyword">new</span> UrlPathHelper().getPathWithinServletMapping(request))) &#123; </span><br><span class="line">builder.path(request.getServletPath()); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> builder; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">prependForwardedPrefix</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">String path)</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">String prefix = request.getHeader(<span class="string">"X-Forwarded-Prefix"</span>); </span><br><span class="line"><span class="keyword">if</span> (prefix != <span class="keyword">null</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> prefix + path; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">return</span> path; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>7、访问 </li></ul><p>访问api-gateway微服务的swagger-ui,通过此服务的ui间接访问其他服务的接口文档数据<br>http://{ip}:{port}/swagger-ui.html </p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1、项目结构：&lt;br&gt;涉及到的服务有：&lt;br&gt;api-gateway、userservice、taskservice，项目由Springboot-springcloud-jpa-fegin-consul-zuul构成微服务
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="swagger" scheme="http://yoursite.com/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>springboot配置文件 </title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/springboot配置文件/</id>
    <published>2018-08-01T07:04:07.086Z</published>
    <updated>2018-08-01T07:04:07.087Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1、Profile-多环境配置  </li></ul><p>&emsp;&emsp;当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为WARN或更高级别，并将日志写入日志文件，而开发的时候需要日志级别为DEBUG，日志输出到控制台即可。<br>如果按照以前的做法，就是每次发布的时候替换掉配置文件，这样太麻烦了，Spring Boot的Profile就给我们提供了解决方案，命令带上参数就搞定。 </p><p>这里我们来模拟一下，只是简单的修改端口来测试。<br>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如： </p><ul><li>application-dev.properties：开发环境 </li><li>application-prod.properties：生产环境 </li></ul><p>想要使用对应的环境，只需要在application.properties中使用spring.profiles.active属性来设置，值对应上面提到的{profile}，这里就是指dev、prod这2个。 </p><p>当然你也可以用命令行启动的时候带上参数： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java -jar xxx.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p>优先级：测试环境：（加参数dev）<br>Application.properties&gt;Application.yml&gt;bootstrap-dev.yml&gt;bootstrap.yml </p><p>不加参数的时候  dev配置文件就不会被扫描到   </p><ul><li><p>2、配置文件的引入</p><ul><li>@ComponentScan 表示扫描那个包下的bean到spring容器中，通常放在application.class上，在@SpringBootApplication里面集成了这个配置，通常这个类放在最外层，这个注解就保证了扫描里面所有包路径下的bean  </li><li>导入外部配置文件：<br>@PropertySource(value={“classpath:jdbc.properties”,””},ignoreResourceNotFound=true) </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1、Profile-多环境配置  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为WARN或更高级别，并将日志写入日志文件，而开发的时候需要日志级别
      
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="配置文件" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2018/08/01/java/springmvcAndSpringboot/线程池/</id>
    <published>2018-08-01T07:04:07.038Z</published>
    <updated>2018-08-01T07:04:07.039Z</updated>
    
    <content type="html"><![CDATA[<ul><li>线程池:  </li></ul><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">CommonTest</span></span>&#123; </span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;   </span><br><span class="line"><span class="keyword">try</span>&#123; </span><br><span class="line">ExecutorService executorService =Executors.newFixedThreadPool(<span class="number">100</span>); </span><br><span class="line">FutureTask&lt;String&gt; futureTask= <span class="keyword">new</span> FutureTask&lt;String&gt;(newCallable&lt;String&gt;()&#123; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function">Public String <span class="title">call</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123; </span><br><span class="line">thrownewException(<span class="string">"adasd"</span>); </span><br><span class="line">&#125;&#125;); </span><br><span class="line">executorService.execute(futureTask); </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>==<span class="number">1</span>)&#123; </span><br><span class="line">Boolean done= futureTask.isDone(); </span><br><span class="line"><span class="keyword">if</span>(done)&#123; </span><br><span class="line">System.out.println(futureTask.get()); </span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">System.out.println(<span class="string">"joijoi"</span>); </span><br><span class="line">&#125;&#125; </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exceptione)&#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;线程池:  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>方法参数列表</title>
    <link href="http://yoursite.com/2018/07/17/java/springmvcAndSpringboot/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/07/17/java/springmvcAndSpringboot/方法参数列表/</id>
    <published>2018-07-17T02:17:36.051Z</published>
    <updated>2018-07-17T02:17:36.052Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>1.普通方法参数<br>例如：<br>@RequestMapping(“/agreeOne”)<br>@RequiresPermissions(“withdraw:audit”)<br>@ResponseBody publicControllerResultagreeOne(Longid){ </p><blockquote><p>参数id可以不传值（可以没有这个参数{}，或者参数为空{id:null}，或者参数为空字符串id:””），方法还是会进行，当前段html或者ajax传值为””空字符串的时候，在java方法中id为null； </p></blockquote></li></ul><hr><ul><li><p>2.@RequestMapping(“/agreeOne”)<br>@RequiresPermissions(“withdraw:audit”)<br>@ResponseBody<br>Public ControllerResultagreeOne(@RequestParam Long id){ </p><blockquote><p>如果加了@RequestParam注解，则默认必须要传参，不然会报404。可以传{id:null}也可以传空字符串<br>data:{id:””}, 到了Java端参数都是null<br>但是 如果不传参数则会报404，例如：//data:{id:””},<br>或者 data:{} </p></blockquote></li></ul><hr><ul><li>3.如果变成1那种类型，则可以@RequestParam(required=false) 默认为true；和不加注解的情况一样。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.普通方法参数&lt;br&gt;例如：&lt;br&gt;@RequestMapping(“/agreeOne”)&lt;br&gt;@RequiresPermissions(“withdraw:audit”)&lt;br&gt;@ResponseBody publicControllerResul
      
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="参数" scheme="http://yoursite.com/tags/%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/13/nope/"/>
    <id>http://yoursite.com/2018/07/13/nope/</id>
    <published>2018-07-13T06:51:57.960Z</published>
    <updated>2018-07-13T06:51:57.962Z</updated>
    
    <content type="html"><![CDATA[<p>傻了吧唧，谢谢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;傻了吧唧，谢谢&lt;/p&gt;

      
    
    </summary>
    
      <category term="nope" scheme="http://yoursite.com/categories/nope/"/>
    
    
      <category term="nope" scheme="http://yoursite.com/tags/nope/"/>
    
  </entry>
  
</feed>
