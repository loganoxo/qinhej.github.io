<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦贺的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-17T10:33:19.541Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>QinHe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot+JPA+druid多数据源配置</title>
    <link href="http://yoursite.com/2018/08/17/java/springmvcAndSpringboot/springboot+JPA+druid%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/08/17/java/springmvcAndSpringboot/springboot+JPA+druid多数据源配置/</id>
    <published>2018-08-17T10:33:45.271Z</published>
    <updated>2018-08-17T10:33:19.541Z</updated>
    
    <content type="html"><![CDATA[<p>上次发了一篇mysql主从复制的博客，就我正在做的项目来讲，项目开始之初就是两个数据库服务器，一个master，一个slave，运维已经做好了主从复制的架构，但是基本上用的都是master数据库，从库基本都没怎么用。正好有一个关于统计的需求查询效率有点低，也比较频繁，就想着还不如查从库了。然后就去研究了一下springboot+JPA环境下的多数据源和读写分离。<br><a id="more"></a></p><p>一、首先要配置druid数据源<br>1、druid的某个配置很重要，因为数据库的每个连接是默认有一个8小时的超时时间的，如果过了8小时，连接会自动断掉，而druid此时还不知道连接已经断掉，也没有回收，一直用那个连接就会报错。此种情况一般出现于定时任务，比如某个统计需要每天统计一次，某个连接可能24小时才会使用一次，这时就会出现这个问题。<br>解决方案：<br>①、更改数据库默认的wait_outtime，改长一点，不推荐<br>②、可以从数据源入手，更改druid的配置，让druid每隔一段时间自动去检测连接池中每个连接是否可用，如果不可用则回收。后面需要连接时，会重新开启一个连接。这个时间间隔需要小于数据库的超时时间才对。</p><p>2、druid配置和jpa配置</p><p>①、主库配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># JDBC配置</span><br><span class="line">spring.datasource.druid.url= jdbc:mysql://10.10.10.105:23306/xiuba_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=round&amp;autoReconnect=true&amp;useSSL=false</span><br><span class="line">spring.datasource.druid.username= xiuba</span><br><span class="line">spring.datasource.druid.driver-class-name= com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.druid.password= xiuba123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 连接池配置，说明请参考Druid Wiki，DruidDataSource配置属性列表</span><br><span class="line">spring.datasource.druid.initial-size=3</span><br><span class="line">spring.datasource.druid.max-active=20</span><br><span class="line">spring.datasource.druid.min-idle=3</span><br><span class="line">spring.datasource.druid.max-wait=60000</span><br><span class="line"></span><br><span class="line">spring.datasource.druid.time-between-eviction-runs-millis=50000</span><br><span class="line">spring.datasource.druid.min-evictable-idle-time-millis=80000</span><br><span class="line">spring.datasource.druid.max-evictable-idle-time-millis=100000</span><br><span class="line"></span><br><span class="line">spring.datasource.druid.validation-query=select &apos;x&apos;</span><br><span class="line">spring.datasource.druid.validation-query-timeout=10</span><br><span class="line">spring.datasource.druid.test-on-borrow=false</span><br><span class="line">spring.datasource.druid.test-on-return=false</span><br><span class="line">spring.datasource.druid.test-while-idle=true</span><br><span class="line">#默认值stat，配置多个英文逗号分隔</span><br><span class="line">spring.datasource.druid.filters= stat,wall,slf4j</span><br><span class="line"></span><br><span class="line"># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span><br><span class="line">spring.datasource.druid.web-stat-filter.enabled=true</span><br><span class="line">spring.datasource.druid.web-stat-filter.urlPattern=/*</span><br><span class="line">spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span><br><span class="line">spring.datasource.druid.web-stat-filter.sessionStatMaxCount=600</span><br><span class="line">spring.datasource.druid.web-stat-filter.sessionStatEnable=true</span><br><span class="line">#spring.datasource.druid.web-stat-filter.principalSessionName=</span><br><span class="line">#spring.datasource.druid.web-stat-filter.principalCookieName=</span><br><span class="line">spring.datasource.druid.web-stat-filter.profileEnable=true</span><br><span class="line"></span><br><span class="line"># StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span><br><span class="line">spring.datasource.druid.stat-view-servlet.enabled=true</span><br><span class="line">spring.datasource.druid.stat-view-servlet.urlPattern=/druid/*</span><br><span class="line">spring.datasource.druid.stat-view-servlet.resetEnable=true</span><br><span class="line">spring.datasource.druid.stat-view-servlet.loginUsername=druid</span><br><span class="line">spring.datasource.druid.stat-view-servlet.loginPassword=123456</span><br><span class="line">#spring.datasource.druid.stat-view-servlet.allow=</span><br><span class="line">#spring.datasource.druid.stat-view-servlet.deny=</span><br></pre></td></tr></table></figure><p>②、从库配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#从库配置</span><br><span class="line"># JDBC配置</span><br><span class="line">spring.datasource.druid.slave.url= jdbc:mysql://10.10.10.104:23306/xiuba_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=round&amp;autoReconnect=true&amp;useSSL=false</span><br><span class="line">spring.datasource.druid.slave.username=xiuba_select</span><br><span class="line">spring.datasource.druid.slave.driver-class-name= com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.druid.slave.password=xiuba123456</span><br><span class="line"></span><br><span class="line"># 连接池配置，说明请参考Druid Wiki，DruidDataSource配置属性列表</span><br><span class="line">spring.datasource.druid.slave.initial-size=3</span><br><span class="line">spring.datasource.druid.slave.max-active=20</span><br><span class="line">spring.datasource.druid.slave.min-idle=3</span><br><span class="line">spring.datasource.druid.slave.max-wait=60000</span><br><span class="line"></span><br><span class="line">spring.datasource.druid.slave.time-between-eviction-runs-millis=50000</span><br><span class="line">spring.datasource.druid.slave.min-evictable-idle-time-millis=80000</span><br><span class="line">spring.datasource.druid.slave.max-evictable-idle-time-millis=100000</span><br><span class="line"></span><br><span class="line">spring.datasource.druid.slave.validation-query=select &apos;x&apos;</span><br><span class="line">spring.datasource.druid.slave.validation-query-timeout=10</span><br><span class="line">spring.datasource.druid.slave.test-on-borrow=false</span><br><span class="line">spring.datasource.druid.slave.test-on-return=false</span><br><span class="line">spring.datasource.druid.slave.test-while-idle=true</span><br><span class="line">#默认值stat，配置多个英文逗号分隔</span><br><span class="line">spring.datasource.druid.slave.filters= stat,wall,slf4j</span><br></pre></td></tr></table></figure><p>③、JPA配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto= update</span><br><span class="line">spring.jpa.open-in-view=true</span><br><span class="line">spring.jpa.properties.hibernate.show_sql=false</span><br><span class="line">spring.jpa.properties.hibernate.format_sql=false</span><br></pre></td></tr></table></figure><p>注意：<br>①： 因为jpa或者说hibernate是orm框架，有一个自动更新数据库的配置，可以使数据库根据项目中的实体类自动生成相应的表结构，非常方便好用。但是这也引来了一些问题，如果从库也应用这个配置，就会更改从库的表结构，而从库只要自己发生变化而不是主库复制来的，就会发生mysql错误，使主从复制停止，造成重大错误。所以此时jpa的配置应该主从分离，此操作实现在EntityManager生成配置类中。<br>②：为了避免上述情况在我们不经意间发生，最好给从库配置一个只能读不能写的权限的用户，我们所有操作都用这个用户来执行，避免人为错误。</p><p>二、数据源生成类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.config.data;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by QinHe on 2018-07-24.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class DruidDataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 主DataSource 配置</span><br><span class="line">     */</span><br><span class="line">    @Primary</span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)</span><br><span class="line">    @Bean(name = &quot;primaryDruidDataSource&quot;)</span><br><span class="line">    public DataSource primaryDruidDataSource(Environment environment) &#123;</span><br><span class="line">        return DruidDataSourceBuilder.create().build(environment, &quot;spring.datasource.druid.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从DataSource 配置</span><br><span class="line">     */</span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource.druid.slave&quot;)</span><br><span class="line">    @Bean(name = &quot;slaveDruidDataSource&quot;)</span><br><span class="line">    public DataSource slaveDruidDataSource(Environment environment) &#123;</span><br><span class="line">        return DruidDataSourceBuilder.create().build(environment, &quot;spring.datasource.druid.slave.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、EntityManager生成类</p><p>与jpa结合起来：</p><p>1、主库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.config.data;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line">import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line">import org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line">import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line">import org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import javax.persistence.EntityManager;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by QinHe on 2018-07-24.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@EnableJpaRepositories(</span><br><span class="line">        entityManagerFactoryRef = &quot;entityManagerFactoryPrimary&quot;,</span><br><span class="line">        transactionManagerRef = &quot;transactionManagerPrimary&quot;,</span><br><span class="line">        basePackages = &#123;&quot;com.zhibi.xiuba.repository.primary&quot;&#125;) //设置Repository所在位置</span><br><span class="line">public class PrimaryConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name = &quot;primaryDruidDataSource&quot;)</span><br><span class="line">    private DataSource primaryDruidDataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    @Primary</span><br><span class="line">    @Bean(name = &quot;entityManagerFactoryPrimary&quot;)</span><br><span class="line">    public LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary(EntityManagerFactoryBuilder builder) &#123;</span><br><span class="line">        return builder</span><br><span class="line">                .dataSource(primaryDruidDataSource)</span><br><span class="line">                .properties(getVendorProperties(primaryDruidDataSource))</span><br><span class="line">                .packages(&quot;com.zhibi.xiuba&quot;) //设置实体类所在位置</span><br><span class="line">                .persistenceUnit(&quot;primaryPersistenceUnit&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Primary</span><br><span class="line">    @Bean(name = &quot;entityManagerPrimary&quot;)</span><br><span class="line">    public EntityManager entityManagerPrimary(EntityManagerFactoryBuilder builder) &#123;</span><br><span class="line">        return entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, String&gt; getVendorProperties(DataSource dataSource) &#123;</span><br><span class="line">        return jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Primary</span><br><span class="line">    @Bean(name = &quot;transactionManagerPrimary&quot;)</span><br><span class="line">    public PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) &#123;</span><br><span class="line">        return new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、从库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.config.data;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line">import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line">import org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line">import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line">import org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import javax.persistence.EntityManager;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by QinHe on 2018-07-24.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@EnableJpaRepositories(</span><br><span class="line">        entityManagerFactoryRef = &quot;entityManagerFactorySlave&quot;,</span><br><span class="line">        transactionManagerRef = &quot;transactionManagerSlave&quot;,</span><br><span class="line">        basePackages = &#123;&quot;com.zhibi.xiuba.repository.slave&quot;&#125;) //设置Repository所在位置</span><br><span class="line">public class SlaveConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name = &quot;slaveDruidDataSource&quot;)</span><br><span class="line">    private DataSource slaveDruidDataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;entityManagerFactorySlave&quot;)</span><br><span class="line">    public LocalContainerEntityManagerFactoryBean entityManagerFactorySlave(EntityManagerFactoryBuilder builder) &#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean slavePersistenceUnit = builder</span><br><span class="line">                .dataSource(slaveDruidDataSource)</span><br><span class="line">                .properties(getVendorProperties(slaveDruidDataSource))</span><br><span class="line">                .packages(&quot;com.zhibi.xiuba&quot;) //设置实体类所在位置</span><br><span class="line">                .persistenceUnit(&quot;slavePersistenceUnit&quot;)</span><br><span class="line">                .build();</span><br><span class="line">        slavePersistenceUnit.getJpaPropertyMap().remove(&quot;hibernate.hbm2ddl.auto&quot;);</span><br><span class="line">        return slavePersistenceUnit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;entityManagerSlave&quot;)</span><br><span class="line">    public EntityManager entityManagerSlave(EntityManagerFactoryBuilder builder) &#123;</span><br><span class="line">        return entityManagerFactorySlave(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, String&gt; getVendorProperties(DataSource dataSource) &#123;</span><br><span class="line">        return jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;transactionManagerSlave&quot;)</span><br><span class="line">    public PlatformTransactionManager transactionManagerSlave(EntityManagerFactoryBuilder builder) &#123;</span><br><span class="line">        return new JpaTransactionManager(entityManagerFactorySlave(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次发了一篇mysql主从复制的博客，就我正在做的项目来讲，项目开始之初就是两个数据库服务器，一个master，一个slave，运维已经做好了主从复制的架构，但是基本上用的都是master数据库，从库基本都没怎么用。正好有一个关于统计的需求查询效率有点低，也比较频繁，就想着还不如查从库了。然后就去研究了一下springboot+JPA环境下的多数据源和读写分离。&lt;br&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="多数据源配置" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    
      <category term="druid" scheme="http://yoursite.com/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制</title>
    <link href="http://yoursite.com/2018/08/17/java/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2018/08/17/java/数据库/MySQL主从复制/</id>
    <published>2018-08-17T09:48:03.444Z</published>
    <updated>2018-08-17T09:47:45.002Z</updated>
    
    <content type="html"><![CDATA[<p>MYSQL主从同步是目前使用比较广泛的数据库架构，技术比较成熟，配置也不复杂，特别是对于负载比较大的网站，主从同步能够有效缓解数据库读写的压力。<br><a id="more"></a><br>一、MySQL主从同步的机制<br>MySQL数据库自身提供的主从复制功能可以方便的实现数据的多处自动备份，实现数据库的拓展。多个数据备份不仅可以加强数据的安全性，通过实现读写分离还能进一步提升数据库的负载性能。</p><p>MYSQL主从同步是在MySQL主从复制(Master-Slave Replication)基础上实现的，通过设置在Master MySQL上的binlog(使其处于打开状态)，Slave MySQL上通过一个I/O线程从Master MySQL上读取binlog，然后传输到Slave MySQL的中继日志中，然后Slave MySQL的SQL线程从中继日志中读取中继日志，然后应用到Slave MySQL的数据库中。这样实现了主从数据同步功能。</p><p><img src="https://img-blog.csdn.net/20180817173154936?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>在一主多从的数据库体系中，多个从服务器采用异步的方式更新主数据库的变化，业务服务器在执行写或者相关修改数据库的操作是在主服务器上进行的，读操作则是在各从服务器上进行。如果配置了多个从服务器或者多个主服务器又涉及到相应的负载均衡问题，关于负载均衡具体的技术细节还没有研究过，今天就先简单的实现一主一从的主从复制功能。</p><p>Mysql主从复制的实现原理图大致如下：<br><img src="https://img-blog.csdn.net/20180817173507630?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>MySQL之间数据复制的基础是二进制日志文件（binary log file）。一台MySQL数据库一旦启用二进制日志后，其作为master，它的数据库中所有操作都会以“事件”的方式记录在二进制日志中，其他数据库作为slave通过一个I/O线程与主服务器保持通信，并监控master的二进制日志文件的变化，如果发现master二进制日志文件发生变化，则会把变化复制到自己的中继日志中，然后slave的一个SQL线程会把相关的“事件”执行到自己的数据库中，以此实现从数据库和主数据库的一致性，也就实现了主从复制。</p><p>二、实现MySQL主从复制需要进行的配置：</p><ul><li>主服务器：<br>开启二进制日志<br>配置唯一的server-id<br>获得master二进制日志文件名及位置<br>创建一个用于slave和master通信的用户账号</li><li>从服务器：<br>配置唯一的server-id<br>使用master分配的用户账号读取master二进制日志<br>启用slave服务<br>具体实现过程如下：</li></ul><p>1、准备操作<br>①、主从数据库版本一致，建议版本5.5以上<br>②、主从数据库数据一致</p><p>2、主数据库master修改</p><p>①、修改MySQL配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 日志文件名</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line"> </span><br><span class="line"># 主数据库端ID号</span><br><span class="line">server-id = 1</span><br></pre></td></tr></table></figure><p>②、重启mysql，创建用于同步的账户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建slave帐号slave_account，密码123456</span><br><span class="line">mysql&gt;grant replication slave on *.* to &apos;slave_account&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class="line"> </span><br><span class="line"># 更新数据库权限</span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><p>③、查询master的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000009 |      196 |              |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><p> 注：执行完这个步骤后不要再操作主数据库了，防止主数据库状态值变化</p><p>3、从数据库slave修改</p><p>①、修改MySQL配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从数据库端ID号</span><br><span class="line">server-id =2</span><br></pre></td></tr></table></figure><p>②、执行同步命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 执行同步命令，设置主数据库ip，同步帐号密码，同步位置</span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.1.2&apos;,master_user=&apos;slave_account&apos;,master_password=&apos;123456&apos;,master_log_file=&apos;mysql-bin.000009&apos;,master_log_pos=196;</span><br><span class="line"> </span><br><span class="line"># 开启同步功能</span><br><span class="line">mysql&gt;start slave;</span><br></pre></td></tr></table></figure><p>③、检查从数据库状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.1.2</span><br><span class="line">                  Master_User: slave_account</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000009</span><br><span class="line">          Read_Master_Log_Pos: 196</span><br><span class="line">               Relay_Log_File: vicky-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 253</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000009</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><p>注：Slave_IO_Running及Slave_SQL_Running进程必须正常运行，即YES状态，否则说明同步失败。<br>到这里，主从数据库设置工作已经完成，自己可以新建数据库和表，插入和修改数据，测试一下是否成功</p><p>4、其他可能用到的相关参数</p><p>①、master端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 不同步哪些数据库</span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line">binlog-ignore-db = test</span><br><span class="line">binlog-ignore-db = information_schema</span><br><span class="line"> </span><br><span class="line"># 只同步哪些数据库，除此之外，其他不同步</span><br><span class="line">binlog-do-db = game</span><br><span class="line"> </span><br><span class="line"># 日志保留时间</span><br><span class="line">expire_logs_days = 10</span><br><span class="line"> </span><br><span class="line"># 控制binlog的写入频率。每执行多少次事务写入一次</span><br><span class="line"># 这个参数性能消耗很大，但可减小MySQL崩溃造成的损失</span><br><span class="line">sync_binlog = 5</span><br><span class="line"> </span><br><span class="line"># 日志格式，建议mixed</span><br><span class="line"># statement 保存SQL语句</span><br><span class="line"># row 保存影响记录数据</span><br><span class="line"># mixed 前面两种的结合</span><br><span class="line">binlog_format = mixed</span><br></pre></td></tr></table></figure><p>②、slave端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 停止主从同步</span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line"> </span><br><span class="line"># 连接断开时，重新连接超时时间</span><br><span class="line">mysql&gt; change master to master_connect_retry=50;</span><br><span class="line"> </span><br><span class="line"># 开启主从同步</span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>以上连接超时设置，类似方式可用于设置主数据库ip，同步帐号密码，同步位置</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MYSQL主从同步是目前使用比较广泛的数据库架构，技术比较成熟，配置也不复杂，特别是对于负载比较大的网站，主从同步能够有效缓解数据库读写的压力。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="主从复制" scheme="http://yoursite.com/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab-Jekins-SpringBoot 可持续化集成系统</title>
    <link href="http://yoursite.com/2018/08/16/java/javaweb%E6%8A%80%E6%9C%AF/Gitlab-Jekins-SpringBoot%20%E5%8F%AF%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/08/16/java/javaweb技术/Gitlab-Jekins-SpringBoot 可持续化集成系统/</id>
    <published>2018-08-16T13:57:47.459Z</published>
    <updated>2018-08-16T13:57:47.461Z</updated>
    
    <content type="html"><![CDATA[<p>一、docker 安装nginx<br> <a id="more"></a></p><ul><li>1、mkdir -p /usr/local/nginx/www /usr/local/nginx/logs /usr/local/nginx/conf<br>  www目录将映射为nginx容器配置的虚拟目录<br>  logs目录将映射为nginx容器的日志目录<br>  conf目录里的配置文件将映射为nginx容器的配置文件<br>  要先创建一个nginx.conf文件 </li><li>2、docker pull nginx     </li><li>3、运行 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name mynginx -v /usr/local/nginx/www:/www -v /usr/local/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /usr/local/nginx/logs:/wwwlogs -itd nginx /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-p 80:80：将容器的80端口映射到主机的80端口 </span><br><span class="line">--name mynginx：将容器命名为mynginx </span><br><span class="line">-v $PWD/www:/www：将主机中当前目录下的www挂载到容器的/www </span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf </span><br><span class="line">-v $PWD/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs</span><br></pre></td></tr></table></figure><p>判断是否正确： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 31  /bin/bash </span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/2018081517560982?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>说明配置有问题<br>exit </p><ul><li>4、修改配置文件 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">   # include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  my.gitlab.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">               proxy_pass http://192.168.0.102:8010;</span><br><span class="line">               proxy_set_header Host  $host;</span><br><span class="line">               proxy_set_header X-Forwarded-For  $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name  my.jenkins.com;</span><br><span class="line"></span><br><span class="line">        location ~/ &#123;</span><br><span class="line">               proxy_pass http://192.168.0.102:8011;</span><br><span class="line">               proxy_set_header Host  $host;</span><br><span class="line">               proxy_set_header X-Forwarded-For  $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  my.nginx.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>5、防火墙</p><blockquote><p>通过systemctl status firewalld查看firewalld状态，发现当前是dead状态，即防火墙未开启。<br>  通过systemctl start firewalld开启防火墙，没有任何提示即开启成功。<br>  再次通过systemctl status firewalld查看firewalld状态，显示running即已开启了。<br>  如果要关闭防火墙设置，可能通过systemctl stop firewalld这条指令来关闭该功能。<br>  再次执行执行firewall-cmd –permanent –zone=public –add-port=80/tcp，提示success，表示设置成功，这样就可以继续后面的设置了。firewall-cmd –permanent –zone=public –add-port=8010/tcp<br>  systemctl restart firewalld<br>  查看已经开放的端口：<br>  firewall-cmd –list-ports</p></blockquote></li><li><p>6、重新配置</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 31  /bin/bash </span><br><span class="line">nginx -t </span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180815175838278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180815180627425?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">    </p><p>二、最好还是本机装nginx</p><ul><li>1、安装位置：/usr/local/webserver/nginx</li><li>2、安装文件下载位置/usr/local</li><li><p>3、安装编译工具及库文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>4、首先要安装 PCRE<br>  PCRE 作用是让 Nginx 支持 Rewrite 功能。<br>  下载 PCRE 安装包，下载地址： <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</span><br><span class="line">[root@bogon src]# tar zxvf pcre-8.35.tar.gz</span><br><span class="line">[root@bogon src]# cd pcre-8.35</span><br><span class="line">[root@bogon pcre-8.35]# ./configure</span><br><span class="line">[root@bogon pcre-8.35]# make &amp;&amp; make install</span><br><span class="line">[root@bogon pcre-8.35]# pcre-config --version</span><br></pre></td></tr></table></figure><p>5、安装 Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon src]# wget http://nginx.org/download/nginx-1.9.0.tar.gz</span><br><span class="line">[root@bogon src]# tar zxvf nginx-1.9.0.tar.gz</span><br><span class="line">[root@bogon src]# cd nginx-1.9.0</span><br><span class="line">[root@bogon nginx-1.9.0]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/pcre-8.35</span><br><span class="line">[root@bogon nginx-1.9.0]# make</span><br><span class="line">[root@bogon nginx-1.9.0]# make install</span><br></pre></td></tr></table></figure><p>6、将nginx永久加入到系统环境变量<br>    cd /etc<br>    vi profile<br>    加入下面两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NGINX_HOME=/usr/local/webserver/nginx</span><br><span class="line">export PATH=$PATH:$NGINX_HOME/sbin</span><br></pre></td></tr></table></figure><p>保存<br>    执行 source /etc/profile 使配置文件生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon nginx-1.6.2]# nginx -v</span><br></pre></td></tr></table></figure></p><p>7、修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br><span class="line"></span><br><span class="line">worker_processes 1; #设置值和CPU核心数一致</span><br><span class="line">error_log /usr/local/webserver/nginx/logs/nginx_error.log warn; #日志位置和日志级别</span><br><span class="line">pid /usr/local/webserver/nginx/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">   # include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  my.gitlab.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">               proxy_pass http://127.0.0.1:8010;</span><br><span class="line">               proxy_set_header Host  $host;</span><br><span class="line">               proxy_set_header X-Forwarded-For  $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name  my.jenkins.com;</span><br><span class="line"></span><br><span class="line">        location ~/ &#123;</span><br><span class="line">               proxy_pass http://127.0.0.1:8011;</span><br><span class="line">               proxy_set_header Host  $host;</span><br><span class="line">               proxy_set_header X-Forwarded-For  $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  my.nginx.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/local/webserver/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# nginx -c /usr/local/webserver/nginx/conf/nginx.conf</span><br><span class="line">[root@localhost conf]# nginx -s reload</span><br></pre></td></tr></table></figure><p>三、gitlab</p><ul><li><p>1、service docker status </p></li><li><p>2、安装镜像<br>docker pull gitlab/gitlab-ce </p></li></ul><ul><li><p>3、docker images </p></li><li><p>4、运行 </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach  --hostname my.gitlab.com  --publish 443:443 --publish 8010:8010  --name gitlab  --restart always  --volume /srv/gitlab/config:/etc/gitlab:Z  --volume /srv/gitlab/logs:/var/log/gitlab:Z --volume /srv/gitlab/data:/var/opt/gitlab:Z  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--detach：-d 指定容器运行于前台还是后台 </span><br><span class="line"></span><br><span class="line">-h, --hostname=&quot;&quot;          指定容器的主机名 </span><br><span class="line"></span><br><span class="line">--name=&quot;&quot;                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字   </span><br><span class="line"></span><br><span class="line">--restart=&quot;&quot;               指定容器停止后的重启策略，待详述  no：容器退出时不重启  on-failure：容器故障退出（返回值非零）时重启  always：容器退出时总是重启  </span><br><span class="line">  </span><br><span class="line">--volume 将主机的文件或文件夹作为volume挂载时，可以用多个 -v标签为容器添加多个volume，还可以使用:ro指定该volume为只读。 -v /host-path:/container-path </span><br><span class="line">:Z 这个字符最关键，可以解决挂载目录时的权限问题</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180815183051739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>四、jenkins</p><ul><li>1、安装目录<br>  /usr/local/webserver/jenkins<br>  mkdir -r /usr/local/webserver/jenkins/<br>  sudo chown -R 1000 /usr/local/webserver/</li><li><p>2、安装镜像<br>docker pull jenkins</p></li><li><p>3、docker images </p></li><li><p>4、运行<br>docker run  –detach –restart=always -p 8011:8080 -p 50000:50000 -v /usr/local/webserver/jenkins/home:/var/jenkins_home:Z jenkins:latest</p></li></ul><p><img src="https://img-blog.csdn.net/20180815183122266?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、docker 安装nginx&lt;br&gt;
    
    </summary>
    
      <category term="javaweb技术" scheme="http://yoursite.com/categories/javaweb%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Jekins" scheme="http://yoursite.com/tags/Jekins/"/>
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装</title>
    <link href="http://yoursite.com/2018/08/16/java/javaweb%E6%8A%80%E6%9C%AF/mysql%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/08/16/java/javaweb技术/mysql安装/</id>
    <published>2018-08-16T13:57:34.809Z</published>
    <updated>2018-08-16T13:57:34.812Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1、Linux平台上推荐使用RPM包来安装Mysql,MySQL AB提供了以下RPM包的下载地址：<a id="more"></a><blockquote><p>MySQL - MySQL服务器。你需要该选项，除非你只想连接运行在另一台机器上的MySQL服务器。<br>MySQL-client - MySQL 客户端程序，用于连接并操作Mysql服务器。<br>MySQL-devel - 库和包含文件，如果你想要编译其它MySQL客户端，例如Perl模块，则需要安装该RPM包。<br>MySQL-shared - 该软件包包含某些语言和应用程序需要动态装载的共享库(libmysqlclient.so*)，使用MySQL。<br>MySQL-bench - MySQL数据库服务器的基准和性能测试工具。<br>安装前，我们可以检测系统是否自带安装 MySQL:<br>rpm -qa | grep mysql<br>如果你系统有安装，那可以选择进行卸载:<br>rpm -e mysql　　// 普通删除模式<br>rpm -e –nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</p></blockquote></li></ul><ul><li>2、安装 MySQL：</li></ul><p>接下来我们在 Centos7 系统下使用 yum 命令安装 MySQL，需要注意的是 CentOS 7 版本中 MySQL数据库已从默认的程序列表中移除，所以在安装前我们需要先去官网下载 Yum 资源包，下载地址为：<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">yum install mysql-server</span><br><span class="line"></span><br><span class="line">启动 MySQL：</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">查看 MySQL 运行状态：</span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line">开机启动</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>3、修改root本地登录密码<br>  mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：<br>grep ‘temporary password’ /var/log/mysqld.log<br><img src="https://img-blog.csdn.net/20180815183726617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">    </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 </span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">修改密码强度限制：</span><br><span class="line">set global validate_password_policy=0; </span><br><span class="line">set global validate_password_length=3;</span><br><span class="line"></span><br><span class="line">修改密码：</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;123456&apos;);</span><br></pre></td></tr></table></figure><ul><li>4、添加远程登录用户<br>  默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on 库名.表名 to &apos;用户名&apos;@&apos;IP地址&apos; identified by &apos;密码&apos; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><ul><li>5、配置默认编码为utf8<br>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&apos;SET NAMES utf8&apos;</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>默认配置文件路径：<br>配置文件：/etc/my.cnf<br>日志文件：/var/log//var/log/mysqld.log<br>服务启动脚本：/usr/lib/systemd/system/mysqld.service<br>socket文件：/var/run/mysqld/mysqld.pid</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1、Linux平台上推荐使用RPM包来安装Mysql,MySQL AB提供了以下RPM包的下载地址：
    
    </summary>
    
      <category term="javaweb技术" scheme="http://yoursite.com/categories/javaweb%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>小程序</title>
    <link href="http://yoursite.com/2018/08/16/java/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/08/16/java/互联网技术/小程序/</id>
    <published>2018-08-16T13:57:14.929Z</published>
    <updated>2018-08-16T13:57:14.931Z</updated>
    
    <content type="html"><![CDATA[<p>一、准备工作：<br>    1、微信工具的安装<br>    2、css3 js htlm<br>  <a id="more"></a><br>二、helloWorld </p><p>项目结构：是由一个应用实例 和 多个页面组成<br>应用实例：app.js \ app.wxss \app.json </p><p>1、页面结构：<br>一个页面是由多个文件组成的 一个文件夹是一个页面 里面有多个文件<br>js：定义页面的逻辑<br>json：页面配置            (可有可无)<br>wxss：页面样式            css语法 == wei xin style sheet<br>wxml：页面结构            语法是xml语法 不是html 一个标签必须有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure><p> 有很多页面组件标签 看文档<br>wei xin markup language </p><p>2、小程序的逻辑写在哪里<br>写在js文件里<br>获取一个api的数据  不要使用ajax，因为ajax是bom，小程序可能不在浏览器中运行，所以要使用微信的api </p><p>3、小程序的界面如何开发 </p><p>·样式写在wxss文件里面<br>例如：<br>text { </p><p>color: #ff0;<br>background-color: #000; </p><p>} </p><p>框架：<br><a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="noopener">https://tencent.github.io/wepy/document.html#/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、准备工作：&lt;br&gt;    1、微信工具的安装&lt;br&gt;    2、css3 js htlm&lt;br&gt;
    
    </summary>
    
      <category term="互联网技术" scheme="http://yoursite.com/categories/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据库高级-锁</title>
    <link href="http://yoursite.com/2018/08/16/java/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7-%E9%94%81/"/>
    <id>http://yoursite.com/2018/08/16/java/数据库/数据库高级-锁/</id>
    <published>2018-08-16T13:57:05.992Z</published>
    <updated>2018-08-16T13:57:05.994Z</updated>
    
    <content type="html"><![CDATA[<p>1、没有索引的情况下：</p><p>情况一：两个事务，A、B<br>第一步：A去更新某一行的时候，若果where后面的字段是非索引的，会把表里每一行加上u锁（更新锁）<br>第二步：将那一行的u锁变为x锁（排它锁），若未提交，x锁继续保留，<br>第三步：把其他的u锁释放掉<br><a id="more"></a><br>如果A事务未提交，B事务去更新另一行，则需要获得到A事务更新的那一行的u型锁，但是这一行已经被A事务用排它锁锁住了，所以需要等待X锁的释放。</p><p>情况2：两个事务，A、B</p><p>A：对表进行扫描依此对每行记录下U锁，若满足条件则转换为X锁更新，若不满足条件则释放U锁。更新完成后，若未提交则X锁继续保留。</p><p>B：对表进行扫描依此对每行记录下U锁，因为需要update的条件在此时前被发现加上X锁，但是扫描到查询1锁添加的X锁后无法添加U锁导致需要等待A事务完成后才能继续提交。这时A事务的第二个update语句开始运行，更新U锁时，发现B的X，要等待B的X锁释放同时达成死锁条件。</p><p>2、有索引的情况</p><p>mysql的事务支持与存储引擎有关，MyISAM不支持事务，INNODB支持事务，更新时采用的是行级锁。这里采用的是INNODB做存储引擎，意味着会将update语句做为一个事务来处理。<br>行级锁并不是直接锁记录，而是锁索引，如果一条SQL语句用到了主键索引，mysql会锁住主键索引；如果一条语句操作了非主键索引，mysql会先锁住非主键索引，再锁定主键索引。</p><p>事务1用到的 SQL 语句：<br>UPDATE authorized_user SET status = 1 WHERE username = ‘wcy’<br>事务1获取的锁：X lock on (669,13359,1176) index_username<br>事务1等待的锁：X lock on (669,937,136) PRIMARY</p><p>事务2用到的 SQL 语句：<br>UPDATE authorized_user SET username = ‘wcy100’ WHERE id = 1<br>事务2获取的锁：X lock on (669,937,136) PRIMARY<br>事务2等待的锁：X lock on (669,13359,1176) index_username</p><p>事务1的 update 语句正常的执行步骤如下：<br>1.由于用到了非聚簇索引，首先需要获取 index_username 上的行级锁。<br>2.紧接着根据主键进行更新，所以需要获取 PRIMAEY 上的行级锁。<br>3.更新完毕后，提交，并释放所有锁。</p><p>但是，如果在步骤1和2之间突然插入事务2的这条 SQL 语句：<br>UPDATE authorized_user SET username = ‘wcy100’ WHERE id = 1, 这条语句会先锁住聚簇索引，然后由于其更新的字段 username 有非聚簇索引，所以这条语句需要锁住 index_username。这条语句更新的字段 username 上有索引，在更新字段值之后需要更新索引，因此语句要在索引 index_username 上加锁。</p><p>3、<br>    name age<br>    aa    1<br>    bb    2</p><pre><code>事务A:    UPDATE `user` SET `age`=1 WHERE `name`=&apos;aa&apos;;事务B：    UPDATE `user` SET `name`=&apos;bb&apos; WHERE `age`=2 ;</code></pre><p>如果name和age都有索引，则没有冲突<br>如果name和age有一个不是索引，则需要等待</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、没有索引的情况下：&lt;/p&gt;
&lt;p&gt;情况一：两个事务，A、B&lt;br&gt;第一步：A去更新某一行的时候，若果where后面的字段是非索引的，会把表里每一行加上u锁（更新锁）&lt;br&gt;第二步：将那一行的u锁变为x锁（排它锁），若未提交，x锁继续保留，&lt;br&gt;第三步：把其他的u锁释放掉&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="锁" scheme="http://yoursite.com/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>事务的隔离级别</title>
    <link href="http://yoursite.com/2018/08/16/java/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/16/java/数据库/事务的隔离级别/</id>
    <published>2018-08-16T13:56:45.840Z</published>
    <updated>2018-08-16T13:56:45.843Z</updated>
    
    <content type="html"><![CDATA[<p>1、未提交读(Read uncommitted)<br>事务中的修改及时没提交也会被其他事务可见，这样会产生脏读，如果事务失败回滚，则其他事务之前的到的数据则是脏数据。从性能上讲，不会别别的事务提高太多，但是极其不安全。<br> <a id="more"></a><br>2、读提交(Read committed)<br>又可叫不可重复读，大多数数据库默认的隔离模式（MySQL不是）。在事务完成提交之前，其他事务看不到该事务的修改结果。执行两次同样的查询可能看到不一样的结果。 </p><p>3、重复读(Repeatable read)<br>事务A读取与搜索条件相匹配的若干行。事务B以插入或删除行等方式来修改事务A的结果集，然后再提交。事务A再读取时，却发现数据发生了变化。造成了幻读。（MySQL默认的隔离级别）——加了行锁 </p><p>4、序列化(Serializable)<br>Serializable是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读。 </p><p>RC和RR区别 </p><p>RC：某个A事务在读取数据的时候，读了第一次为a=1，另一个B事物改变了a的值，a=2，并提交事务，<br>这时A事务再次读取a的值，就为2了，造成了脏读。<br>RR：事务T1在读取R1和修改R2，（加了行锁，保证其他事物不能改变此行，但是可以增加或者删除行），此时T2不能够读取R2也不能修改R1，这样T2的操作就不会影响到T1的操作，去掉了脏读。但是，如果T1中含有一个统计某个范围内记录数量的操作，而T2在此时正好在此范围内插入了一条记录，则会草成T1的幻读，即第一次读此范围内一共2条数据，而在次读的时候却有了3条数据。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、未提交读(Read uncommitted)&lt;br&gt;事务中的修改及时没提交也会被其他事务可见，这样会产生脏读，如果事务失败回滚，则其他事务之前的到的数据则是脏数据。从性能上讲，不会别别的事务提高太多，但是极其不安全。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="隔离级别" scheme="http://yoursite.com/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>事务的传播</title>
    <link href="http://yoursite.com/2018/08/16/java/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD/"/>
    <id>http://yoursite.com/2018/08/16/java/数据库/事务的传播/</id>
    <published>2018-08-16T13:56:31.617Z</published>
    <updated>2018-08-16T13:56:31.618Z</updated>
    
    <content type="html"><![CDATA[<p>1、在一个A方法里面调用一个没有@transaction注解的B方法，那么B也在A的事务中，B会随着A结束而提交<br> <a id="more"></a></p><p>2、如果想让B方法自己是一个事务，则在B方法上加@transaction </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、在一个A方法里面调用一个没有@transaction注解的B方法，那么B也在A的事务中，B会随着A结束而提交&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="事务传播" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>路由器和交换机</title>
    <link href="http://yoursite.com/2018/08/16/java/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <id>http://yoursite.com/2018/08/16/java/互联网技术/路由器和交换机/</id>
    <published>2018-08-16T13:56:14.265Z</published>
    <updated>2018-08-16T13:56:14.267Z</updated>
    
    <content type="html"><![CDATA[<p>路由器和交换机的功能不同，路由器的作用是与外部通讯，交换机是提供内网通讯。<br>不是每个网络都需要路由器，相比交换机来说，路由器的用量很少，比如企业、学校、政府机关、医院。。。。等内部通讯，需要大量的接入设备，只需要交换机，在几千台电脑的单位里，至少需要几十上百台交换机进行网络接入，一台交换机可以接入几十台设备，而仅仅只需要一个路由器提供对外访问。<br>更大型的网络里，需要对内部网进行划分若干小内网，实现内部小网之间互相访问，可采用带路由功能的交换机，就是三层交换机，一般价格都比较昂贵。<br>路由器本来就有交换机的功能<br> <a id="more"></a></p><p>随着社会的发展，家庭需要用到网线的设备越来越多，例如电脑、电视、家庭影院、播放盒子、NAS网络存储等，为了让这些设备实现共同上网，路由器和交换机也慢慢的被更多人认知，但是由于家用路由器和交换机从外面看起来很像，很多人都不知道路由器和交换机的区别，以及各自又有什么作用。 </p><p>一、接口区别</p><p> <img src="https://img-blog.csdn.net/20180816100628210?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p> <img src="https://img-blog.csdn.net/2018081610063696?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>二、功能区别 </p><p><img src="https://img-blog.csdn.net/20180816100710266?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>三、价格区别<br>一般来讲，相同品牌，相同接口数量、相同级别情况下，路由器价格是交换机价格的两倍左右。<br>四、家庭什么情况下要用到这些设备？<br>1、简单上网需求<br>这是最简单的，也是大家最熟悉的，平时最多也就使用一两台电脑上网，手机能够接WIFI就行，对于这种需求，无需考虑太多，一个无线路由器就能搞定了。<br>2、复杂上网需求<br>比如：大户型结构的房子，一个无线路由无法覆盖所有面积；复杂上网需求，比如，需要用网络连接的设备过多，比如上面说到的电视、电脑、家庭影院、播放盒子、NAS网络存储等，同时又需要这些设备之间进行存储资源共享，就需要考虑同时使用无线路由器和交换机了。比如下面的情况： </p><p><img src="https://img-blog.csdn.net/20180816100735169?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>需要说明的是，这些复杂的需求，需要装修的时候就要充分考虑的，可以通过管线预埋的方式提前布局，这样的话，就不用使用太多的明线以至于影响美观了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路由器和交换机的功能不同，路由器的作用是与外部通讯，交换机是提供内网通讯。&lt;br&gt;不是每个网络都需要路由器，相比交换机来说，路由器的用量很少，比如企业、学校、政府机关、医院。。。。等内部通讯，需要大量的接入设备，只需要交换机，在几千台电脑的单位里，至少需要几十上百台交换机进行网络接入，一台交换机可以接入几十台设备，而仅仅只需要一个路由器提供对外访问。&lt;br&gt;更大型的网络里，需要对内部网进行划分若干小内网，实现内部小网之间互相访问，可采用带路由功能的交换机，就是三层交换机，一般价格都比较昂贵。&lt;br&gt;路由器本来就有交换机的功能&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="交换机" scheme="http://yoursite.com/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>三级分销</title>
    <link href="http://yoursite.com/2018/08/16/java/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/%E4%B8%89%E7%BA%A7%E5%88%86%E9%94%80/"/>
    <id>http://yoursite.com/2018/08/16/java/业务逻辑/三级分销/</id>
    <published>2018-08-16T13:55:54.994Z</published>
    <updated>2018-08-16T13:55:54.996Z</updated>
    
    <content type="html"><![CDATA[<p>通过“三级分销”的形式，形成拿手端的裂变，提高拿手注册转化的积极性！<br>一、业务模式<br>拿手端的“三级分销”，其基础业务模式参考商家端，通过邀请注册的形式，形成3级关系， <a id="more"></a>在关系网内的用户产生返利行为时，可以按照进行获得返利的业务模式。</p><ul><li><p>平台角色设定：<br>平台设定四个角色：“大师傅”、“师傅”、“徒弟”以及“徒孙”；<br>只有徒弟的人数累计满30人（即该用户的子集）才可获得“大师傅”资格；</p></li><li><p>返利类型<br>返利的类型分为两种，一种是注册返利，一种是完成活动返利；</p></li><li><p>触发返利的条件：<br>通过邀请链接注册成功即可触发注册返利；<br>由于拿手在平台上不产生消费行为，且可能存在中途放弃任务的行为，因此完成活动返利条件设定为商家通过该拿手的买家秀，向其返款时；</p></li><li><p>返利行为：<br>徒弟和徒孙都会向其上一级邀请人以及大师傅进行返利，比如徒孙会向徒弟返利，同时也会向大师傅返利；<br>徒弟在返利时，由于其上一级就是大师傅，因此徒弟会向大师傅返利2次；<br>徒孙是支持多层级的，如下图所示，徒孙B2可能存在徒孙2.1甚至徒孙n这样的多层级关系，因此徒孙在计算返利时，按照徒孙n-1（即该徒孙的上一次邀请人）以及大师傅进行返利；<br>在未成为大师傅之前，只能获得上一级的返利，大师傅返利无法获得；<br>用户成为大师傅后，其自身的活动行为不会对任何人产生返利行为；<br>返利来源与计算<br>拿手的返利来源建议全部由平台支出，商家端因为会员等级的不同，推广费、增值费等平台营收费用的收取规则也不一样，很难做到统一，因此拿手的返利来源建议统一由平台进行支出；<br>返利的金额按照固定金额的进行操作，同时该金额需要支持可配置，可以参考下方表格：</p><p>  |返利行为|对象与金额|<br>  | —— | —— |<br>  |注册返利|上一级（0.5）/大师傅（0.2）|<br>  |活动返利|上一级（1）/大师傅（0.5）|</p></li></ul><ul><li>关系脱离<br>当某个徒弟或者徒孙的下一级人数满30人时，该徒弟或徒孙则自动升级为大师傅，并自动从原有的体系中脱离（包括该用户下的所有子集），后续产生的返利行为也从原体系中脱离；</li></ul><p><img src="https://img-blog.csdn.net/20180816110115375?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>账单与交易记录<br>每个用户通过该体系收到的返利金额，沿用之前推广大师傅的设定，全部统一先到用户的推广金额里，然后统一提取到该用户的账户余额里；<br>提取账户余额的限制和之前保持一致，同样是5元起提；<br>系统账单同样沿用之前的设定，只有当用户将该金额提取到账户余额中时，才生成对应的账单记录；<br>用户获得的每一笔返利，系统都需要进行记录，包括返利的时间、金额、类型、返利的对象等；</li></ul><p>二、界面部分改动<br>拿手端只增加手机端，PC端暂不操作，主要调整页面为推广大师傅主界面和查看详情页，设计稿待调整，原型如下。</p><p><img src="https://img-blog.csdn.net/20180816110150991?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180816110209671?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>三、系统设计：</p><ul><li>实体类设计：</li></ul><p>1、邀请关系表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.user.spi.model;</span><br><span class="line"></span><br><span class="line">import com.zhibi.xiuba.domain.BaseDomain;</span><br><span class="line">import com.zhibi.xiuba.model.BaseEnum;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Created by qinhe_admin on 2017/9/25.</span><br><span class="line">*/</span><br><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;xb_us_showker_invitation&quot;, indexes = &#123;@Index(name = &quot;father_distance&quot;, columnList = &quot;father_id,distance&quot;, unique = true)&#125;)</span><br><span class="line">public class ShowkerInvitation extends BaseDomain &#123;</span><br><span class="line">   private static final long serialVersionUID = 7228910123994809290L;</span><br><span class="line">   @Id</span><br><span class="line">   @GeneratedValue(generator = &quot;id_generator&quot;)</span><br><span class="line">   @GenericGenerator(name = &quot;id_generator&quot;, strategy = &quot;redis_id&quot;)</span><br><span class="line">   private Long id;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 被邀请人ID</span><br><span class="line">    */</span><br><span class="line">   @Column(unique = true)</span><br><span class="line">   private Long userId;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 邀请人ID</span><br><span class="line">    */</span><br><span class="line">   @Column(name = &quot;father_id&quot;)</span><br><span class="line">   private Long fatherId;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 祖先（子孙满30个的祖先）</span><br><span class="line">    */</span><br><span class="line">   private Long forefatherId;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 与祖先差了多少个层级，最小是1</span><br><span class="line">    */</span><br><span class="line">   @Column(name = &quot;distance&quot;)</span><br><span class="line">   private Integer distance;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">get、set方法省略</span><br></pre></td></tr></table></figure><p>2、业务逻辑设计：<br>关系的建立：注册<br>奖励的触发：注册和拿手完成活动<br>奖励的触发涉及到对账户和金额的操作，需要做到必达性，所以需要做在消息队列里面，我用的是rocketmq做消息队列，mq有一个好处，就是他自身就支持消息回查，并且会自动重试，如果金额处理有问题，返回一个ConsumeConcurrentlyStatus.RECONSUME_LATER;mq会间隔一段时间重复去处理这个业务，如果处理金额成功，则直接返回一个CONSUME_SUCCESS就可以了</p><p>3、邀请关系的建立<br>这里有一个很麻烦的业务处理，需要在注册的时候就建立关系，和主要的注册方法是异步处理，保证注册成功并迅速完成。注册的时候会从页面上带上一个邀请商家id的请求头，在后端获取到这个请求头，并找到邀请人的用户信息，然后建立关系。如果只有一层关系就这样就可以了，但是我们三级分销是要有多层关系的，返款的时候不但需要找到邀请人，还要找到大师傅（所有父集里面邀请满足30人的用户），有人可能觉得直接循环去遍历父集就好了，但是这样对性能影响特别大，而且这种操作钱的操作都是重要的业务逻辑，不能这么耗性能。所以需要在每个人注册的时候不但要存储邀请人和和自己的邀请关系，同时要查看邀请人是否满足了大师傅的条件，如果满足，则对这个大师傅的所有子集都打上这个大师傅的标签。主要业务逻辑代码如下：</p><p>①主要注册代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">signUp</span><span class="params">(User user, UserAccount userAccount, Long inviterId, String wechatPlatformType, String wechatOpenId, Long boostTaskApplyId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User signUp = userService.signUp(user, userAccount, inviterId, wechatPlatformType, wechatOpenId, boostTaskApplyId);</span><br><span class="line">        <span class="keyword">if</span> (signUp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String channelSource = signUp.getChannelSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理大师傅邀请</span></span><br><span class="line">            <span class="keyword">if</span> (inviterId != <span class="keyword">null</span>) &#123;</span><br><span class="line">                User inviter = userService.get(inviterId);</span><br><span class="line">                <span class="keyword">if</span> (UserService.CHANNEL_SOURCE_DSF.equalsIgnoreCase(channelSource)) &#123;</span><br><span class="line">                    <span class="comment">//处理邀请逻辑</span></span><br><span class="line">                    <span class="keyword">if</span> (inviter != <span class="keyword">null</span> &amp;&amp; UserRoleEnum.SELLER.getCode().equals(inviter.getRole()) &amp;&amp; UserRoleEnum.SELLER.getCode().equals(signUp.getRole())) &#123;</span><br><span class="line">                        <span class="comment">//处理商家邀请逻辑</span></span><br><span class="line">                        Long userId = signUp.getId();</span><br><span class="line">                        Long fatherId = inviterId;</span><br><span class="line">                        userService.handleSellerInvitation(userId, fatherId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (inviter != <span class="keyword">null</span> &amp;&amp; UserRoleEnum.SHOWKER.getCode().equals(inviter.getRole()) &amp;&amp; UserRoleEnum.SHOWKER.getCode().equals(signUp.getRole())) &#123;</span><br><span class="line">                        <span class="comment">//处理拿手邀请奖励</span></span><br><span class="line">                        Long userId = signUp.getId();</span><br><span class="line">                        Long fatherId = inviterId;</span><br><span class="line">                        userService.handleShowkerInvitation(userId, fatherId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            userService.evictUserCache(signUp.getId());</span><br><span class="line">            userService.evictUserCache(inviterId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> signUp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>②、邀请逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 处理拿手邀请逻辑</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    @Async</span><br><span class="line">    public void handleShowkerInvitation(Long userId, Long fatherId) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            User user = get(userId);</span><br><span class="line">            String channelSource = user.getChannelSource();</span><br><span class="line">            //大师傅</span><br><span class="line">            if (CHANNEL_SOURCE_DSF.equals(channelSource)) &#123;</span><br><span class="line">                //事务分离</span><br><span class="line">                //邀请关系的创建</span><br><span class="line">                showkerInvitationService.createShowkerInvitationRelation(userId, fatherId);</span><br><span class="line"></span><br><span class="line">                //处理大师傅的子孙</span><br><span class="line">                showkerInvitationService.handleAllSon(fatherId);</span><br><span class="line"></span><br><span class="line">                //大师傅的注册奖励</span><br><span class="line">                ShowkerExtension showkerExtension = showkerExtensionRepository.findByUserId(userId);</span><br><span class="line">                if (showkerExtension == null || !ShowkerExtension.RoleEnum.ROLE_FOREFATHER.getCode().equals(showkerExtension.getRole())) &#123;</span><br><span class="line">                    String k = rocketMQTransactionWrapper.createKey(userId + &quot;&quot;);</span><br><span class="line">                    JSONObject json = new JSONObject();</span><br><span class="line">                    json.put(&quot;userId&quot;, userId);</span><br><span class="line">                    json.put(&quot;fatherId&quot;, fatherId);</span><br><span class="line">                    MessageExt messageExt = rocketMQTransactionWrapper.createMessageExt(MQTagEnum.SHOWKER_SIGNUP_REWARD, k, json);</span><br><span class="line">                    rocketMQTransactionWrapper.sendSync(messageExt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>③、邀请关系的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 创建邀请关系</span><br><span class="line">   */</span><br><span class="line">  @Override</span><br><span class="line">  public Long createShowkerInvitationRelation(Long userId, Long fatherId) throws Exception &#123;</span><br><span class="line">      if (userId != null &amp;&amp; fatherId != null) &#123;</span><br><span class="line">          ShowkerInvitation temp = showkerInvitationRepository.findByUserId(userId);</span><br><span class="line">          if (temp != null) &#123;</span><br><span class="line">              throw new CommonException(&quot;已经有一条邀请记录了！&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              AcquiredLockWrapper&lt;Long&gt; acquiredLockWrapper = () -&gt; &#123;</span><br><span class="line">                  ShowkerExtension fatherExtension = createShowkerExtension(fatherId);</span><br><span class="line">                  Integer fatherRole = fatherExtension.getRole();</span><br><span class="line">                  ShowkerInvitation fatherInvitation = showkerInvitationRepository.findByUserId(fatherId);</span><br><span class="line">                  ShowkerInvitation userInvitation = new ShowkerInvitation();</span><br><span class="line">                  userInvitation.setCreateTime(new Date());</span><br><span class="line">                  userInvitation.setUserId(userId);</span><br><span class="line">                  userInvitation.setFatherId(fatherId);</span><br><span class="line">                  userInvitation.setUserIsDivorced(false);</span><br><span class="line"></span><br><span class="line">                  if (fatherInvitation != null) &#123;</span><br><span class="line">                      Integer ancestor = fatherInvitation.getAncestor() == null ? 0 : fatherInvitation.getAncestor();</span><br><span class="line">                      userInvitation.setAncestor(ancestor + 1);</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      userInvitation.setAncestor(1);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  if (ShowkerExtension.RoleEnum.ROLE_FOREFATHER.getCode().equals(fatherRole)) &#123;</span><br><span class="line">                      userInvitation.setDistance(1);</span><br><span class="line">                      userInvitation.setForefatherId(fatherId);</span><br><span class="line">                      userInvitation.setEternityForefatherId(fatherId);</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      if (fatherInvitation != null &amp;&amp; fatherInvitation.getForefatherId() != null) &#123;</span><br><span class="line">                          Integer distance = fatherInvitation.getDistance() == null ? 0 : fatherInvitation.getDistance();</span><br><span class="line">                          userInvitation.setDistance(distance + 1);</span><br><span class="line">                          userInvitation.setForefatherId(fatherInvitation.getForefatherId());</span><br><span class="line">                          userInvitation.setEternityForefatherId(fatherInvitation.getForefatherId());</span><br><span class="line">                      &#125; else &#123;</span><br><span class="line">                          userInvitation.setDistance(null);</span><br><span class="line">                          userInvitation.setForefatherId(null);</span><br><span class="line">                          userInvitation.setEternityForefatherId(null);</span><br><span class="line">                      &#125;</span><br><span class="line">                      showkerExtensionRepository.updateRoleById(fatherExtension.getId(), ShowkerExtension.RoleEnum.ROLE_FATHER.getCode());</span><br><span class="line">                  &#125;</span><br><span class="line">                  showkerInvitationRepository.save(userInvitation);</span><br><span class="line">                  return userInvitation.getForefatherId();</span><br><span class="line">              &#125;;</span><br><span class="line"></span><br><span class="line">              ShowkerInvitation fatherInvitation = showkerInvitationRepository.findByUserId(fatherId);</span><br><span class="line">              if (fatherInvitation != null) &#123;</span><br><span class="line">                  return distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(fatherInvitation.getFatherId() + &quot;&quot;), acquiredLockWrapper);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  return acquiredLockWrapper.invokeAfterLockAcquire();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>④、处理子孙的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 处理子孙的数据</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">//    @Transactional(rollbackFor = Exception.class)</span><br><span class="line">    public void handleAllSon(Long forefatherId) &#123;</span><br><span class="line">        Long showkerInvitationLimit = 9999999999L;</span><br><span class="line">        SysConfig validSysConfig = sysConfigService.getValidSysConfig(UserConfigParam.SHOWKER_INVITATION_LIMIT);</span><br><span class="line">        if (validSysConfig != null) &#123;</span><br><span class="line">            showkerInvitationLimit = Long.parseLong(validSysConfig.getConfigValue());</span><br><span class="line">        &#125;</span><br><span class="line">        //确定父亲是不是祖先（查有多少个儿子）</span><br><span class="line">        ShowkerExtension fatherExtension = createShowkerExtension(forefatherId);</span><br><span class="line">        Long sonCount = showkerInvitationRepository.countByFatherId(forefatherId);</span><br><span class="line">        sonCount = sonCount == null ? 0L : sonCount;</span><br><span class="line">        if ((ShowkerExtension.RoleEnum.ROLE_FOREFATHER.getCode().equals(fatherExtension.getRole()) &amp;&amp; sonCount &gt;= showkerInvitationLimit &amp;&amp; sonCount &lt;= showkerInvitationLimit + 4) ||</span><br><span class="line">                ((!ShowkerExtension.RoleEnum.ROLE_FOREFATHER.getCode().equals(fatherExtension.getRole())) &amp;&amp; sonCount &gt;= showkerInvitationLimit)) &#123;</span><br><span class="line">            //如果是祖先则处理他的子孙</span><br><span class="line"></span><br><span class="line">            ShowkerInvitation byUserId = showkerInvitationRepository.findByUserId(forefatherId);</span><br><span class="line">            if (byUserId != null) &#123;</span><br><span class="line">                byUserId.setForefatherId(null);</span><br><span class="line">                byUserId.setDistance(0);</span><br><span class="line">                byUserId.setUserIsDivorced(true);</span><br><span class="line">                showkerInvitationRepository.save(byUserId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Integer distance = 1;</span><br><span class="line">            try &#123;</span><br><span class="line">                handleSon(forefatherId, forefatherId, distance);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                if (!ShowkerExtension.RoleEnum.ROLE_FOREFATHER.getCode().equals(fatherExtension.getRole())) &#123;</span><br><span class="line">                    User forefather = userRepository.findOne(forefatherId);</span><br><span class="line">                    momentQueue.push(Moment.TypeEnum.SHOWKER_BE_DSF, null, forefather.getPortraitPic(), forefather, null, null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            showkerExtensionRepository.updateRoleById(fatherExtension.getId(), ShowkerExtension.RoleEnum.ROLE_FOREFATHER.getCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>⑤、大师傅的注册奖励（mq消息的消费）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.handler;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line">import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line">import com.alibaba.rocketmq.common.message.MessageExt;</span><br><span class="line">import com.zhibi.xiuba.annotation.IMQConsumeHandler;</span><br><span class="line">import com.zhibi.xiuba.annotation.MQConsumeTag;</span><br><span class="line">import com.zhibi.xiuba.exception.CommonException;</span><br><span class="line">import com.zhibi.xiuba.lock.service.DistributedLock;</span><br><span class="line">import com.zhibi.xiuba.mq.MQTagEnum;</span><br><span class="line">import com.zhibi.xiuba.service.*;</span><br><span class="line">import com.zhibi.xiuba.service.impl.UserService;</span><br><span class="line">import com.zhibi.xiuba.user.spi.enums.LockKeyUtils;</span><br><span class="line">import com.zhibi.xiuba.user.spi.model.ShowkerInvitation;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 有关金额交易都放到mq消息队列中去</span><br><span class="line"> */</span><br><span class="line">@MQConsumeTag(&#123;</span><br><span class="line">        MQTagEnum.SHOWKER_SIGNUP_REWARD,</span><br><span class="line">        MQTagEnum.SHOWKER_BINDING_WANGWANG_REWARD,</span><br><span class="line">        MQTagEnum.SHOWKER_FINSH_SHOWKERTASK_REWARD,</span><br><span class="line">        MQTagEnum.SELLER_INVITATION_REWARD_FATHER,</span><br><span class="line">        MQTagEnum.SELLER_INVITATION_REWARD_FOREFATHER&#125;)</span><br><span class="line">@Service</span><br><span class="line">public class MoneyConsumeHandler implements IMQConsumeHandler &#123;</span><br><span class="line"></span><br><span class="line">    private final ITradingRecordService tradingRecordService;</span><br><span class="line"></span><br><span class="line">    private final DistributedLock distributedLock;</span><br><span class="line"></span><br><span class="line">    private final IShowkerInvitationService showkerInvitationService;</span><br><span class="line"></span><br><span class="line">    private final ISellerInvitationService sellerInvitationService;</span><br><span class="line"></span><br><span class="line">    private final IRecommendRewardService recommendRewardService;</span><br><span class="line"></span><br><span class="line">    private final IUserService userService;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    public MoneyConsumeHandler(ITradingRecordService tradingRecordService,</span><br><span class="line">                               DistributedLock distributedLock,</span><br><span class="line">                               IShowkerInvitationService showkerInvitationService,</span><br><span class="line">                               ISellerInvitationService sellerInvitationService,</span><br><span class="line">                               IRecommendRewardService recommendRewardService,</span><br><span class="line">                               UserService userService) &#123;</span><br><span class="line">        this.tradingRecordService = tradingRecordService;</span><br><span class="line">        this.distributedLock = distributedLock;</span><br><span class="line">        this.showkerInvitationService = showkerInvitationService;</span><br><span class="line">        this.sellerInvitationService = sellerInvitationService;</span><br><span class="line">        this.recommendRewardService = recommendRewardService;</span><br><span class="line">        this.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ConsumeConcurrentlyStatus consumeMessage(MessageExt messageExt, ConsumeConcurrentlyContext context) &#123;</span><br><span class="line">        JSONObject paramObject = JSONObject.parseObject(new String(messageExt.getBody()));</span><br><span class="line">        logger.info(&quot;receiveMsg:&#123;tag=&quot; + messageExt.getTags() + &quot;, content=&quot; + new String(messageExt.getBody()));</span><br><span class="line">        String tags = messageExt.getTags();</span><br><span class="line">        String msgId = messageExt.getMsgId();</span><br><span class="line">        MQTagEnum mqTagEnum = MQTagEnum.getEnumByCode(tags);</span><br><span class="line">        ConsumeConcurrentlyStatus consumeConcurrentlyStatus = ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">        switch (mqTagEnum) &#123;</span><br><span class="line">            case SHOWKER_SIGNUP_REWARD: &#123;</span><br><span class="line">                Long userId = paramObject.getLong(&quot;userId&quot;);</span><br><span class="line">                Long fatherId = paramObject.getLong(&quot;fatherId&quot;);</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    ShowkerInvitation showkerInvitation = showkerInvitationService.findByUserId(userId);</span><br><span class="line">                    if (showkerInvitation != null &amp;&amp; showkerInvitation.getForefatherId() != null) &#123;</span><br><span class="line">                        distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(showkerInvitation.getForefatherId() + &quot;&quot;),</span><br><span class="line">                                () -&gt; distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(fatherId + &quot;&quot;),</span><br><span class="line">                                        () -&gt; showkerInvitationService.handleSignUpReward(showkerInvitation.getForefatherId(), fatherId, userId)));</span><br><span class="line"></span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(fatherId + &quot;&quot;),</span><br><span class="line">                                () -&gt; showkerInvitationService.handleSignUpReward(null, fatherId, userId));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (showkerInvitation != null &amp;&amp; showkerInvitation.getForefatherId() != null) &#123;</span><br><span class="line">                        userService.evictUserCache(showkerInvitation.getForefatherId());</span><br><span class="line">                    &#125;</span><br><span class="line">                    userService.evictUserCache(fatherId);</span><br><span class="line">                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line"></span><br><span class="line">                &#125; catch (CommonException ce) &#123;</span><br><span class="line">                    if (&quot;dont_resubmit&quot;.equals(ce.getErrorCode())) &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            case SHOWKER_BINDING_WANGWANG_REWARD: &#123;</span><br><span class="line">                Long userId = paramObject.getLong(&quot;userId&quot;);</span><br><span class="line">                Long fatherId = paramObject.getLong(&quot;fatherId&quot;);</span><br><span class="line">                Long forefatherId = paramObject.getLong(&quot;forefatherId&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (fatherId != null &amp;&amp; forefatherId != null) &#123;</span><br><span class="line">                        distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(forefatherId + &quot;&quot;),</span><br><span class="line">                                () -&gt; distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(fatherId + &quot;&quot;),</span><br><span class="line">                                        () -&gt; showkerInvitationService.handleBindingWangwangReward(forefatherId, fatherId, userId)));</span><br><span class="line">                    &#125; else if (fatherId != null) &#123;</span><br><span class="line">                        distributedLock.lock(LockKeyUtils.getShowkerInvitationLockKey(fatherId + &quot;&quot;),</span><br><span class="line">                                () -&gt; showkerInvitationService.handleBindingWangwangReward(null, fatherId, userId));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    userService.evictUserCache(fatherId);</span><br><span class="line">                    userService.evictUserCache(forefatherId);</span><br><span class="line">                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; catch (CommonException ce) &#123;</span><br><span class="line">                    if (&quot;dont_resubmit&quot;.equals(ce.getErrorCode())) &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            case SHOWKER_FINSH_SHOWKERTASK_REWARD: &#123;</span><br><span class="line">                Long showkerId = paramObject.getLong(&quot;showkerId&quot;);</span><br><span class="line">                Long showkerTaskId = paramObject.getLong(&quot;showkerTaskId&quot;);</span><br><span class="line">                boolean ifFirst = paramObject.getBoolean(&quot;ifFirst&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (showkerId != null) &#123;</span><br><span class="line">                        userService.handleShowkerTaskReward(showkerId, ifFirst, showkerTaskId);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        logger.info(&quot;SHOWKER_FINSH_SHOWKERTASK_REWARD：没有showkerId&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; catch (CommonException ce) &#123;</span><br><span class="line">                    if (&quot;dont_resubmit&quot;.equals(ce.getErrorCode())) &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            case SELLER_INVITATION_REWARD_FATHER: &#123;</span><br><span class="line">                Long fatherId = paramObject.getLong(&quot;fatherId&quot;);</span><br><span class="line">                Long userId = paramObject.getLong(&quot;userId&quot;);</span><br><span class="line">                Long reward = paramObject.getLong(&quot;reward&quot;);</span><br><span class="line">                Long taskId = paramObject.getLong(&quot;taskId&quot;);</span><br><span class="line">                Long tradId = paramObject.getLong(&quot;tradId&quot;);</span><br><span class="line">                Integer initiatorType = paramObject.getInteger(&quot;initiatorType&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (fatherId != null) &#123;</span><br><span class="line">                        distributedLock.lock(LockKeyUtils.getTradLockKeyUid(fatherId),</span><br><span class="line">                                () -&gt; sellerInvitationService.rewardSellerFather(userId, fatherId, reward, initiatorType, msgId, taskId, tradId));</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        logger.info(&quot;SELLER_INVITATION_REWARD_FATHER：没有fatherId&quot;);</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; catch (CommonException ce) &#123;</span><br><span class="line">                    if (&quot;dont_resubmit&quot;.equals(ce.getErrorCode())) &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            case SELLER_INVITATION_REWARD_FOREFATHER: &#123;</span><br><span class="line">                Long forefatherId = paramObject.getLong(&quot;forefatherId&quot;);</span><br><span class="line">                Long reward = paramObject.getLong(&quot;reward&quot;);</span><br><span class="line">                Long userId = paramObject.getLong(&quot;userId&quot;);</span><br><span class="line">                Integer initiatorType = paramObject.getInteger(&quot;initiatorType&quot;);</span><br><span class="line">                Long taskId = paramObject.getLong(&quot;taskId&quot;);</span><br><span class="line">                Long tradId = paramObject.getLong(&quot;tradId&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (forefatherId != null) &#123;</span><br><span class="line">                        distributedLock.lock(LockKeyUtils.getTradLockKeyUid(forefatherId),</span><br><span class="line">                                () -&gt; sellerInvitationService.rewardSellerForefather(userId, forefatherId, reward, initiatorType, msgId, taskId, tradId));</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        logger.info(&quot;SELLER_INVITATION_REWARD_FATHER：没有forefatherId&quot;);</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (CommonException ce) &#123;</span><br><span class="line">                    if (&quot;dont_resubmit&quot;.equals(ce.getErrorCode())) &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return consumeConcurrentlyStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥、SHOWKER_SIGNUP_REWARD消费逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    @Transactional(rollbackFor = Exception.class)</span><br><span class="line">    public boolean handleSignUpReward(Long forefatherId, Long fatherId, Long userId) throws CommonException &#123;</span><br><span class="line">        long rewardFather = 0L;</span><br><span class="line">        long rewardForefather = 0L;</span><br><span class="line">        long reward = 0;</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        SysConfig validSysConfigFather = sysConfigService.getValidSysConfig(UserConfigParam.SHOWKER_INVITATION_REWARD_SIGN_UP_FATHER);</span><br><span class="line">        SysConfig validSysConfigForefather = sysConfigService.getValidSysConfig(UserConfigParam.SHOWKER_INVITATION_REWARD_SIGN_UP_FOREFATHER);</span><br><span class="line">        if (validSysConfigFather != null) &#123;</span><br><span class="line">            rewardFather = Long.parseLong(validSysConfigFather.getConfigValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (validSysConfigForefather != null) &#123;</span><br><span class="line">            rewardForefather = Long.parseLong(validSysConfigForefather.getConfigValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (fatherId != null &amp;&amp; rewardFather &gt; 0L) &#123;</span><br><span class="line">            ShowkerExtension showkerExtension = showkerExtensionRepository.findByUserId(fatherId);</span><br><span class="line">            User father = userRepository.findOne(fatherId);</span><br><span class="line">            UserAccount fatherAccount = father.getUserAccount();</span><br><span class="line">//            fatherAccount.setInvitationReward((fatherAccount.getInvitationReward() == null ? 0L : fatherAccount.getInvitationReward()) + rewardFather);</span><br><span class="line">//            fatherAccount.setLastUpdateTime(new Date());</span><br><span class="line">//            userAccountRepository.save(fatherAccount);</span><br><span class="line">            fatherAccount = complexEntityService.addInvitationReward(fatherId, fatherAccount.getId(), rewardFather);</span><br><span class="line"></span><br><span class="line">            ShowkerInvitationRewardLog temp1 = new ShowkerInvitationRewardLog();</span><br><span class="line">            temp1.setBeneficiaryId(fatherId);</span><br><span class="line">            temp1.setInitiatorId(userId);</span><br><span class="line">            temp1.setInitiatorType(ShowkerInvitationRewardLog.InitiatorTypeEnum.REWARD_SIGN_UP.getCode());</span><br><span class="line">            temp1.setOfferType(ShowkerInvitationRewardLog.OfferTypeEnum.REWARD_FATHER.getCode());</span><br><span class="line">            List&lt;ShowkerInvitationRewardLog&gt; all = showkerInvitationRewardLogRepository.findAll(Example.of(temp1));</span><br><span class="line">            if (all != null &amp;&amp; all.size() &gt; 0) &#123;</span><br><span class="line">                throw new CommonException(&quot;dont_resubmit&quot;, &quot;请不要重复奖励&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                momentQueue.push(Moment.TypeEnum.SHOWKER_REG_REWARD, null, father.getPortraitPic(), father, rewardFather,</span><br><span class="line">                        new JSONObject().fluentPut(Moment.TypeEnum.SHOWKER_REG_REWARD.getInfoKey(), userId)</span><br><span class="line">                                .fluentPut(&quot;sonNickname&quot;, PhoneUtil.hideNickname(userRepository.findOne(userId).getNickname())));</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ShowkerInvitationRewardLog showkerInvitationRewardLog = new ShowkerInvitationRewardLog();</span><br><span class="line">            showkerInvitationRewardLog.setBeneficiaryId(fatherId);</span><br><span class="line">            showkerInvitationRewardLog.setBeneficiaryRole(showkerExtension.getRole());</span><br><span class="line">            showkerInvitationRewardLog.setInitiatorId(userId);</span><br><span class="line">            showkerInvitationRewardLog.setInitiatorType(ShowkerInvitationRewardLog.InitiatorTypeEnum.REWARD_SIGN_UP.getCode());</span><br><span class="line">            showkerInvitationRewardLog.setOfferType(ShowkerInvitationRewardLog.OfferTypeEnum.REWARD_FATHER.getCode());</span><br><span class="line">            showkerInvitationRewardLog.setRewardFee(rewardFather);</span><br><span class="line">            showkerInvitationRewardLog.setCreateTime(now);</span><br><span class="line">            showkerInvitationRewardLogRepository.save(showkerInvitationRewardLog);</span><br><span class="line"></span><br><span class="line">            reward += rewardFather;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (forefatherId != null &amp;&amp; rewardForefather &gt; 0L) &#123;</span><br><span class="line">            ShowkerExtension showkerExtension = showkerExtensionRepository.findByUserId(forefatherId);</span><br><span class="line">            User forefather = userRepository.findOne(forefatherId);</span><br><span class="line">            UserAccount forefatherAccount = forefather.getUserAccount();</span><br><span class="line">//            forefatherAccount.setInvitationReward((forefatherAccount.getInvitationReward() == null ? 0L : forefatherAccount.getInvitationReward()) + rewardForefather);</span><br><span class="line">//            forefatherAccount.setLastUpdateTime(new Date());</span><br><span class="line">//            userAccountRepository.save(forefatherAccount);</span><br><span class="line">            forefatherAccount = complexEntityService.addInvitationReward(forefatherId, forefatherAccount.getId(), rewardForefather);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ShowkerInvitationRewardLog temp2 = new ShowkerInvitationRewardLog();</span><br><span class="line">            temp2.setBeneficiaryId(forefatherId);</span><br><span class="line">            temp2.setInitiatorId(userId);</span><br><span class="line">            temp2.setInitiatorType(ShowkerInvitationRewardLog.InitiatorTypeEnum.REWARD_SIGN_UP.getCode());</span><br><span class="line">            temp2.setOfferType(ShowkerInvitationRewardLog.OfferTypeEnum.REWARD_FOREFATHER.getCode());</span><br><span class="line">            List&lt;ShowkerInvitationRewardLog&gt; all = showkerInvitationRewardLogRepository.findAll(Example.of(temp2));</span><br><span class="line">            if (all != null &amp;&amp; all.size() &gt; 0) &#123;</span><br><span class="line">                throw new CommonException(&quot;dont_resubmit&quot;, &quot;请不要重复奖励&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ShowkerInvitationRewardLog showkerInvitationRewardLog = new ShowkerInvitationRewardLog();</span><br><span class="line">            showkerInvitationRewardLog.setBeneficiaryId(forefatherId);</span><br><span class="line">            showkerInvitationRewardLog.setBeneficiaryRole(showkerExtension.getRole());</span><br><span class="line">            showkerInvitationRewardLog.setInitiatorId(userId);</span><br><span class="line">            showkerInvitationRewardLog.setInitiatorType(ShowkerInvitationRewardLog.InitiatorTypeEnum.REWARD_SIGN_UP.getCode());</span><br><span class="line">            showkerInvitationRewardLog.setOfferType(ShowkerInvitationRewardLog.OfferTypeEnum.REWARD_FOREFATHER.getCode());</span><br><span class="line">            showkerInvitationRewardLog.setRewardFee(rewardForefather);</span><br><span class="line">            showkerInvitationRewardLog.setCreateTime(now);</span><br><span class="line">            showkerInvitationRewardLogRepository.save(showkerInvitationRewardLog);</span><br><span class="line"></span><br><span class="line">            reward += rewardForefather;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (reward &gt; 0) &#123;</span><br><span class="line">            //平台账户交易记录</span><br><span class="line">            TradingRecord pt = new TradingRecord(Constants.PING_TAI_ID, null, -reward, now,</span><br><span class="line">                    TradingRecord.AccountChangeTypeEnum.XIUBA_RECORD.getCode(),</span><br><span class="line">                    0L, UserRoleEnum.PING_TAI.getCode(),</span><br><span class="line">                    TradingRecord.TradStateEnum.SUCCESS.getCode());</span><br><span class="line">            pt.setReferTradId(null);</span><br><span class="line">            pt.setReferUserId(userId);</span><br><span class="line">            pt.setTradTime(now);</span><br><span class="line">            pt.setFirstTradTime(now);</span><br><span class="line">            tradingRecordRepository.save(pt);</span><br><span class="line">            TradingRecordDetail trd = new TradingRecordDetail();</span><br><span class="line">            trd.setPlatform(TradingRecord.PlatformEnum.MOBILE_WAP_WECHAT.getCode());</span><br><span class="line">            trd.setCreateTime(now);</span><br><span class="line">            trd.setRole(UserRoleEnum.PING_TAI.getCode());</span><br><span class="line">            trd.setState(TradingRecordDetail.TradDetailStateEnum.SUCCESS.getCode());</span><br><span class="line">            trd.setTradAmount(-reward);</span><br><span class="line">            trd.setTradName(TradingRecordDetail.TradNameEnum.XIUBA_PLATFORM_PAY_FOR_INVITE_REWARDS_TO_WALLET_SHOWKER.getCode());</span><br><span class="line">            trd.setTradTime(now);</span><br><span class="line">            trd.setTradId(pt.getId());</span><br><span class="line">            trd.init(RandomStringUtils.random(5, true, true));</span><br><span class="line">            tradingRecordDetailRepository.save(trd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过“三级分销”的形式，形成拿手端的裂变，提高拿手注册转化的积极性！&lt;br&gt;一、业务模式&lt;br&gt;拿手端的“三级分销”，其基础业务模式参考商家端，通过邀请注册的形式，形成3级关系，
    
    </summary>
    
      <category term="业务逻辑" scheme="http://yoursite.com/categories/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="三级分销" scheme="http://yoursite.com/tags/%E4%B8%89%E7%BA%A7%E5%88%86%E9%94%80/"/>
    
  </entry>
  
  <entry>
    <title>标签系统</title>
    <link href="http://yoursite.com/2018/08/16/java/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/%E6%A0%87%E7%AD%BE%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/08/16/java/业务逻辑/标签系统/</id>
    <published>2018-08-16T13:47:57.687Z</published>
    <updated>2018-08-16T13:47:57.689Z</updated>
    
    <content type="html"><![CDATA[<p>一、增加拿手的兴趣标签和身份标签，用于后续商家增值服务使用，同时建立基础的用户画像。<a id="more"></a></p><p>1、系统增加两类标签  </p><ul><li><p>身份标签：<br>• 身份标签为拿手的的用户属性，用于描述拿手的自身的特性，具体如下：<br>• 时尚潮人<br>• 数码极客<br>• 文艺青年<br>• 运动达人<br>• 无敌辣妈<br>• 御宅一族</p></li><li><p>兴趣标签：<br>• 兴趣标签为淘宝的宝贝类目，用于了解拿手在淘宝上的消费习惯，具体标签内容如下：<br>• 服装鞋包<br>• 手机数码<br>• 家用电器<br>• 美妆饰品<br>• 母婴用品<br>• 家居建材<br>• 百货食品<br>• 运动户外<br>• 文化玩乐<br>• 生活服务<br>• 汽配摩托</p></li></ul><p>2、拿手手机端增加打标签的页面<br>• 拿手手机端新增两个页面，用于拿手身份标签和兴趣标签的选择，界面原型如下，设计稿界面待更新；<br>• 在设定标签的过程中，有可能会发生返回的操作，所以在最后点击“开启我的白拿拿之旅”时，进行保存的操作<br><img src="https://img-blog.csdn.net/20180816111946339?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>3、标签页面触发入口</p><ul><li>新注册用户：<br>对于新注册的用户，完成注册或者绑定手机号完成后，直接进入上述的标签原则页，且拿手必须完成标签的选择后，才可进入到首页；</li><li>老用户<br>对于已注册的用户，在返回的首页的时候（包括点击分享的链接、公众号底部菜单、其它页面返回首页等），如果未设定过身份标签和兴趣标签，则直接进入标签设定页，设定完成后才可以进入到首页；</li></ul><p>4、保存设定的信息到拿手的标签中<br>• 拿手设定完成后，保存对应的身份标签和兴趣标签到该拿手的标签信息中，同时后台标签管理中，需要增加该拿手对应标签的展示</p><p><img src="https://img-blog.csdn.net/20180816112028225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>二、系统设计：</p><p>1、标签配置表：<br>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.user.spi.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by QinHe on 2018-05-08.</span></span><br><span class="line"><span class="comment"> * 底层标签配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"xb_us_tag_config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagConfig</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">845329773606157910L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"id_generator"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"id_generator"</span>, strategy = <span class="string">"redis_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToOne</span>()</span><br><span class="line">    <span class="meta">@JoinColumn</span>(updatable = <span class="keyword">false</span>, name = <span class="string">"parent_id"</span>, referencedColumnName = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> TagConfig parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签层级 0为最顶层</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当下是否可用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Type</span>(type = <span class="string">"org.hibernate.type.NumericBooleanType"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dataType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String iconUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date deadLineTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(Boolean enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDataType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataType</span><span class="params">(String dataType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataType = dataType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDeadLineTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deadLineTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeadLineTime</span><span class="params">(Date deadLineTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deadLineTime = deadLineTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TagConfig <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(TagConfig parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSortIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sortIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSortIndex</span><span class="params">(Integer sortIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sortIndex = sortIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIconUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iconUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIconUrl</span><span class="params">(String iconUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iconUrl = iconUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180816112200388?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>标签是分级的，这里面是用parent一个字段就可以表示层级关系了</p><p>2、用户标签对应表</p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.user.spi.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.user.spi.enums.DataTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by QinHe on 2018-05-08.</span></span><br><span class="line"><span class="comment"> * 增值业务配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"xb_us_tag_library"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagLibrary</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4645714347119745836L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"id_generator"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"id_generator"</span>, strategy = <span class="string">"redis_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签 多对一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>, name = <span class="string">"tag_config_id"</span>, referencedColumnName = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> TagConfig tagConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stringValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date dateValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long longValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(columnDefinition = <span class="string">"bit"</span>, length = <span class="number">1</span>)</span><br><span class="line">    <span class="meta">@Type</span>(type = <span class="string">"org.hibernate.type.NumericBooleanType"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean booleanValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double doubleValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagLibrary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagLibrary</span><span class="params">(TagConfig tagConfig, Long userId, Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagConfig = tagConfig;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value, String dataType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; StringUtils.isNoneBlank(dataType)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DataTypeEnum.DATA_TYPE_ENUM_STRING.getCode().equals(dataType)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.stringValue = (String) value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataTypeEnum.DATA_TYPE_ENUM_DATE.getCode().equals(dataType)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.dateValue = (Date) value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataTypeEnum.DATA_TYPE_ENUM_LONG.getCode().equals(dataType)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.longValue = (Long) value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataTypeEnum.DATA_TYPE_ENUM_BOOLEAN.getCode().equals(dataType)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.booleanValue = (Boolean) value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataTypeEnum.DATA_TYPE_ENUM_DOUBLE.getCode().equals(dataType)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.doubleValue = (Double) value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.stringValue = value.toString();</span><br><span class="line">        <span class="keyword">this</span>.updateTime = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TagConfig <span class="title">getTagConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tagConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTagConfig</span><span class="params">(TagConfig tagConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagConfig = tagConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStringValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStringValue</span><span class="params">(String stringValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringValue = stringValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDateValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateValue</span><span class="params">(Date dateValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateValue = dateValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getLongValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> longValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLongValue</span><span class="params">(Long longValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.longValue = longValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBooleanValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booleanValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooleanValue</span><span class="params">(Boolean booleanValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booleanValue = booleanValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getDoubleValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doubleValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoubleValue</span><span class="params">(Double doubleValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doubleValue = doubleValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180816112313737?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>3、controller方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.model.ControllerResult;</span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.service.ITagService;</span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.user.spi.enums.TagConfigIdEnum;</span><br><span class="line"><span class="keyword">import</span> com.zhibi.xiuba.user.spi.model.TagConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/tag/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ITagService tagService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagController</span><span class="params">(ITagService tagService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagService = tagService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/makeTagForShowker"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ControllerResult <span class="title">makeTagForShowker</span><span class="params">(@RequestParam Long showkerId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              @RequestParam String identityTagJsonStr,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              @RequestParam String hobbyTagJsonStr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; idsIdentity = tagService.findByUserIdAndTagParent(showkerId, TagConfigIdEnum.IDENTITY_TAG_ID.getCode());</span><br><span class="line">        List&lt;Long&gt; idsHobby = tagService.findByUserIdAndTagParent(showkerId, TagConfigIdEnum.HOBBY_TAG_ID.getCode());</span><br><span class="line">        <span class="keyword">if</span> ((idsIdentity != <span class="keyword">null</span> &amp;&amp; idsIdentity.size() &gt; <span class="number">0</span>) || (idsHobby != <span class="keyword">null</span> &amp;&amp; idsHobby.size() &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ControllerResult.build(<span class="keyword">false</span>, <span class="string">""</span>, <span class="string">"您已经打过标签了！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(identityTagJsonStr)) &#123;</span><br><span class="line">            List&lt;Long&gt; tagIds = JSON.parseArray(identityTagJsonStr, Long.class);</span><br><span class="line">            <span class="keyword">if</span> (tagIds != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tagIds.size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ControllerResult.build(<span class="keyword">false</span>, <span class="string">""</span>, <span class="string">"最多可选两项！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Long tagId : tagIds) &#123;</span><br><span class="line">                    tagService.createTagForUser(showkerId, tagId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(hobbyTagJsonStr)) &#123;</span><br><span class="line">            List&lt;Long&gt; tagIds = JSON.parseArray(hobbyTagJsonStr, Long.class);</span><br><span class="line">            <span class="keyword">if</span> (tagIds != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tagIds.size() &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ControllerResult.build(<span class="keyword">false</span>, <span class="string">""</span>, <span class="string">"最多可选四项！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Long tagId : tagIds) &#123;</span><br><span class="line">                    tagService.createTagForUser(showkerId, tagId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ControllerResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getIdentityTag"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ControllerResult <span class="title">getIdentityTag</span><span class="params">(Long categoryId, Boolean enable)</span> </span>&#123;</span><br><span class="line">        List&lt;TagConfig&gt; list = tagService.getIdentityTag(categoryId, enable);</span><br><span class="line">        <span class="keyword">return</span> ControllerResult.ok(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、业务逻辑层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.service.impl;</span><br><span class="line"></span><br><span class="line">import com.zhibi.xiuba.repository.TagConfigRepository;</span><br><span class="line">import com.zhibi.xiuba.repository.TagLibraryRepository;</span><br><span class="line">import com.zhibi.xiuba.service.ITagService;</span><br><span class="line">import com.zhibi.xiuba.user.spi.model.TagConfig;</span><br><span class="line">import com.zhibi.xiuba.user.spi.model.TagLibrary;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.data.domain.Example;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by QinHe on 2018-07-02.</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class TagService implements ITagService &#123;</span><br><span class="line"></span><br><span class="line">    private final TagLibraryRepository tagLibraryRepository;</span><br><span class="line">    private final TagConfigRepository tagConfigRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public TagService(TagLibraryRepository tagLibraryRepository, TagConfigRepository tagConfigRepository) &#123;</span><br><span class="line">        this.tagLibraryRepository = tagLibraryRepository;</span><br><span class="line">        this.tagConfigRepository = tagConfigRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Long&gt; findByUserIdAndTagParent(Long userId, Long tagParentId) &#123;</span><br><span class="line">        return tagLibraryRepository.findByUserIdAndTagParent(userId, tagParentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Cacheable(cacheNames = &quot;Tag&quot;, key = &quot;&apos;categoryId_&apos; + #categoryId+&apos;_&apos;+#enable&quot;)</span><br><span class="line">    public List&lt;TagConfig&gt; getIdentityTag(Long categoryId, Boolean enable) &#123;</span><br><span class="line">        TagConfig tagConfig = new TagConfig();</span><br><span class="line">        TagConfig parent = new TagConfig();</span><br><span class="line">        parent.setId(categoryId);</span><br><span class="line">        tagConfig.setParent(parent);</span><br><span class="line">        if (enable != null) &#123;</span><br><span class="line">            tagConfig.setEnabled(enable);</span><br><span class="line">        &#125;</span><br><span class="line">        return tagConfigRepository.findAll(Example.of(tagConfig));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void createTagForUser(Long showkerId, Long tagId) &#123;</span><br><span class="line">        TagLibrary tagLibrary = new TagLibrary();</span><br><span class="line">        tagLibrary.setCreateTime(new Date());</span><br><span class="line">        tagLibrary.setUserId(showkerId);</span><br><span class="line">        tagLibrary.setTagConfig(tagConfigRepository.findOne(tagId));</span><br><span class="line">        tagLibraryRepository.save(tagLibrary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、增加拿手的兴趣标签和身份标签，用于后续商家增值服务使用，同时建立基础的用户画像。
    
    </summary>
    
      <category term="业务逻辑" scheme="http://yoursite.com/categories/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="三级分销" scheme="http://yoursite.com/tags/%E4%B8%89%E7%BA%A7%E5%88%86%E9%94%80/"/>
    
  </entry>
  
  <entry>
    <title>类似于美团红包的功能</title>
    <link href="http://yoursite.com/2018/08/16/java/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/%E7%B1%BB%E4%BC%BC%E4%BA%8E%E7%BE%8E%E5%9B%A2%E7%BA%A2%E5%8C%85%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/08/16/java/业务逻辑/类似于美团红包的功能/</id>
    <published>2018-08-16T13:15:24.846Z</published>
    <updated>2018-08-16T13:15:24.848Z</updated>
    
    <content type="html"><![CDATA[<p>1、对于未参加过活动，且已经成功接过单的用户（老用户），在首页弹窗显示红包活动<br><a id="more"></a><br><img src="https://img-blog.csdn.net/20180816205048488?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>2、进入活动后先自己拆红包</p><p><img src="https://img-blog.csdn.net/20180816205107167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>3、会在3-10元之间随机开出一个金额，显示在红包金额中</p><p><img src="https://img-blog.csdn.net/201808162051218?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>4、查看活动规则做弹窗显示</p><p><img src="https://img-blog.csdn.net/20180816205134695?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180816205146400?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>5、可对红包金额进行提取，将红包里的钱提到用户的平台现金账户中。</p><p><img src="https://img-blog.csdn.net/20180816205202335?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>6、页面下方显示拆红包记录和红包提取记录，数据默认10条，下拉加载一次。</p><p><img src="https://img-blog.csdn.net/20180816205215281?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180816205226274?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>暂无记录显示方式</p><p><img src="https://img-blog.csdn.net/20180816205240329?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>7、点击分享效果</p><p><img src="https://img-blog.csdn.net/20180816205253297?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>8、好友收到分享访问后的落地页效果，点击“开”提示绑定手机注册。</p><p><img src="https://img-blog.csdn.net/20180816205307891?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>注册成功后返回开红包成功的界面</p><p><img src="https://img-blog.csdn.net/20180816205319806?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>9、用户点“开红包”进入我的红包页面，效果同步骤2及以后</p><p><img src="https://img-blog.csdn.net/20180816205338833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>10、用户点宝贝，到新人专区页。<br>PS：所有的用户名默认都显示昵称，无昵称的才显示手机号加密码</p><p>活动规则：<br>1、用户第一次自己开红包金额3-10元之间浮动，3-5元50%，5.01-6.00元40%，6.01-8元8%，8-10元2%<br>2、好友帮忙拆红包，金额在0.5-5元之间浮动，0.5-1元50%，1.01-2.00元40%，2.01-3元8%，3-5元2%<br>3、红包金额累计，当用户提取一次，消耗累计金额一次。</p><p><img src="https://img-blog.csdn.net/20180816205506103?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180816205523287?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>4、红包必须先提取到用户平台账户中，提取次数不限，再由平台账户申请提现。<br>5、平台账户提现需要另限制，必须成功完成过一单的用户才可以提现。<br>6、后台需要对每一次提取进行记账，分类为：一起拆红包_拿手红包提取。</p><p><img src="https://img-blog.csdn.net/20180816205544457?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>7、用户账单中要显示出提取记录</p><p><img src="https://img-blog.csdn.net/20180816205606661?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180816205612504?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>8、开红包仅对未注册过的手机号有效，老用户无法开红包。老用户点击链接后进入自己的活动界面，做一个浮动提示：您已注册过白拿拿，无法再帮好友拆红包。</p><p><img src="https://img-blog.csdn.net/20180816205649485?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>、</p><p>系统设计：</p><p>1、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/openRedEnvelope&quot;)</span><br><span class="line">    @ApiOperation(&quot;拆红包动作&quot;)</span><br><span class="line">    public ControllerResult openRedEnvelope(@RequestParam @ApiParam(&quot;红包金额流入的用户ID&quot;) Long redUserId,</span><br><span class="line">                                            @RequestParam @ApiParam(&quot;进行拆红包动作的用户ID&quot;) Long openUserId) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ControllerResult controllerResult = distributedLock.lock(LockKeyUtils.getTradLockKeyUid(redUserId), () -&gt; &#123;</span><br><span class="line">                ControllerResult cs = judgeIfCanOpenRedEnvelope(redUserId, openUserId);</span><br><span class="line">                if (!cs.getStatus()) &#123;</span><br><span class="line">                    return cs;</span><br><span class="line">                &#125;</span><br><span class="line">                return distributedLock.lock(LockKeyUtils.getTradLockKeyUid(openUserId), () -&gt; &#123;</span><br><span class="line">                    return redEnvelopeService.openRedEnvelope(redUserId, openUserId);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            return controllerResult;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ControllerResult.build(false, &quot;error&quot;, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、红包怎么算？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public long getEnvelopeMe(Long redUserId) &#123;</span><br><span class="line">        long reward = 0L;</span><br><span class="line">        List&lt;OpenRedEnvelope&gt; openRedEnvelopes = findByRedUserIdAndOpenUserId(redUserId, redUserId);</span><br><span class="line">        if (openRedEnvelopes != null &amp;&amp; openRedEnvelopes.size() &gt; 0) &#123;</span><br><span class="line">            //不是第一次</span><br><span class="line">            reward = LotteryUtil.getRandomInt(5, 10);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //第一次</span><br><span class="line">            reward = LotteryUtil.getRandomInt(0, 100);</span><br><span class="line">        &#125;</span><br><span class="line">//        return lotteryUtilMe.getReward(rMe);</span><br><span class="line">        return reward;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public long getEnvelopeFriend() &#123;</span><br><span class="line">        return lotteryUtilFriend.getReward(rFri);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>概率的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.utils.envelope;</span><br><span class="line"></span><br><span class="line">import com.zhibi.xiuba.domain.envelope.Envelope;</span><br><span class="line">import com.zhibi.xiuba.domain.envelope.EnvelopeProbability;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by QinHe on 2018/3/28.</span><br><span class="line"> */</span><br><span class="line">public class LotteryUtil &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;EnvelopeProbability&gt; lotteryList;   //概率连续集合</span><br><span class="line">    private double maxElement = 0d;                  //这里只需要最大值，最小值默认为0.0</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构造抽奖集合</span><br><span class="line">     */</span><br><span class="line">    public LotteryUtil(List&lt;Envelope&gt; list) &#123;</span><br><span class="line">        this.lotteryList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (list != null &amp;&amp; list.size() &gt; 0) &#123;</span><br><span class="line">            double minElement = 0d;</span><br><span class="line">            for (Envelope envelope : list) &#123;</span><br><span class="line">                minElement = maxElement;</span><br><span class="line">                maxElement = maxElement + envelope.getRate();</span><br><span class="line">                EnvelopeProbability envelopeProbability = new EnvelopeProbability(envelope.getMinFen(), envelope.getMaxFen(), minElement, maxElement, envelope.getRewardType());</span><br><span class="line">                lotteryList.add(envelopeProbability);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;抽奖集合不能为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 进行抽奖操作</span><br><span class="line">     * 返回：奖品的概率list集合中的下标</span><br><span class="line">     */</span><br><span class="line">    public long getReward(Random r) &#123;</span><br><span class="line">        double d = r.nextDouble() * maxElement;  //生成0-1间的随机数</span><br><span class="line">        while (d == 0d) &#123;</span><br><span class="line">            d = r.nextDouble() * maxElement;     //防止生成0.0</span><br><span class="line">        &#125;</span><br><span class="line">        for (EnvelopeProbability envelopeProbability : lotteryList) &#123;</span><br><span class="line">            if (envelopeProbability.isContainKey(d)) &#123;</span><br><span class="line">                return getRandomInt(envelopeProbability.getMinFen(), envelopeProbability.getMaxFen());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(&quot;概率集合设置不合理！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getMaxElement() &#123;</span><br><span class="line">        return maxElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成一个 begin 到 end 的整数</span><br><span class="line">     */</span><br><span class="line">    public static int getRandomInt(int begin, int end) &#123;</span><br><span class="line">        if (end &lt; begin) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125; else if (end == begin) &#123;</span><br><span class="line">            return begin;</span><br><span class="line">        &#125;</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        return random.nextInt(end - begin + 1) + begin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、对于未参加过活动，且已经成功接过单的用户（老用户），在首页弹窗显示红包活动&lt;br&gt;
    
    </summary>
    
      <category term="业务逻辑" scheme="http://yoursite.com/categories/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="红包" scheme="http://yoursite.com/tags/%E7%BA%A2%E5%8C%85/"/>
    
      <category term="美团" scheme="http://yoursite.com/tags/%E7%BE%8E%E5%9B%A2/"/>
    
  </entry>
  
  <entry>
    <title>SpringStateMachine状态机</title>
    <link href="http://yoursite.com/2018/08/16/java/springmvcAndSpringboot/Spring%20state%20machine%C2%A0%E6%B4%BB%E5%8A%A8%E7%8A%B6%E6%80%81%E6%9C%BA%C2%A0/"/>
    <id>http://yoursite.com/2018/08/16/java/springmvcAndSpringboot/Spring state machine 活动状态机 /</id>
    <published>2018-08-16T13:11:57.304Z</published>
    <updated>2018-08-16T13:11:57.306Z</updated>
    
    <content type="html"><![CDATA[<p>一、活动状态机配置<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.configurer; </span><br><span class="line"> </span><br><span class="line">import com.zhibi.xiuba.statemachine.EventsOnTransition; </span><br><span class="line">import com.zhibi.xiuba.statemachine.TaskEvent; </span><br><span class="line">import com.zhibi.xiuba.task.spi.domain.Task; </span><br><span class="line">import org.apache.commons.lang3.builder.ToStringBuilder; </span><br><span class="line">import org.apache.commons.lang3.builder.ToStringStyle; </span><br><span class="line">import org.slf4j.Logger; </span><br><span class="line">import org.slf4j.LoggerFactory; </span><br><span class="line">import org.springframework.aop.support.AopUtils; </span><br><span class="line">import org.springframework.beans.BeansException; </span><br><span class="line">import org.springframework.context.ApplicationContext; </span><br><span class="line">import org.springframework.context.ApplicationContextAware; </span><br><span class="line">import org.springframework.context.annotation.Bean; </span><br><span class="line">import org.springframework.context.annotation.Configuration; </span><br><span class="line">import org.springframework.core.annotation.AnnotationUtils; </span><br><span class="line">import org.springframework.statemachine.StateContext; </span><br><span class="line">import org.springframework.statemachine.StateMachine; </span><br><span class="line">import org.springframework.statemachine.action.Action; </span><br><span class="line">import org.springframework.statemachine.annotation.WithStateMachine; </span><br><span class="line">import org.springframework.statemachine.config.EnableStateMachineFactory; </span><br><span class="line">import org.springframework.statemachine.config.EnumStateMachineConfigurerAdapter; </span><br><span class="line">import org.springframework.statemachine.config.builders.StateMachineConfigurationConfigurer; </span><br><span class="line">import org.springframework.statemachine.config.builders.StateMachineStateConfigurer; </span><br><span class="line">import org.springframework.statemachine.config.builders.StateMachineTransitionConfigurer; </span><br><span class="line">import org.springframework.statemachine.listener.StateMachineListenerAdapter; </span><br><span class="line">import org.springframework.statemachine.processor.StateMachineMethodInvokerHelper; </span><br><span class="line">import org.springframework.statemachine.processor.StateMachineRuntime; </span><br><span class="line">import org.springframework.statemachine.transition.Transition; </span><br><span class="line">import org.springframework.util.ReflectionUtils; </span><br><span class="line"> </span><br><span class="line">import java.lang.reflect.Method; </span><br><span class="line">import java.util.EnumSet; </span><br><span class="line">import java.util.HashMap; </span><br><span class="line">import java.util.Map; </span><br><span class="line"> </span><br><span class="line">import static com.zhibi.xiuba.task.spi.domain.Task.TaskStatusEnum.*; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* Created by QINHE on 2017/8/14. </span><br><span class="line">*/ </span><br><span class="line">@Configuration </span><br><span class="line">@EnableStateMachineFactory(name = &quot;taskStateMachine&quot;, contextEvents = false) </span><br><span class="line">public class TaskStateMachineConfig extends EnumStateMachineConfigurerAdapter&lt;Task.TaskStatusEnum, TaskEvent&gt; implements ApplicationContextAware &#123; </span><br><span class="line"> </span><br><span class="line">private Logger logger = LoggerFactory.getLogger(this.getClass()); </span><br><span class="line"> </span><br><span class="line">private Map&lt;TaskEvent, StateMachineMethodInvokerHelper&gt; actionMap = new HashMap&lt;&gt;(); </span><br><span class="line"> </span><br><span class="line">@Override </span><br><span class="line">public void configure(StateMachineConfigurationConfigurer&lt;Task.TaskStatusEnum, TaskEvent&gt; config) throws Exception &#123; </span><br><span class="line">super.configure(config); </span><br><span class="line">config.withConfiguration().autoStartup(false).listener(new StateMachineListenerAdapter&lt;Task.TaskStatusEnum, TaskEvent&gt;() &#123; </span><br><span class="line"> </span><br><span class="line">@Override </span><br><span class="line">public void transition(Transition transition) &#123; </span><br><span class="line">logger.info(ToStringBuilder.reflectionToString(transition, ToStringStyle.MULTI_LINE_STYLE)); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">@Override </span><br><span class="line">public void stateMachineError(StateMachine stateMachine, Exception exception) &#123; </span><br><span class="line">logger.error(exception.getLocalizedMessage(), exception); </span><br><span class="line">&#125; </span><br><span class="line">&#125;); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">@Override </span><br><span class="line">public void configure(StateMachineStateConfigurer&lt;Task.TaskStatusEnum, TaskEvent&gt; states) throws Exception &#123; </span><br><span class="line">states.withStates().initial(WAITING_PAY).end(FINISHED) </span><br><span class="line">.end(CLOSED).end(DELETED).states(EnumSet.allOf(Task.TaskStatusEnum.class)); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">@Override </span><br><span class="line">public void configure(StateMachineTransitionConfigurer&lt;Task.TaskStatusEnum, TaskEvent&gt; transitions) throws Exception &#123; </span><br><span class="line">transitions </span><br><span class="line">.withExternal().source(WAITING_PAY).target(DELETED).event(TaskEvent.PAY_WITH_DELETE).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_PAY).target(WAITING_PAY).event(TaskEvent.NEED_PAY_MORE).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_PAY).target(WAITING_AUDIT).event(TaskEvent.SUBMIT_AUDIT).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_MODIFY).target(WAITING_PAY).event(TaskEvent.MODIFY_WAITING_PAY).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_MODIFY).target(WAITING_AUDIT).event(TaskEvent.MODIFY_SUBMIT_AUDIT).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_MODIFY).target(DELETED).event(TaskEvent.MODIFY_WITH_DELETE).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_AUDIT).target(WAITING_MODIFY).event(TaskEvent.AUDIT_NOT_PASS).action(buildAction()).and() </span><br><span class="line">.withExternal().source(WAITING_AUDIT).target(UNDER_WAY).event(TaskEvent.AUDIT_PASS).action(buildAction()).and() </span><br><span class="line">.withExternal().source(UNDER_WAY).target(FINISHED).event(TaskEvent.TASK_FINISH).action(buildAction()); </span><br><span class="line"> </span><br><span class="line">//TODO:任务关闭状态这里没配置 </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">@Bean </span><br><span class="line">public Action&lt;Task.TaskStatusEnum, TaskEvent&gt; buildAction() &#123; </span><br><span class="line">return new Action&lt;Task.TaskStatusEnum, TaskEvent&gt;() &#123; </span><br><span class="line">@Override </span><br><span class="line">public void execute(StateContext&lt;Task.TaskStatusEnum, TaskEvent&gt; context) &#123; </span><br><span class="line">TaskEvent event = context.getEvent(); </span><br><span class="line">StateMachineMethodInvokerHelper helper = actionMap.get(event); </span><br><span class="line">if (helper == null) &#123; </span><br><span class="line">throw new RuntimeException(&quot;not found invoke execute!!!!event is&quot; + event.name()); </span><br><span class="line">&#125; </span><br><span class="line">StateMachineRuntime runtime = new StateMachineRuntime() &#123; </span><br><span class="line">@Override </span><br><span class="line">public StateContext getStateContext() &#123; </span><br><span class="line">return context; </span><br><span class="line">&#125; </span><br><span class="line">&#125;; </span><br><span class="line">try &#123; </span><br><span class="line">helper.process(runtime); </span><br><span class="line">&#125; catch (Exception e) &#123; </span><br><span class="line">throw new RuntimeException(e); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125;; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">@Override </span><br><span class="line">public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123; </span><br><span class="line">Map&lt;String, Object&gt; map = applicationContext.getBeansWithAnnotation(WithStateMachine.class); </span><br><span class="line">for (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123; </span><br><span class="line">Object bean = entry.getValue(); </span><br><span class="line">Class&lt;?&gt; beanClass = getBeanClass(bean); </span><br><span class="line">ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() &#123; </span><br><span class="line">@Override </span><br><span class="line">public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException &#123; </span><br><span class="line">EventsOnTransition a = AnnotationUtils.findAnnotation(method, EventsOnTransition.class); </span><br><span class="line">if (a == null) &#123; </span><br><span class="line">return; </span><br><span class="line">&#125; </span><br><span class="line">TaskEvent[] taskEvent = a.events(); </span><br><span class="line">StateMachineMethodInvokerHelper helper = new StateMachineMethodInvokerHelper(bean, method); </span><br><span class="line">for (TaskEvent event : taskEvent) &#123; </span><br><span class="line">actionMap.put(event, helper); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* Gets the bean class. Will check if bean is a proxy and </span><br><span class="line">* find a class from there as target class, otherwise </span><br><span class="line">* we just get bean class. </span><br><span class="line">* </span><br><span class="line">* @param bean the bean </span><br><span class="line">* @return the bean class </span><br><span class="line">*/ </span><br><span class="line">private Class&lt;?&gt; getBeanClass(Object bean) &#123; </span><br><span class="line">Class&lt;?&gt; targetClass = AopUtils.getTargetClass(bean); </span><br><span class="line">return (targetClass != null) ? targetClass : bean.getClass(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态转变触发（trigger）-&gt;状态机启动并加载配置-&gt;guard-&gt;action-&gt;onTransition-&gt;变成新状态 </p><p> 1、项目中一般都需要打印日志，所有实体的toString()方法都是用简单的”+”，因为每”＋” 一个就会 new 一个 String 对象，这样如果系统内存小的话会暴内存。使用ToStringBuilder就可以避免暴内存这种问题。 </p><p>ToStringBuilder的reflectionToString方法： </p><p>logger.info(“请求数据：”+ToStringBuilder.reflectionToString(req)); </p><p>2、本项目没有使用原生的statemachine的listen注解@WithStateMachine 和@OnTransition(target = “UNPAID”)开发，而是自己做了状态迁移listener，该注解不使用OnTransition避免业务异常无法正常被状态机接收，状态还是会继续改变 </p><p>3、configure(StateMachineConfigurationConfigurer&lt;Task.TaskStatusEnum, TaskEvent&gt; config)方法配置状态机的默认listener </p><p>4、configure(StateMachineStateConfigurer&lt;Task.TaskStatusEnum, TaskEvent&gt; states)配置状态机的状态枚举 </p><p>5、configure(StateMachineTransitionConfigurer&lt;Task.TaskStatusEnum, TaskEvent&gt; transitions)方法配置状态机每个事件的状态迁移情况 </p><p>6、setApplicationContext 方法把所有带有那个注解的类中的所有带有另一个注解的方法找出来，加入map，key是event枚举对象 </p><p>7、private Class&lt;?&gt; getBeanClass(Object bean)方法，因为spring里面的bean都是通过spring代理的类，都是代理类对象，这个方法可以获取代理类的对象的实例对象。 </p><p>二、状态机时间发送服务 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.statemachine; </span><br><span class="line"> </span><br><span class="line">import com.zhibi.xiuba.exception.StateEventException; </span><br><span class="line">import com.zhibi.xiuba.model.ControllerResult; </span><br><span class="line">import com.zhibi.xiuba.task.spi.domain.ShowkerTask; </span><br><span class="line">import com.zhibi.xiuba.task.spi.domain.Task; </span><br><span class="line">import com.zhibi.xiuba.task.spi.enums.OperatorEnum; </span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired; </span><br><span class="line">import org.springframework.messaging.support.MessageBuilder; </span><br><span class="line">import org.springframework.statemachine.StateMachine; </span><br><span class="line">import org.springframework.statemachine.access.StateMachineAccess; </span><br><span class="line">import org.springframework.statemachine.config.StateMachineFactory; </span><br><span class="line">import org.springframework.statemachine.support.DefaultStateMachineContext; </span><br><span class="line">import org.springframework.stereotype.Service; </span><br><span class="line"> </span><br><span class="line">import java.util.HashMap; </span><br><span class="line">import java.util.List; </span><br><span class="line">import java.util.Map; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* 状态机事件发送服务 </span><br><span class="line">* &lt;p&gt; </span><br><span class="line">* 请使用本服务发送事件已保证逻辑正确性 </span><br><span class="line">* Created by RUAN on 2017/8/16. </span><br><span class="line">*/ </span><br><span class="line">@Service </span><br><span class="line">public class StateMachineInvokeService implements IStateMachineInvokeService &#123; </span><br><span class="line"> </span><br><span class="line">@Autowired </span><br><span class="line">private StateMachineFactory&lt;Task.TaskStatusEnum, TaskEvent&gt; taskStateMachine; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@Autowired </span><br><span class="line">private StateMachineFactory&lt;ShowkerTask.StatusEnum, ShowkerTaskEvent&gt; showKerTaskStateMachine; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* 发送活动事件 </span><br><span class="line">* </span><br><span class="line">* @param event活动事件 </span><br><span class="line">* @param originalTask 原始活动对象，未变更前数据 </span><br><span class="line">* @param params 扩展参数 </span><br><span class="line">*/ </span><br><span class="line">@Override </span><br><span class="line">public void sendTaskEvent(TaskEvent event, Task originalTask, OperatorEnum operator, Map&lt;String, Object&gt; params) &#123; </span><br><span class="line">if (params == null) &#123; </span><br><span class="line">params = new HashMap&lt;&gt;(); </span><br><span class="line">&#125; </span><br><span class="line">params.put(IStateMachineConstants.OPERATOR, operator.getCode()); </span><br><span class="line">sendTaskEvent(event, originalTask, params); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* 发送活动事件 </span><br><span class="line">* </span><br><span class="line">* @param event活动事件 </span><br><span class="line">* @param originalTask 原始活动对象，未变更前数据 </span><br><span class="line">* @param params 扩展参数 </span><br><span class="line">*/ </span><br><span class="line">@Override </span><br><span class="line">public void sendTaskEvent(TaskEvent event, Task originalTask, Map&lt;String, Object&gt; params) &#123; </span><br><span class="line">StateMachine&lt;Task.TaskStatusEnum, TaskEvent&gt; stateMachine = taskStateMachine.getStateMachine(&quot;TaskStateMachine:&quot; + originalTask.getId()); </span><br><span class="line">String taskStatus = originalTask.getTaskStatus(); </span><br><span class="line">Task.TaskStatusEnum statusEnum = Task.TaskStatusEnum.getEnumByCode(taskStatus); </span><br><span class="line">if (statusEnum == null) &#123; </span><br><span class="line">throw new RuntimeException(&quot;not found task status:&quot; + taskStatus); </span><br><span class="line">&#125; </span><br><span class="line">stateMachine.stop(); </span><br><span class="line">//启动之前恢复状态机的状态 </span><br><span class="line">List&lt;StateMachineAccess&lt;Task.TaskStatusEnum, TaskEvent&gt;&gt; withAllRegions = stateMachine.getStateMachineAccessor().withAllRegions(); </span><br><span class="line">for (StateMachineAccess&lt;Task.TaskStatusEnum, TaskEvent&gt; a : withAllRegions) &#123; </span><br><span class="line">a.resetStateMachine(new DefaultStateMachineContext&lt;&gt;(statusEnum, null, null, null, null, stateMachine.getId())); </span><br><span class="line">&#125; </span><br><span class="line">stateMachine.start(); </span><br><span class="line">stateMachine.sendEvent(MessageBuilder.withPayload(event).setHeader(IStateMachineConstants.TASK_OBJECT, originalTask).copyHeaders(params).build()); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* 发送拿手任务事件 </span><br><span class="line">* </span><br><span class="line">* @param event拿手任务事件 </span><br><span class="line">* @param originalTask 原始拿手任务对象，未变更前数据 </span><br><span class="line">* @param params 扩展参数 </span><br><span class="line">*/ </span><br><span class="line">@Override </span><br><span class="line">public void sendShowKerTaskEvent(ShowkerTaskEvent event, ShowkerTask originalTask, OperatorEnum operatorEnum, Map&lt;String, Object&gt; params) &#123; </span><br><span class="line">if (params == null) &#123; </span><br><span class="line">params = new HashMap&lt;&gt;(); </span><br><span class="line">&#125; </span><br><span class="line">params.put(IStateMachineConstants.OPERATOR, operatorEnum.getCode()); </span><br><span class="line">sendShowKerTaskEvent(event, originalTask, params); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line">* 发送拿手任务事件 </span><br><span class="line">* </span><br><span class="line">* @param event拿手任务事件 </span><br><span class="line">* @param originalTask 原始拿手任务对象，未变更前数据 </span><br><span class="line">* @param params 扩展参数 </span><br><span class="line">*/ </span><br><span class="line">@Override </span><br><span class="line">public void sendShowKerTaskEvent(ShowkerTaskEvent event, ShowkerTask originalTask, Map&lt;String, Object&gt; params) &#123; </span><br><span class="line">StateMachine&lt;ShowkerTask.StatusEnum, ShowkerTaskEvent&gt; stateMachine = showKerTaskStateMachine.getStateMachine(&quot;ShowkerTaskStateMachine:&quot; + originalTask.getId()); </span><br><span class="line">String taskStatus = originalTask.getStatus(); </span><br><span class="line">ShowkerTask.StatusEnum statusEnum = ShowkerTask.StatusEnum.getEnumByCode(taskStatus); </span><br><span class="line">if (statusEnum == null) &#123; </span><br><span class="line">throw new RuntimeException(&quot;not found showker task status:&quot; + taskStatus); </span><br><span class="line">&#125; </span><br><span class="line">stateMachine.stop(); </span><br><span class="line">//启动之前恢复状态机的状态 </span><br><span class="line">List&lt;StateMachineAccess&lt;ShowkerTask.StatusEnum, ShowkerTaskEvent&gt;&gt; withAllRegions = stateMachine.getStateMachineAccessor().withAllRegions(); </span><br><span class="line">for (StateMachineAccess&lt;ShowkerTask.StatusEnum, ShowkerTaskEvent&gt; a : withAllRegions) &#123; </span><br><span class="line">a.resetStateMachine(new DefaultStateMachineContext&lt;&gt;(statusEnum, null, null, null, null, stateMachine.getId())); </span><br><span class="line">&#125; </span><br><span class="line">stateMachine.start(); </span><br><span class="line">if (!stateMachine.sendEvent(MessageBuilder.withPayload(event).setHeader(IStateMachineConstants.TASK_OBJECT, originalTask).copyHeaders(params).build())) &#123; </span><br><span class="line">throw new StateEventException(ControllerResult.build(false, &quot;stateMachine_not_executed&quot;, &quot;状态机未调用&quot;)); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、状态迁移处理器 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">package com.zhibi.xiuba.statemachine; </span><br><span class="line"> </span><br><span class="line">import com.zhibi.xiuba.job.IJobType; </span><br><span class="line">import com.zhibi.xiuba.service.IJobService; </span><br><span class="line">import com.zhibi.xiuba.service.ITaskService; </span><br><span class="line">import com.zhibi.xiuba.task.spi.domain.Task; </span><br><span class="line">import com.zhibi.xiuba.task.spi.domain.TaskOpLog; </span><br><span class="line">import com.zhibi.xiuba.task.spi.enums.OperatorEnum; </span><br><span class="line">import com.zhibi.xiuba.utils.StringUtils; </span><br><span class="line">import org.springframework.statemachine.StateContext; </span><br><span class="line">import org.springframework.statemachine.annotation.EventHeaders; </span><br><span class="line">import org.springframework.statemachine.annotation.WithStateMachine; </span><br><span class="line"> </span><br><span class="line">import java.util.Calendar; </span><br><span class="line">import java.util.Map; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line"> </span><br><span class="line">* 活动状态迁移处理器 </span><br><span class="line"> </span><br><span class="line">* Created by RUAN on 2017/8/15. </span><br><span class="line"> </span><br><span class="line">* </span><br><span class="line"> </span><br><span class="line">* @see com.zhibi.xiuba.configurer.TaskStateMachineConfig </span><br><span class="line"> </span><br><span class="line">*/ </span><br><span class="line">@WithStateMachine(name = &quot;taskStateMachine&quot;) </span><br><span class="line">public class TaskTransitionHandler &#123; </span><br><span class="line"> </span><br><span class="line">private final ITaskService taskService; </span><br><span class="line"> </span><br><span class="line">private final IJobService jobService; </span><br><span class="line"> </span><br><span class="line">public TaskTransitionHandler(ITaskService taskService, </span><br><span class="line">IJobService jobService) &#123; </span><br><span class="line">this.taskService = taskService; </span><br><span class="line">this.jobService = jobService; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line"> </span><br><span class="line">* 提交审核 </span><br><span class="line"> </span><br><span class="line">*/ </span><br><span class="line">@SuppressWarnings(&quot;Duplicates&quot;) </span><br><span class="line">@EventsOnTransition(events = &#123;TaskEvent.SUBMIT_AUDIT&#125;) </span><br><span class="line">public void submitAudit(@EventHeaders Map&lt;String, Object&gt; headers, </span><br><span class="line">StateContext&lt;Task.TaskStatusEnum, TaskEvent&gt; context) &#123; </span><br><span class="line">try &#123; </span><br><span class="line">OperatorEnum operator = null; </span><br><span class="line">if (StringUtils.isNotBlank((String) context.getMessageHeaders().get(IStateMachineConstants.OPERATOR))) &#123; </span><br><span class="line">//传参中带有操作人的 </span><br><span class="line"> </span><br><span class="line">operator = OperatorEnum.getEnumByCode((String) context.getMessageHeaders().get(IStateMachineConstants.OPERATOR)); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">Task task = (Task) headers.get(IStateMachineConstants.TASK_OBJECT); </span><br><span class="line">Long fee = (Long) headers.get(&quot;fee&quot;); </span><br><span class="line">if (task.getMarginPaid() == null) &#123; </span><br><span class="line">task.setMarginPaid(0L); </span><br><span class="line">&#125; </span><br><span class="line">TaskOpLog.TypeEnum typeEnum; </span><br><span class="line">if (task.getMarginPaid() &lt;= 0) &#123; </span><br><span class="line">typeEnum = TaskOpLog.TypeEnum.FEE_PAY; </span><br><span class="line">&#125; else &#123; </span><br><span class="line">typeEnum = TaskOpLog.TypeEnum.FEE_REPAY; </span><br><span class="line">&#125; </span><br><span class="line">if (task.getPromotionExpensesPaid() == null) &#123; </span><br><span class="line">task.setPromotionExpensesPaid(0L); </span><br><span class="line">&#125; </span><br><span class="line">if (task.getMarginSurplus() == null) &#123; </span><br><span class="line">task.setMarginSurplus(0L); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">task.setMarginPaid(fee - (task.getPromotionExpensesNeed() - task.getPromotionExpensesPaid()) + task.getMarginPaid()); </span><br><span class="line">task.setMarginSurplus(task.getMarginPaid() - task.getMarginSurplus()); </span><br><span class="line">task.setPromotionExpensesPaid(task.getPromotionExpensesNeed()); </span><br><span class="line">task.setTaskStatus(context.getTarget().getId().getCode()); </span><br><span class="line">taskService.save(task); </span><br><span class="line">taskService.createLog(task.getId(), typeEnum, operator); </span><br><span class="line">&#125; catch (Exception e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">throw new RuntimeException(e.getMessage()); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line"> </span><br><span class="line">* 待补充保证金 </span><br><span class="line"> </span><br><span class="line">*/ </span><br><span class="line">@SuppressWarnings(&quot;Duplicates&quot;) </span><br><span class="line">@EventsOnTransition(events = &#123;TaskEvent.NEED_PAY_MORE&#125;) </span><br><span class="line">public void needPayMore(@EventHeaders Map&lt;String, Object&gt; headers, </span><br><span class="line">StateContext&lt;Task.TaskStatusEnum, TaskEvent&gt; context) &#123; </span><br><span class="line">try &#123; </span><br><span class="line">OperatorEnum operator = null; </span><br><span class="line">if (StringUtils.isNotBlank((String) context.getMessageHeaders().get(IStateMachineConstants.OPERATOR))) &#123; </span><br><span class="line">//传参中带有操作人的 </span><br><span class="line"> </span><br><span class="line">operator = OperatorEnum.getEnumByCode((String) context.getMessageHeaders().get(IStateMachineConstants.OPERATOR)); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">Task task = (Task) headers.get(IStateMachineConstants.TASK_OBJECT); </span><br><span class="line">Long fee = (Long) headers.get(&quot;fee&quot;); </span><br><span class="line">if (task.getMarginPaid() == null) &#123; </span><br><span class="line">task.setMarginPaid(0L); </span><br><span class="line">&#125; </span><br><span class="line">TaskOpLog.TypeEnum typeEnum; </span><br><span class="line">if (task.getMarginPaid() &lt;= 0) &#123; </span><br><span class="line">typeEnum = TaskOpLog.TypeEnum.FEE_PAY; </span><br><span class="line">&#125; else &#123; </span><br><span class="line">typeEnum = TaskOpLog.TypeEnum.FEE_REPAY; </span><br><span class="line">&#125; </span><br><span class="line">if (task.getPromotionExpensesPaid() == null) &#123; </span><br><span class="line">task.setPromotionExpensesPaid(0L); </span><br><span class="line">&#125; </span><br><span class="line">if (task.getMarginSurplus() == null) &#123; </span><br><span class="line">task.setMarginSurplus(0L); </span><br><span class="line">&#125; </span><br><span class="line">if (fee &lt;= (task.getPromotionExpensesNeed() - task.getPromotionExpensesPaid())) &#123; </span><br><span class="line">task.setPromotionExpensesPaid(fee + task.getPromotionExpensesPaid()); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">task.setMarginPaid(fee - (task.getPromotionExpensesNeed() - task.getPromotionExpensesPaid()) + task.getMarginPaid()); </span><br><span class="line">task.setMarginSurplus(task.getMarginPaid() - task.getMarginSurplus()); </span><br><span class="line">task.setPromotionExpensesPaid(task.getPromotionExpensesNeed()); </span><br><span class="line">&#125; </span><br><span class="line">task.setTaskStatus(context.getTarget().getId().getCode()); </span><br><span class="line">taskService.save(task); </span><br><span class="line">taskService.createLog(task.getId(), typeEnum, operator); </span><br><span class="line">&#125; catch (Exception e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">throw new RuntimeException(e.getMessage()); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/** </span><br><span class="line"> </span><br><span class="line">* 任务完成 </span><br><span class="line"> </span><br><span class="line">*/ </span><br><span class="line">@EventsOnTransition(events = TaskEvent.TASK_FINISH) </span><br><span class="line">public void taskFinish(@EventHeaders Map&lt;String, Object&gt; headers, </span><br><span class="line">StateContext&lt;Task.TaskStatusEnum, TaskEvent&gt; context) &#123; </span><br><span class="line">try &#123; </span><br><span class="line">OperatorEnum operator = null; </span><br><span class="line">if (StringUtils.isNotBlank((String) context.getMessageHeaders().get(IStateMachineConstants.OPERATOR))) &#123; </span><br><span class="line">//传参中带有操作人的 </span><br><span class="line"> </span><br><span class="line">operator = OperatorEnum.getEnumByCode((String) context.getMessageHeaders().get(IStateMachineConstants.OPERATOR)); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">Task task = (Task) headers.get(IStateMachineConstants.TASK_OBJECT); </span><br><span class="line">task.setTaskStatus(context.getTarget().getId().getCode()); </span><br><span class="line">task.setSettlementStatus(Task.SettlementStatusEnum.WAITING_SETTLEMENT.getCode()); </span><br><span class="line">Calendar calendar = Calendar.getInstance(); </span><br><span class="line">task.setFinishTime(calendar.getTime()); </span><br><span class="line">taskService.save(task); </span><br><span class="line">taskService.createLog(task.getId(), TaskOpLog.TypeEnum.FINISH, operator); </span><br><span class="line">taskService.moveToEsAndIndexCacheHistory(task); </span><br><span class="line">jobService.submitTaskJob(task.getId(), IJobType.TASK_AUTO_AUDIT_SHOWKER, 48); </span><br><span class="line">&#125; catch (Exception e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">throw new RuntimeException(e.getMessage()); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、活动状态机配置&lt;br&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="状态机" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器基础知识</title>
    <link href="http://yoursite.com/2018/08/15/java/javaweb%E6%8A%80%E6%9C%AF/Docker%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/08/15/java/javaweb技术/Docker容器基础知识/</id>
    <published>2018-08-15T10:35:57.317Z</published>
    <updated>2018-08-15T10:35:57.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、增加linux的dns（永久）"><a href="#一、增加linux的dns（永久）" class="headerlink" title="一、增加linux的dns（永久）"></a>一、增加linux的dns（永久）</h1><p>##1、运行命令：<br> <a id="more"></a><br> cd /etc/sysconfig/network-scripts/<br> ls </p><p>##2、找到该目录下的网卡配置文件如:ifcfg-ens32，在其中添加三行，如果文件中已经有了DNS,就先删除再添加： </p><p> PEERD=no<br> DNS1=8.8.8.8<br> DNS2=114.144.114.114 </p><p>##3、添加完之后运行命令： </p><p> #重启网络服务，使更改生效<br> service network restart </p><p>##4、重启系统看dns是否还存在 </p><h1 id="二、docker安装"><a href="#二、docker安装" class="headerlink" title="二、docker安装"></a>二、docker安装</h1><p>##1、用yum国内源<br>备份：mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a> </p><p>##2、添加docker yum源<br>sudo yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a> </p><p>之后运行yum makecache生成缓存 </p><p>##3、删除以前版本的docker<br>删除上次的docker目录<br>rm -rf /var/lib/docker/<br>rm -rf /var/run/docker/ </p><p>sudo yum remove docker docker-common docker-selinux docker-engine </p><p>##4、用yum安装<br>执行以下命令安装依赖包：<br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>安装docker-ce<br>sudo yum install docker-ce </p><p>##5、启动 Docker CE<br>sudo systemctl enable docker<br>sudo systemctl start docker<br>— sudo：是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具<br>— systemctl：是一个系统管理守护进程、工具和库的集合，用于取代System V、service和chkconfig命令，初始进程主要负责控制systemd系统和服务管理器。通过Systemctl –help可以看到该命令主要分为：查询或发送控制命令给systemd服务，管理单元服务的命令，服务文件的相关命令，任务、环境、快照相关命令，systemd服务的配置重载，系统开机关机相关的命令 </p><p>##6、建立 docker 用户组<br>默认情况下， docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统 上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。<br>–建立 docker 组：<br>sudo groupadd docker<br>–将当前用户加入 docker 组：<br>sudo usermod -aG docker  qinhe  退出当前终端并重新登录，进行如下测试。  </p><p>##7、重启 docker 服务<br>sudo service docker restart </p><p>切换当前会话到新 group 或者重启 X 会话<br>newgrp - docker </p><p>##8、镜像加速器<br>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国<br>内很多云服务商都提供了国内加速器服务，例如：<br><a href="https://cr.console.aliyun.com/?spm=a2c4e.11153940.blogcont29941.9.538f69d6xKBg35#/accelerator" target="_blank" rel="noopener">https://cr.console.aliyun.com/?spm=a2c4e.11153940.blogcont29941.9.538f69d6xKBg35#/accelerator</a> </p><p>如何配置镜像加速器<br>针对Docker客户端版本大于1.10.0的用户<br>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器： </p><p>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href="https://cup2aba1.mirror.aliyuncs.com&quot;]" target="_blank" rel="noopener">https://cup2aba1.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker </p><p>上面配置可能是错的： </p><p>用这个：<br>curl -sSL <a href="https://get.daocloud.io/daotools/set_mirror.sh" target="_blank" rel="noopener">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s <a href="https://cup2aba1.mirror.aliyuncs.com" target="_blank" rel="noopener">https://cup2aba1.mirror.aliyuncs.com</a> </p><p>sudo sed -i “s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=<a href="https://cup2aba1.mirror.aliyuncs.com|g&quot;" target="_blank" rel="noopener">https://cup2aba1.mirror.aliyuncs.com|g&quot;</a> /etc/systemd/system/docker.service<br>sudo systemctl daemon-reload<br>sudo service docker restart </p><p>在命令行 执行 docker info ，如果从结果中看到了如下内容，说明配置成功。  </p><p><img src="https://img-blog.csdn.net/20180809220515121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>##9、测试 Docker 是否安装正确<br>docker run hello-world </p><blockquote><p>Unable to find image ‘hello-world:latest’ locally<br>latest: Pulling from library/hello-world<br>ca4f61b1923c: Pull complete<br>Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c<br>Status: Downloaded newer image for hello-world:latest<br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br>To generate this message, Docker took the following steps: </p><ol><li>The Docker client contacted the Docker daemon. </li><li>The Docker daemon pulled the “hello-world” image from the Docker Hub.<br>(amd64) </li><li>The Docker daemon created a new container from that image which runs the<br>executable that produces the output you are currently reading. </li><li>The Docker daemon streamed that output to the Docker client, which sent it<br>to your terminal.<br>To try something more ambitious, you can run an Ubuntu container with:<br>$ docker run -it ubuntu bash<br>Share images, automate workflows, and more with a free Docker ID:<br><a href="https://cloud.docker.com/" target="_blank" rel="noopener">https://cloud.docker.com/</a><br>For more examples and ideas, visit:<br><a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">https://docs.docker.com/engine/userguide/</a><br>若能正常输出以上信息，则说明安装成功。 </li></ol></blockquote><p>用阿里云镜像会很慢，可以用这个：<br><a href="http://hub-mirror.c.163.com/" target="_blank" rel="noopener">http://hub-mirror.c.163.com/</a> </p><p>##10、配置阿里云镜像仓库<br>创建阿里云镜像仓库： </p><p> <img src="https://img-blog.csdn.net/20180809220719961?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>–登录阿里云docker registry:<br>  sudo docker login <a href="mailto:--username=qinhelili@163.com" target="_blank" rel="noopener">--username=qinhelili@163.com</a> registry.cn-hangzhou.aliyuncs.com<br>  登录registry的用户名是您的阿里云账号全名，密码是您开通服务时设置的密码。<br>  你可以在镜像管理首页点击右上角按钮修改docker login密码。 </p><p>–将镜像推送到registry：<br>  sudo docker login <a href="mailto:--username=qinhelili@163.com" target="_blank" rel="noopener">--username=qinhelili@163.com</a> registry.cn-hangzhou.aliyuncs.com<br>  sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository:[镜像版本号]<br>  sudo docker push registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository:[镜像版本号]<br>  其中[ImageId],[镜像版本号]请你根据自己的镜像信息进行填写。 </p><p>–从registry中拉取镜像：<br>  sudo docker pull registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository:[镜像版本号] </p><p>–注意您的网络环境<br>  从ECS推送镜像时，可以选择走内网，速度将大大提升，并且将不会损耗您的公网流量。<br>     如果您申请的机器是在经典网络，请使用 registry-internal.cn-hangzhou.aliyuncs.com 作为registry的域名登录, 并作为镜像名空间前缀<br>    如果您申请的机器是在vpc网络的，请使用 registry-vpc.cn-hangzhou.aliyuncs.com 作为registry的域名登录, 并作为镜像名空间前缀 </p><p>–sample:<br>     使用docker tag重命名镜像，并将它通过推送至registry：<br>    ①、sudo docker login <a href="mailto:--username=qinhelili@163.com" target="_blank" rel="noopener">--username=qinhelili@163.com</a> registry.cn-hangzhou.aliyuncs.com<br>        输入密码<br>    ②、sudo docker images<br>    <img src="https://img-blog.csdn.net/20180809220841513?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">    </p><p>③、tag<br>        sudo docker tag hello-world registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository/hello-world:he<br><img src="https://img-blog.csdn.net/20180809221034490?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>④、push<br>        sudo docker push registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository/hello-world:he<br>        出错：仓库名不对<br><img src="https://img-blog.csdn.net/20180809221106226?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>⑤、tag<br>        sudo docker tag hello-world registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository:he </p><p><img src="https://img-blog.csdn.net/20180809221203132?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>⑥、push<br>        sudo docker push registry.cn-hangzhou.aliyuncs.com/qinhe/qinhe_repository:he<br>        成功<br><img src="https://img-blog.csdn.net/20180809221227469?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>⑦、阿里云仓库 </p><p><img src="https://img-blog.csdn.net/20180809221249518?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>##11、pull centos7<br>    docker pull centos:7 </p><p>##12、run centos7 </p><p>docker run -it –rm centos:7 bash<br>    docker run 就是运行容器的命令，具体格式我们会在 容器 一节进行详细讲解，我们这里简<br>    要的说明一下上面用到的参数。<br>    -it ：这是两个参数，一个是 -i ：交互式操作，一个是 -t 终端。我们这里打算进入bash 执行一些命令并查看返回结果，因此我们需要交互式终端。<br>    –rm ：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm 。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。<br>    bash ：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash 。进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat/etc/os-release ，这是 Linux 常用的查看当前系统版本的命令，最后我们通过 exit 退出了这个容器。 </p><blockquote><p>-d: 后台运行容器，并返回容器ID；某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐 大家使用 docker exec 命令<br> –name=”nginx-lb”: 为容器指定一个名称；<br>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；<br> –dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；<br> -h “mars”: 指定容器的hostname；<br> -e username=”ritchie”: 设置环境变量；<br> –env-file=[]: 从指定文件读入环境变量；<br> –cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；<br> -m :设置容器使用内存最大值；<br> –net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；<br> –link=[]: 添加链接到另一个容器；<br> –expose=[]: 开放一个端口或一组端口<br>docker run -d –name centos centos:7<br>运行了就关闭了，因为 Docker容器后台运行,就必须有一个前台进程.容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的<br>可以这样：<br>docker run -itd –name centos centos:7<br>或者：<br>docker run -it –name centos centos:7<br>然后ctrl+Q+P 退出交互式终端但不退出容器<br>或者：<br>docker run -it –name centos centos:7 ping 127.0.0.1<br>查看日志：<br>docker logs -ft –tail=1  37 </p></blockquote><p><img src="https://img-blog.csdn.net/20180809221344578?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"> </p><p>#四、如何通过Dockerfile快速构建镜像<br>接下来，我们通过构建一个Tomcat镜像，来演示Dockerfile的使用方法，当然前提是你的电脑安装了Docker环境，如何安装Docker环境就不在此赘述了。 </p><p>##1、创建一个Dockerfile<br>Dockerfile命名必须为“Dockerfile”，Docker镜像构建时，会查找指定目录中的Dockerfile。 </p><p>##2、编写Dockerfile<br>（1）环境配置<br>FROM ubuntu:14.04<br>通过FROM指令，Docker编译程序能够知道通过哪个基础镜像执行来进行编译。所有的Dockerfile都必须以FROM指令开始。通过该指令，我们相当于有了一个最基本的Ubuntu系统。<br>（2）其他环境配置<br>MAINTAINER example <a href="mailto:&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#64;&#x67;&#111;&#x6f;&#100;&#x72;&#x61;&#105;&#110;&#46;&#x63;&#111;&#109;" target="_blank" rel="noopener">&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#64;&#x67;&#111;&#x6f;&#100;&#x72;&#x61;&#105;&#110;&#46;&#x63;&#111;&#109;</a><br>另外我们需要指定时区，否则我们做出的镜像可能会跟当前时间不符。<br>RUN echo “Asia/Shanghai” &gt; /etc/timezone;dpkg-reconfigure -f noninteractive tzdata<br>我们可以像在电脑上安装Tomcat一样，把Tomcat安装在Docker容器中。<br>（3）Tomcat必要软件安装。<br>我们此时使用的Ubuntu系统其实是很简陋的系统，上面很多系统都没有。所以我先安装一些必要的软件。<br>RUN apt-get update &amp;&amp; apt-get install -y curl vim net-tools &amp;&amp; \<br>rm -rf /var/lib/apt/lists/* &amp;&amp; mkdir -p /app<br>RUN指令用来在Docker的编译环境中运行指定命令。这里我安装了curl、vim、net-tools，其中curl用来获取java和tomcat的安装包，vim和net-tools用来调试，并创建了/app目录。<br>（4）指定工作目录<br>使用 WORKDIR /app 可以将工作目录定位到/app 目录下<br>（5）获取安装软件<br>我们使用第 （3）步安装的 curl 工具来获取安装包。<br>RUN  curl -L ‘<a href="http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz&#39;" target="_blank" rel="noopener">http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz&#39;</a> -H ‘Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile’ | tar -xz \<br>    &amp;&amp; curl -L ‘<a href="http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz&#39;" target="_blank" rel="noopener">http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz&#39;</a> | tar -xz<br>以上命令将会从指定地址下载安装包，并解压到当前目录（上一步我们指定了工作空间为/app，所以会解压到此目录下）<br>（6）指定运行脚本<br>截止到上一步，我们已经将需要的准备工作都做好了，剩下的还有Java环境变量的设置，Tomcat环境变量设置（非必须）和Tomcat的启动。<br>COPY tomcat7.sh /app/tomcat7.sh<br>RUN chmod +x /app/tomcat7.sh<br>上面的两行命令会将与Dockerfile同级目录的tomcat7.sh文件上传到docker容器中的/app目录下，并且给该文件赋予可执行的权限。<br>看一眼该脚本的内容便一目了然了。<br>Java环境变量配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/app/jdk1.7.0_65 </span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH </span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar # Tomcat环境变量配置 </span><br><span class="line">export TOMCAT_HOME=/app/apache-tomcat-7.0.8 </span><br><span class="line">export PATH=$TOMCAT_HOME/bin:$PATH # 启动 Tomcat </span><br><span class="line">exec $TOMCAT_HOME/bin/catalina.sh run</span><br></pre></td></tr></table></figure><p>（7）指定端口<br>EXPOSE 8080<br>通常情况下，Tomcat启动后会监听8080端口，在容器中也一样。<br>EXPOSE指令用于标明，这个镜像中的应用将会侦听某个端口，并且希望能将这个端口映射到主机的网络界面上<br>（8）指定脚本的运行<br>至此，我们要做的准备工作就做完了。使用下面这条命令，运行我们在第6步创建的脚本，一个简单的Tomcat的Dockerfile就编写完成了。<br>ENTRYPOINT [“/app/tomcat7.sh”]<br>ENTRYPOINT 用于标明一个镜像作为容器运行时，最后要执行的程序或命令。 </p><p>##3.构建镜像<br>进入Dockerfile所在目录，运行命令 docker build -t mytomcat .(注意最后有个点用来表示当前目录，初次构建速度会比较慢，需要多等一会。) </p><p><img src="https://img-blog.csdn.net/20180809221841415?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>出现如下信息就构建成功了 </p><p><img src="https://img-blog.csdn.net/20180809221900753?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>##4.运行Docker容器<br>docker run -i -t -p 5000:8080 mytom<br>其中，docker run 用于运行一个容器<br>• -t 在容器指定一个伪终端或者终端;<br>• -i 进行命令交互;<br>• -p 匹配镜像内的网络端口号,即我们可以通过宿主机中访问5000端口来达到访问容器8080端口的目的。 </p><p>##5.查看构建好的镜像和运行的容器<br>docker images #查看镜像<br><img src="https://img-blog.csdn.net/20180809221945480?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>docker ps -a #查看所有的容器<br><img src="https://img-blog.csdn.net/20180809222005522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>##6.查看服务是否运行<br>在宿主机中我们输入localhost:5000访问，出现如下界面，表示Tomcat成功运行。 </p><p><img src="https://img-blog.csdn.net/20180809222244245?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>至此，我们就成功的创建了一个Tomcat镜像了，当然这里只是为了简单演示，所以镜像做的比较简单，官方的Tomcat镜像比这复杂的多，在熟悉了Dockerfile后可以去看看官方的做法。 </p><p>##7.其他<br>在做镜像的时候有那么多步骤，根本不可能一次将所有的步骤完成，所以，这里教给大家一个小技巧。<br>在编写完Dockerfile到第二步的时候，其实可以先使用一个脚本先运行着，然后进入容器内部进行操作。笔者在编写Dockerfile时先使用如下命令<br>COPY run.sh /app/run.sh<br>RUN chmod +x /app/run.sh<br>ENTRYPOINT [“/app/run.sh”]<br>run.sh脚本的内容如下 </p><p>#!/bin/bash sleep 15 while true do echo “true” sleep 180 done<br>其实就是一段死循环代码代替原有的tomcat7.sh，接着就可以build和run我们的容器了。容器运行起来后使用docker exec -it container_id bash 进入docker容器。此时就和我们平时装软件的方式一样了，做完一个步骤，在Dockerfile中记录一条，这样Dockerfile也就做出来了。(ps:exit退出容器。)<br>特别注意的一点，如果做好镜像以后，在镜像中有需要保存的数据（持久化目录）需要我们在Dockerfile中指定持久化目录。为了能够保存（持久化）数据以及共享容器间的数据，Docker提出了Volume的概念。简单来说，Volume就是目录或者文件，它可以绕过默认的联合文件系统，而以正常的文件或者目录的形式存在于宿主机上。并且我们运行容器的时候需要使用使用 -v 来声明Volume，如：<br>docker run -it -v /home/dock/logs:/usr/logs tomcat /bin/bash<br>冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径，这样容器内更改的数据就被写到宿主机上了。          </p><p>#五、dockerFile指令</p><p>FROM </p><p>功能为指定基础镜像，并且必须是第一条指令。<br>如果不以任何镜像为基础，那么写法为：FROM scratch。<br>同时意味着接下来所写的指令将作为镜像的第一层开始 </p><p>语法：<br>FROM <image><br>FROM <image>:<tag><br>FROM <image>:<digest><br>三种写法，其中<tag>和<digest> 是可选项，如果没有选择，那么默认值为latest </digest></tag></digest></image></tag></image></image></p><p>RUN<br>功能为运行指定的命令<br>RUN命令有两种格式 </p><ol><li>RUN <command> </li><li>RUN [“executable”, “param1”, “param2”]<br>第一种后边直接跟shell命令<br>• 在linux操作系统上默认 /bin/sh -c<br>• 在windows操作系统上默认 cmd /S /C<br>第二种是类似于函数调用。<br>可将executable理解成为可执行文件，后面就是两个参数。 </li></ol><p>两种写法比对：<br>• RUN /bin/bash -c ‘source $HOME/.bashrc; echo $HOME<br>• RUN [“/bin/bash”, “-c”, “echo hello”]<br>注意：多行命令不要写多个RUN，原因是Dockerfile中每一个指令都会建立一层.<br>多少个RUN就构建了多少层镜像，会造成镜像的臃肿、多层，不仅仅增加了构件部署的时间，还容易出错。<br>RUN书写时的换行符是\ </p><p>CMD </p><p>功能为容器启动时要运行的命令<br>语法有三种写法 </p><ol><li>CMD [“executable”,”param1”,”param2”] </li><li>CMD [“param1”,”param2”] </li><li>CMD command param1 param2<br>第三种比较好理解了，就时shell这种执行方式和写法<br>第一种和第二种其实都是可执行文件加上参数的形式 </li></ol><p>举例说明两种写法：<br>• CMD [ “sh”, “-c”, “echo $HOME”<br>• CMD [ “echo”, “$HOME” ]<br>补充细节：这里边包括参数的一定要用双引号，就是”,不能是单引号。千万不能写成单引号。<br>原因是参数传递后，docker解析的是一个JSON array </p><p>RUN &amp; CMD<br>不要把RUN和CMD搞混了。<br>RUN是构件容器时就运行的命令以及提交运行结果<br>CMD是容器启动时执行的命令，在构件时并不运行，构件时紧紧指定了这个命令到底是个什么样子 </p><p>LABEL<br>功能是为镜像指定标签 </p><p>语法：<br>LABEL <key>=<value> <key>=<value> <key>=<value> …<br>一个Dockerfile种可以有多个LABEL，如下：<br>LABEL “com.example.vendor”=”ACME Incorporated”<br>LABEL com.example.label-with-value=”foo”<br>LABEL version=”1.0”<br>LABEL description=”This text illustrates \<br>that label-values can span multiple lines.”<br>但是并不建议这样写，最好就写成一行，如太长需要换行的话则使用\符号<br>如下：<br>LABEL multi.label1=”value1” \<br>multi.label2=”value2” \<br>other=”value3” </value></key></value></key></value></key></p><p>说明：LABEL会继承基础镜像种的LABEL，如遇到key相同，则值覆盖 </p><p>MAINTAINER<br>指定作者<br>语法：<br>MAINTAINER <name> </name></p><p>EXPOSE<br>功能为暴漏容器运行时的监听端口给外部<br>但是EXPOSE并不会使容器访问主机的端口<br>如果想使得容器与主机的端口有映射关系，必须在容器启动的时候加上 -P参数 </p><p>ENV<br>功能为设置环境变量<br>语法有两种 </p><ol><li>ENV <key> <value> </value></key></li><li>ENV <key>=<value> …<br>两者的区别就是第一种是一次设置一个，第二种是一次设置多个 </value></key></li></ol><p>ADD<br>一个复制命令，把文件复制到景象中。<br>如果把虚拟机与容器想象成两台linux服务器的话，那么这个命令就类似于scp，只是scp需要加用户名和密码的权限验证，而ADD不用。 </p><p>语法如下： </p><ol><li>ADD <src>… <dest> </dest></src></li><li>ADD [“<src>“,… “<dest>“] </dest></src></li></ol><p><dest>路径的填写可以是容器内的绝对路径，也可以是相对于工作目录的相对路径 </dest></p><p><src>可以是一个本地文件或者是一个本地压缩文件，还可以是一个url </src></p><p>如果把<src>写成一个url，那么ADD就类似于wget命令 </src></p><p>如以下写法都是可以的：<br>• ADD test relativeDir/<br>• ADD test /relativeDir<br>• ADD <a href="http://example.com/foobar" target="_blank" rel="noopener">http://example.com/foobar</a> /<br>尽量不要把<scr>写成一个文件夹，如果<src>是一个文件夹了，复制整个目录的内容,包括文件系统元数据 </src></scr></p><p>COPY<br>看这个名字就知道，又是一个复制命令<br>语法如下： </p><ol><li>COPY <src>… <dest> </dest></src></li><li>COPY [“<src>“,… “<dest>“]<br>与ADD的区别<br>COPY的<src>只能是本地文件，其他用法一致 </src></dest></src></li></ol><p>ENTRYPOINT<br>功能是启动时的默认命令 </p><p>语法如下： </p><ol><li>ENTRYPOINT [“executable”, “param1”, “param2”] </li><li>ENTRYPOINT command param1 param2 </li></ol><p>如果从上到下看到这里的话，那么你应该对这两种语法很熟悉啦。<br>第二种就是写shell<br>第一种就是可执行文件加参数 </p><p>与CMD比较说明（这俩命令太像了，而且还可以配合使用）： </p><ol><li><p>相同点：<br>• 只能写一条，如果写了多条，那么只有最后一条生效<br>• 容器启动时才运行，运行时机相同 </p></li><li><p>不同点：<br>• ENTRYPOINT不会被运行的command覆盖，而CMD则会被覆盖<br>• 如果我们在Dockerfile种同时写了ENTRYPOINT和CMD，并且CMD指令不是一个完整的可执行命令，那么CMD指定的内容将会作为ENTRYPOINT的参数<br>如下：<br>FROM ubuntu<br>ENTRYPOINT [“top”, “-b”]<br>CMD [“-c”]<br>• 如果我们在Dockerfile种同时写了ENTRYPOINT和CMD，并且CMD是一个完整的指令，那么它们两个会互相覆盖，谁在最后谁生效<br>如下：<br>FROM ubuntu<br>ENTRYPOINT [“top”, “-b”]<br>CMD ls -al<br>那么将执行ls -al ,top -b不会执行。 </p></li></ol><p>Docker官方使用一张表格来展示了ENTRYPOINT 和CMD不同组合的执行情况<br>（下方表格来自docker官网） </p><p><img src="https://img-blog.csdn.net/20180809222434584?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>VOLUME </p><p>可实现挂载功能，可以将内地文件夹或者其他容器种得文件夹挂在到这个容器种 </p><p>语法为：<br>VOLUME [“/data”] </p><p>说明：<br>[“/data”]可以是一个JsonArray ，也可以是多个值。所以如下几种写法都是正确的<br>VOLUME [“/var/log/“]<br>VOLUME /var/log<br>VOLUME /var/log /var/db<br>一般的使用场景为需要持久化存储数据时<br>容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。<br>所以当数据需要持久化时用这个命令。 </p><p>USER </p><p>设置启动容器的用户，可以是用户名或UID，所以，只有下面的两种写法是正确的<br>• USER daemo<br>• USER UID<br>注意：如果设置了容器以daemon用户去运行，那么RUN, CMD 和 ENTRYPOINT 都会以这个用户去运行 </p><p>WORKDIR </p><p>语法：<br>WORKDIR /path/to/workdir </p><p>设置工作目录，对RUN,CMD,ENTRYPOINT,COPY,ADD生效。如果不存在则会创建，也可以设置多次。 </p><p>如：<br>WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br>RUN pwd<br>pwd执行的结果是/a/b/c </p><p>WORKDIR也可以解析环境变量<br>如：<br>ENV DIRPATH /path<br>WORKDIR $DIRPATH/$DIRNAME<br>RUN pwd<br>pwd的执行结果是/path/$DIRNAME </p><p>ARG<br>语法：<br>ARG <name>[=<default value="">]<br>设置变量命令，ARG命令定义了一个变量，在docker build创建镜像的时候，使用 –build-arg <varname>=<value>来指定参数<br>如果用户在build镜像时指定了一个参数没有定义在Dockerfile种，那么将有一个Warning<br>提示如下：<br>[Warning] One or more build-args [foo] were not consumed. </value></varname></default></name></p><p>我们可以定义一个或多个参数，如下：<br>FROM busybox<br>ARG user1<br>ARG buildno<br>…<br>也可以给参数一个默认值：<br>FROM busybox<br>ARG user1=someuser<br>ARG buildno=1<br>…<br>如果我们给了ARG定义的参数默认值，那么当build镜像时没有指定参数值，将会使用这个默认值 </p><p>ONBUILD<br>语法：<br>ONBUILD [INSTRUCTION]<br>这个命令只对当前镜像的子镜像生效。<br>比如当前镜像为A，在Dockerfile种添加：<br>ONBUILD RUN ls -al<br>这个 ls -al 命令不会在A镜像构建或启动的时候执行 </p><p>此时有一个镜像B是基于A镜像构建的，那么这个ls -al 命令会在B镜像构建的时候被执行。 </p><p>STOPSIGNAL<br>语法：<br>STOPSIGNAL signal<br>STOPSIGNAL命令是的作用是当容器推出时给系统发送什么样的指令 </p><p>HEALTHCHECK<br>容器健康状况检查命令<br>语法有两种： </p><ol><li>HEALTHCHECK [OPTIONS] CMD command </li><li>HEALTHCHECK NONE<br>第一个的功能是在容器内部运行一个命令来检查容器的健康状况<br>第二个的功能是在基础镜像中取消健康检查命令 </li></ol><p>[OPTIONS]的选项支持以下三中选项：<br>–interval=DURATION 两次检查默认的时间间隔为30秒<br>–timeout=DURATION 健康检查命令运行超时时长，默认30秒<br>–retries=N 当连续失败指定次数后，则容器被认为是不健康的，状态为unhealthy，默认次数是3 </p><p>注意：<br>HEALTHCHECK命令只能出现一次，如果出现了多次，只有最后一个生效。 </p><p>CMD后边的命令的返回值决定了本次健康检查是否成功，具体的返回值如下：<br>0: success - 表示容器是健康的<br>1: unhealthy - 表示容器已经不能工作了<br>2: reserved - 保留值 </p><p>例子：<br>HEALTHCHECK –interval=5m –timeout=3s \<br>CMD curl -f <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> || exit 1 </p><p>健康检查命令是：curl -f <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> || exit 1<br>两次检查的间隔时间是5秒<br>命令超时时间为3秒 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、增加linux的dns（永久）&quot;&gt;&lt;a href=&quot;#一、增加linux的dns（永久）&quot; class=&quot;headerlink&quot; title=&quot;一、增加linux的dns（永久）&quot;&gt;&lt;/a&gt;一、增加linux的dns（永久）&lt;/h1&gt;&lt;p&gt;##1、运行命令：&lt;br&gt;
    
    </summary>
    
      <category term="javaweb技术" scheme="http://yoursite.com/categories/javaweb%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>JSONP详解</title>
    <link href="http://yoursite.com/2018/08/09/java/javaweb%E6%8A%80%E6%9C%AF/JSONP%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/09/java/javaweb技术/JSONP详解/</id>
    <published>2018-08-09T13:47:58.713Z</published>
    <updated>2018-08-09T13:47:50.602Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。 为什么我们从不同的域（网站）访问数据需要一个特殊的技术(JSONP )呢？这是因为同源策略。 同源策略，它是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。<br> <a id="more"></a></p><p>&emsp;&emsp;json相信大家都用的多，jsonp我就一直没有机会用到，但也经常看到，只知道是“用来跨域的”，一直不知道具体是个什么东西。今天总算搞明白了。下面一步步来搞清楚jsonp是个什么玩意。 </p><p>一、同源策略<br>    首先基于安全的原因，浏览器是存在同源策略这个机制的，同源策略阻止从一个源加载的文档或脚本获取或设置另一个源加载的文档的属性。看起来不知道什么意思，实践一下就知道了。 </p><pre><code>* 1.随便建两个网页 一个端口是2698，一个2701，按照定义它们是不同源的。 </code></pre><p><img src="https://img-blog.csdn.net/20180809214057430?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>2.用jQuery发起不同源的请求<br>  在2698端口的网页上添加一个按钮，Click事件随便发起两个向端口为2701域的请求。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#getOtherDomainThings"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    $.get(<span class="string">"http://localhost:2701/Scripts/jquery-1.4.4.min.js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data) </span><br><span class="line">    &#125;) </span><br><span class="line"> </span><br><span class="line">$.get(<span class="string">"http://localhost:2701/home/index"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data) </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据同源策略，很明显会悲剧了。浏览器会阻止，根本不会发起这个请求。（not allowed by Access-Control-Allow-Origin） </p><p>OK，原来jsonp是要解决这个问题的。</p><p>二、script标签的跨域能力<br>不知道大家知不知道CDN这个东西，例如微软的CDN，使用它，我们的网页可以不提供jQuery，由微软的网站帮我们提供： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.8.0.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>回到我们的2698端口的网页，上面我们在Click事件里有一个对2701端口域的jQuery文件的请求，这次使用script标签来请求。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost:2701/Scripts/jquery-1.4.4.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当然，200，OK了<br>同样是端口2698的网页发起对2701域的请求，放在script里设置scr属性的OK了，另一个方式就悲剧。利用script的跨域能力，这就是jsonp的基础。 </p><p>三、利用script获取不同源的json<br>既然它叫jsonp，很明显目的还是json，而且是跨域获取。根据上面的分析，很容易想到：利用js构造一个script标签，把json的url赋给script的scr属性，把这个script插入到dom里，让浏览器去获取。实践： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function CreateScript(src) &#123; </span><br><span class="line">    $(&quot;&lt;script&gt;&lt;//script&gt;&quot;).attr(&quot;src&quot;, src).appendTo(&quot;body&quot;) </span><br><span class="line">&#125; </span><br><span class="line">添加一个按钮事件来测试一下： </span><br><span class="line">$(&quot;#getOtherDomainJson&quot;).click(function () &#123; </span><br><span class="line">    $.get(&apos;http://localhost:2701/home/somejson&apos;, function (data) &#123; </span><br><span class="line">        console.log(data) </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/201808092144231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>首先，第一个浏览器，<a href="http://localhost:2701/home/somejson这个Url的确是存在一个json的，而且在" target="_blank" rel="noopener">http://localhost:2701/home/somejson这个Url的确是存在一个json的，而且在</a> 2698网页上用script标签来请求这个2701这个Url也是200OK的，但是最下面报js语法错误了。原来用script标签加载完后，会立即 把响应当js去执行，很明显{“Email”:”<a href="mailto:zhww@outlook.com" target="_blank" rel="noopener">zhww@outlook.com</a>“,”Remark”:”我来自遥远的东方”}不是合法的js语句。<br>利用script获取异域的jsonp<br>显然，把上面的json放到一个回调方法里是最简单的方法。例如，变成这样： </li></ul><p><img src="https://img-blog.csdn.net/20180809214451153?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>如果存在jsonpcallback这个方法，那么jsonpcallback({“Email”:”<a href="mailto:zhww@outlook.com" target="_blank" rel="noopener">zhww@outlook.com</a>“,”Remark”:”我来自遥远的东方”})就是合法的js语句。<br>由于服务器不知道客户端的回调是什么，不可能hard code成jsonpcallback，所以就带一个QueryString让客户端告诉服务端，回调方法是什么，当然，QueryString的key要遵从服务端的约定，上面的是”callback“。<br>添加回调函数： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function jsonpcallback(json) &#123; </span><br><span class="line">    console.log(json) </span><br><span class="line">&#125; </span><br><span class="line">把前面的方法稍微改改参数： </span><br><span class="line">$(&quot;#getJsonpByHand&quot;).click(function () &#123; </span><br><span class="line">    CreateScript(&quot;http://localhost:2701/home/somejsonp?callback=jsonpcallback&quot;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/2018080921461516?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMjk2NTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>200OK，服务器返回jsonpcallback({“Email”:”<a href="mailto:zhww@outlook.com" target="_blank" rel="noopener">zhww@outlook.com</a>“,”Remark”:”我来自遥远的 东方”})，我们也写了jsonpcallback方法，当然会执行。OK顺利获得了json。没错，到这里就是jsonp的全部。<br>利用jQuery获取jsonp </p><p>上面的方式中，又要插入script标签，又要定义一个回调，略显麻烦，利用jQuery可以直接得到想要的json数据，同样是上面的jsonp： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#getJsonpByJquery&quot;).click(function () &#123; </span><br><span class="line">    $.ajax(&#123; </span><br><span class="line">        url: &apos;http://localhost:2701/home/somejsonp&apos;, </span><br><span class="line">        dataType: &quot;jsonp&quot;, </span><br><span class="line">        jsonp: &quot;callback&quot;, </span><br><span class="line">        success: function (data) &#123; </span><br><span class="line">            console.log(data) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>得到的结果跟上面类似。<br>总结<br>一句话就是利用script标签绕过同源策略，获得一个类似这样的数据，jsonpcallback是页面存在的回调方法，参数就是想得到的json。<br>jsonpcallback({“Email”:”<a href="mailto:zhww@outlook.com" target="_blank" rel="noopener">zhww@outlook.com</a>“,”Remark”:”我来自遥远的东方”}) </p><p>ADD 原生js: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&quot;btn&quot;&gt;click&lt;/button&gt; </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">function $(str)&#123; </span><br><span class="line">return document.getElementById(str) </span><br><span class="line">&#125; </span><br><span class="line">function CreateScript(src) &#123; </span><br><span class="line">var Scrip=document.createElement(&apos;script&apos;); </span><br><span class="line">Scrip.src=src; </span><br><span class="line">document.body.appendChild(Scrip); </span><br><span class="line">&#125; </span><br><span class="line">function jsonpcallback(json) &#123; </span><br><span class="line">console.log(json);//Object &#123; email=&quot;中国&quot;, email2=&quot;中国222&quot;&#125; </span><br><span class="line">&#125; </span><br><span class="line">$(&apos;btn&apos;).onclick=function()&#123; </span><br><span class="line">CreateScript(&quot;http://localhost:51335/somejson?callback=jsonpcallback&quot;) </span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。 为什么我们从不同的域（网站）访问数据需要一个特殊的技术(JSONP )呢？这是因为同源策略。 同源策略，它是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。&lt;br&gt;
    
    </summary>
    
      <category term="javaweb技术" scheme="http://yoursite.com/categories/javaweb%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jsonp" scheme="http://yoursite.com/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>CSRF攻击的解决方案</title>
    <link href="http://yoursite.com/2018/08/09/java/javaweb%E6%8A%80%E6%9C%AF/CSRF/"/>
    <id>http://yoursite.com/2018/08/09/java/javaweb技术/CSRF/</id>
    <published>2018-08-09T13:37:06.251Z</published>
    <updated>2018-08-09T13:34:39.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSRF-背景与介绍"><a href="#CSRF-背景与介绍" class="headerlink" title="CSRF 背景与介绍"></a>CSRF 背景与介绍</h2><p>&emsp;&emsp;CSRF（Cross Site Request Forgery, 跨站域请求伪造）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。<br><a id="more"></a><br>&emsp;&emsp;然而，对于大多数人来说，CSRF 却依然是一个陌生的概念。即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。 </p><p>##CSRF 攻击实例 </p><p>&emsp;&emsp;CSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。<br>&emsp;&emsp;比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自</a> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”，并且通过广告等诱使 Bob 来访问他的网站。<br>&emsp;&emsp;当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。<br>&emsp;&emsp;这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 </p><p>##CSRF 攻击的对象<br>&emsp;&emsp;在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie 的内容。<br>&emsp;&emsp;另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。<br>比如银行系统中转账的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。 </p><p>##当前防御 CSRF 的几种策略 </p><ul><li>验证 HTTP Referer 字段<br>&emsp;&emsp;根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ，用户必须先登录 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。<br>&emsp;&emsp;这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。<br>&emsp;&emsp;然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。<br>&emsp;&emsp;即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。 </li><li>在请求地址中添加 token 并验证<br>&emsp;&emsp;CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。<br>&emsp;&emsp;这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 <input type="”hidden”" name="”csrftoken”" value="”tokenvalue”/">，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。<br>&emsp;&emsp;该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。 </li><li>在 HTTP 头中自定义属性并验证<br>&emsp;&emsp;这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。<br>&emsp;&emsp;然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSRF-背景与介绍&quot;&gt;&lt;a href=&quot;#CSRF-背景与介绍&quot; class=&quot;headerlink&quot; title=&quot;CSRF 背景与介绍&quot;&gt;&lt;/a&gt;CSRF 背景与介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;CSRF（Cross Site Request Forgery, 跨站域请求伪造）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>springboot+mybatis+通用mapper</title>
    <link href="http://yoursite.com/2018/08/07/java/springmvcAndSpringboot/springboot+mybatis+%E9%80%9A%E7%94%A8mapper/"/>
    <id>http://yoursite.com/2018/08/07/java/springmvcAndSpringboot/springboot+mybatis+通用mapper/</id>
    <published>2018-08-07T09:30:53.646Z</published>
    <updated>2018-08-07T09:30:34.967Z</updated>
    
    <content type="html"><![CDATA[<h4 id="这里提供两种springboot-mybatis-通用mapper的整合方式，一种springboot自动配置，一种代码配置。"><a href="#这里提供两种springboot-mybatis-通用mapper的整合方式，一种springboot自动配置，一种代码配置。" class="headerlink" title="这里提供两种springboot+mybatis+通用mapper的整合方式，一种springboot自动配置，一种代码配置。"></a>这里提供两种springboot+mybatis+通用mapper的整合方式，一种springboot自动配置，一种代码配置。</h4><a id="more"></a><p>1、首先我们要知道一些基本知识：</p><p>① mybatis不是一个orm框架，他里面的实体类实际作用都是sql语句查询之后自动装配的结果集</p><p>②tk.mybatis.mapper是一个开源的mybatis插件，是一个可以实现任意 MyBatis 通用方法的框架，项目提供了常规的增删改查操作以及Example 相关的单表操作。通用 Mapper 是为了解决 MyBatis 使用中 90% 的基本操作，使用它可以很方便的进行开发，可以节省开发人员大量的时间。</p><p>③通用 Mapper 有很多种集成方式，这里只会介绍springboot情况下的两种配置方式。Java 编码方式集成是最少见的一种情况，但是通过这种集成方式可以很容易让大家看清通用 Mapper 集成的入口。和 Spring 集成是最常见的，Spring Boot 也在慢慢成为主流，为了便于在集成通用 Mapper 的情况下仍然可以和第三方的工具集成，这里也会有很多种集成的方式。</p><p> 2、集成方式一：</p><p>①、mapper-spring-boot-starter  </p><p>在 starter 的逻辑中，如果你没有使用 @MapperScan 注解，你就需要在你的接口上增加 @Mapper 注解，否则 MyBatis 无法判断扫描哪些接口。<br>    这里的第一种用法没有用 @MapperScan 注解，所以你需要在所有接口上增加 @Mapper 注解。<br>    你只需要添加通用 Mapper 提供的 starter 就完成了最基本的集成，依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：引入该 starter 时，和 MyBatis 官方的 starter 没有冲突，但是官方的自动配置不会生效！<br>如果你需要对通用 Mapper 进行配置，你可以在 Spring Boot 的配置文件中配置 mapper. 前缀的配置。<br>例如在 yml 格式中配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mapper:</span></span><br><span class="line"><span class="attr">  mappers:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tk.mybatis.mapper.common.Mapper</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tk.mybatis.mapper.common.Mapper2</span></span><br><span class="line"><span class="attr">  notEmpty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 properties 配置中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapper.mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.Mapper2</span><br><span class="line">mapper.notEmpty=true</span><br></pre></td></tr></table></figure><p>由于 Spring Boot 支持 Relax 方式的参数，因此你在配置 notEmpty 时更多的是用 not-empty，也只有在 Spring Boot 中使用的时候参数名不必和配置中的完全一致。</p><p>如果你对 Spring Boot 的 Environment 了解，你可以用 Spring Boot 支持的所有方式进行配置。</p><p>②、代码方式进行配置</p><p>注意：Spring Boot集成MyBatis打包成jar时，setTypeAliasesPackage(“xxx”)找不到类的问题<br>解决方式：<br>MyBatis扫描通过VFS来实现<br>在Spring Boot中，由于是嵌套Jar，导致Mybatis默认的VFS实现DefaultVFS无法扫描嵌套Jar中的类。<br>解决办法，实现自定义的VFS，参考DefaultVFS增加对Spring Boot嵌套JAR的处理。<br>以下为SpringBootVFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.mgr.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.VFS;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by QinHe on 2018-08-07.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootVFS</span> <span class="keyword">extends</span> <span class="title">VFS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">list</span><span class="params">(URL url, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassLoader cl = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver(cl);</span><br><span class="line">        Resource[] resources = resolver.getResources(path + <span class="string">"/**/*.class"</span>);</span><br><span class="line">        List&lt;Resource&gt; resources1 = Arrays.asList(resources);</span><br><span class="line">        List&lt;String&gt; resourcePaths = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources1) &#123;</span><br><span class="line">            resourcePaths.add(preserveSubpackageName(resource.getURI(), path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resourcePaths;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">preserveSubpackageName</span><span class="params">(<span class="keyword">final</span> URI uri, <span class="keyword">final</span> String rootPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String uriStr = uri.toString();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> start = uriStr.indexOf(rootPath);</span><br><span class="line">        <span class="keyword">return</span> uriStr.substring(start, uriStr.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、MyBatis基础配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.mgr.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.VFS;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.TransactionManagementConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis基础配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisJpaConfig</span> <span class="keyword">implements</span> <span class="title">TransactionManagementConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager txManagerJpa;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决myBatis下 不能嵌套jar文件的问题</span></span><br><span class="line">        VFS.addImplClass(SpringBootVFS.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setTypeAliasesPackage(<span class="string">"com.zhibi.xiuba.task.spi.domain,; \t\ncom.zhibi.xiuba.order.spi.model,; \t\ncom.zhibi.xiuba.mgr.model,; \t\n"</span> +</span><br><span class="line">                <span class="string">"com.zhibi.xiuba.user.spi.model,; \t\ncom.zhibi.xiuba.schedule.spi.domain,; \t\ncom.zhibi.xiuba.pay.spi.model"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页插件</span></span><br><span class="line">        PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"reasonable"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"supportMethodsArguments"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"returnPageInfo"</span>, <span class="string">"check"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"params"</span>, <span class="string">"count=countSql"</span>);</span><br><span class="line">        pageHelper.setProperties(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加插件</span></span><br><span class="line">        bean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;pageHelper&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加XML目录</span></span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/*.xml"</span>));</span><br><span class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/*/*.xml"</span>));</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"txManagerMybatis"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManagerMybatis</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManagerJpa</span><span class="params">(EntityManagerFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> txManagerJpa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通用mapper扫描配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.xiuba.mgr.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis扫描接口，使用的tk.mybatis.spring.mapper.MapperScannerConfigurer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//TODO 注意，由于MapperScannerConfigurer执行的比较早，所以必须有下面的注解</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisJpaConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.zhibi.xiuba.mgr.mapper"</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"mappers"</span>, <span class="string">"com.zhibi.xiuba.mgr.util.CustomerMapper"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"notEmpty"</span>, <span class="string">"false"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"IDENTITY"</span>, <span class="string">"MYSQL"</span>);</span><br><span class="line">        mapperScannerConfigurer.setProperties(properties);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;这里提供两种springboot-mybatis-通用mapper的整合方式，一种springboot自动配置，一种代码配置。&quot;&gt;&lt;a href=&quot;#这里提供两种springboot-mybatis-通用mapper的整合方式，一种springboot自动配置，一种代码配置。&quot; class=&quot;headerlink&quot; title=&quot;这里提供两种springboot+mybatis+通用mapper的整合方式，一种springboot自动配置，一种代码配置。&quot;&gt;&lt;/a&gt;这里提供两种springboot+mybatis+通用mapper的整合方式，一种springboot自动配置，一种代码配置。&lt;/h4&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="mybatis、mapper" scheme="http://yoursite.com/tags/mybatis%E3%80%81mapper/"/>
    
  </entry>
  
  <entry>
    <title>JPA关联关系 </title>
    <link href="http://yoursite.com/2018/08/03/java/springmvcAndSpringboot/JPA%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/08/03/java/springmvcAndSpringboot/JPA关联关系/</id>
    <published>2018-08-03T06:39:00.220Z</published>
    <updated>2018-08-03T06:39:00.222Z</updated>
    
    <content type="html"><![CDATA[<p>UserRecord表和User表关联 </p><a id="more"></a><p>@OneToOne()<br>@JoinColumn(name=”user_id”,referencedColumnName=”id”,insertable=false,updatable=false)<br>Private User user; </p><p>insertable=false：不能插入，不能新建UserRecord和User的关联关系<br>updatable=false：不可以修改UserRecord和User的某一条关联关系，但是保存UserRecord时，可以根据cascade更新User表中的数据<br>         UserRecord userRecord = userRecordRepository.findOne(61L);<br>        User user = userRecord.getUser();<br>        user.setReferrals(789789789);<br>        user.setId(32L);<br>        userRecordRepository.save(userRecord);<br>        System.out.println(123);<br>不可以更新UserRecord表数据（user_id），但是可以更新对应的User表数据<br>但是必须要显式的设置user对象的某个值才行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UserRecord表和User表关联 &lt;/p&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>java注解</title>
    <link href="http://yoursite.com/2018/08/03/java/java/java%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/03/java/java/java注解/</id>
    <published>2018-08-03T03:19:26.907Z</published>
    <updated>2018-08-03T03:19:00.492Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>1、Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。<br>注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。 </p></li><li><p>2、规则<br>注解方法不能带有参数；<br>注解方法返回值类型限定为：基本类型、String、Enums、Annotation或者是这些类型的数组；<br>注解方法可以有默认值；<br>注解本身能够包含元注解，元注解被用来注解其它注解。 </p></li><li><p>3、元注解<br>元注解是指注解的注解。包括  @Retention @Target @Document @Inherited四种。 </p><ul><li><p>①、@Retention </p><blockquote><p>@Retention: 定义注解的保留策略<br>  @Retention(RetentionPolicy.SOURCE) //注解仅存在于源码中，在class字节码文件中不包含<br>  @Retention(RetentionPolicy.CLASS) // 默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得，<br>  @Retention(RetentionPolicy.RUNTIME)// 注解会在class字节码文件中存在，在运行时可以通过反射获取到 </p></blockquote></li><li><p>②、@Documented </p><blockquote><p>指明拥有这个注解的元素可以被javadoc此类的工具文档化。这种类型应该用于注解那些影响客户使用带注释的元素声明的类型。没有成员。 </p></blockquote></li><li><p>③、Target<br>  用来说明自定义注解可以用在什么地方，其ElementType取值有：  </p><blockquote><p>@Target(ElementType.TYPE) //接口、类、枚举、注解<br>  @Target(ElementType.FIELD) //字段、枚举的常量<br>  @Target(ElementType.METHOD) //方法<br>  @Target(ElementType.PARAMETER) //方法参数<br>  @Target(ElementType.CONSTRUCTOR)//构造函数<br>  @Target(ElementType.LOCAL_VARIABLE)//局部变量<br>  @Target(ElementType.ANNOTATION_TYPE)//注解<br>  @Target(ElementType.PACKAGE) ///包<br>  使用示例：@Target({ElementType.FIELD, ElementType.METHOD}) </p></blockquote></li><li><p>④、@Inherited </p><blockquote><p>是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。<br>  @Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。<br>  当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性<br>  使用示例：@Inherited   </p></blockquote></li></ul></li><li><p>4、开始自定义注解<br>  定义注解格式： </p><p>  public @interface 注解名 {定义体} </p><p>  注解参数的可支持数据类型： </p><p>  所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>  String类型<br>  Class类型<br>  enum类型<br>  Annotation类型<br>  以上所有类型的数组<br>  使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。 </p><p>  @interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。 </p><p>  注意： </p><p>  只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型； </p><p>  参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String; </p><p>  如果只有一个参数成员,最好把参数名称设为”value”,后加小括号 ,实例：<br>FruitName.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 水果名称注解 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="meta">@Target</span>(FIELD) </span><br><span class="line"> <span class="meta">@Retention</span>(RUNTIME) </span><br><span class="line"> <span class="meta">@Documented</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> FruitName &#123; </span><br><span class="line">     <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>FruitColor.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 水果颜色注解 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="meta">@Target</span>(FIELD) </span><br><span class="line"> <span class="meta">@Retention</span>(RUNTIME) </span><br><span class="line"> <span class="meta">@Documented</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> FruitColor &#123; </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 颜色枚举 </span></span><br><span class="line"><span class="comment">      */</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> Color&#123; BLUE,RED,GREEN&#125;; </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 颜色属性 </span></span><br><span class="line"><span class="comment">      */</span> </span><br><span class="line">     <span class="function">Color <span class="title">fruitColor</span><span class="params">()</span> <span class="keyword">default</span> Color.GREEN</span>; </span><br><span class="line">  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>FruitProvider.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 水果供应者注解 </span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"> <span class="meta">@Target</span>(FIELD) </span><br><span class="line"> <span class="meta">@Retention</span>(RUNTIME) </span><br><span class="line"> <span class="meta">@Documented</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> FruitProvider &#123; </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 供应商编号 </span></span><br><span class="line"><span class="comment">      */</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 供应商名称 </span></span><br><span class="line"><span class="comment">      */</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 供应商地址 </span></span><br><span class="line"><span class="comment">      */</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">address</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>FruitInfoUtil.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">import</span> java.lang.reflect.Field; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 注解处理器 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitInfoUtil</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFruitInfo</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123; </span><br><span class="line"> </span><br><span class="line">        String strFruitName=<span class="string">" 水果名称："</span>; </span><br><span class="line">         String strFruitColor=<span class="string">" 水果颜色："</span>; </span><br><span class="line">         String strFruitProvicer=<span class="string">"供应商信息："</span>; </span><br><span class="line">  </span><br><span class="line">         Field[] fields = clazz.getDeclaredFields(); </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">for</span>(Field field :fields)&#123; </span><br><span class="line"> <span class="keyword">if</span>(field.isAnnotationPresent(FruitName.class))&#123; </span><br><span class="line">                 FruitName fruitName = (FruitName) field.getAnnotation(FruitName.class); </span><br><span class="line">                 strFruitName=strFruitName+fruitName.value();  </span><br><span class="line">                 System.out.println(strFruitName); </span><br><span class="line">             &#125; </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(field.isAnnotationPresent(FruitColor.class))&#123; </span><br><span class="line">                 FruitColor fruitColor= (FruitColor) field.getAnnotation(FruitColor.class); </span><br><span class="line">                 strFruitColor=strFruitColor+fruitColor.fruitColor().toString(); </span><br><span class="line">                 System.out.println(strFruitColor); </span><br><span class="line">             &#125; </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(field.isAnnotationPresent(FruitProvider.class))&#123; </span><br><span class="line">FruitProvider fruitProvider= (FruitProvider) field.getAnnotation(FruitProvider.class); </span><br><span class="line">                 strFruitProvicer=<span class="string">" 供应商编号："</span>+fruitProvider.id()+<span class="string">" 供应商名称："</span>+fruitProvider.name()+<span class="string">" 供 应商地址："</span>+fruitProvider.address(); </span><br><span class="line">                 System.out.println(strFruitProvicer); </span><br><span class="line">             &#125; </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>Apple.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> test.FruitColor.Color; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 注解使用 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@FruitName</span>(<span class="string">"Apple"</span>) </span><br><span class="line"><span class="keyword">private</span> String appleName; </span><br><span class="line">  </span><br><span class="line"> <span class="meta">@FruitColor</span>(fruitColor=Color.RED) </span><br><span class="line"> <span class="keyword">private</span> String appleColor; </span><br><span class="line">  </span><br><span class="line"> <span class="meta">@FruitProvider</span>(id=<span class="number">1</span>,name=<span class="string">"陕西红富士集团"</span>,address=<span class="string">"陕西省西安市延安路89号红富士大厦"</span>) </span><br><span class="line"> <span class="keyword">private</span> String appleProvider; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppleColor</span><span class="params">(String appleColor)</span> </span>&#123; </span><br><span class="line"> <span class="keyword">this</span>.appleColor = appleColor; </span><br><span class="line">     &#125; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getAppleColor</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> appleColor; </span><br><span class="line">     &#125; </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppleName</span><span class="params">(String appleName)</span> </span>&#123; </span><br><span class="line"> <span class="keyword">this</span>.appleName = appleName; </span><br><span class="line">     &#125; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getAppleName</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> appleName; </span><br><span class="line">     &#125; </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppleProvider</span><span class="params">(String appleProvider)</span> </span>&#123; </span><br><span class="line"> <span class="keyword">this</span>.appleProvider = appleProvider; </span><br><span class="line">     &#125; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getAppleProvider</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> appleProvider; </span><br><span class="line">     &#125; </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayName</span><span class="params">()</span></span>&#123; </span><br><span class="line">         System.out.println(<span class="string">"水果的名字是：苹果"</span>); </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>FruitRun.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**2  * 输出结果 </span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitRun</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">         FruitInfoUtil.getFruitInfo(Apple.class); </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果是：<br> 水果名称：Apple<br> 水果颜色：RED </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。&lt;br&gt;注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。 &lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>RedirectAttributes</title>
    <link href="http://yoursite.com/2018/08/03/java/springmvcAndSpringboot/RedirectAttributes/"/>
    <id>http://yoursite.com/2018/08/03/java/springmvcAndSpringboot/RedirectAttributes/</id>
    <published>2018-08-03T03:07:41.596Z</published>
    <updated>2018-08-03T03:07:41.611Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC中使用RedirectAttributes重定向传参,防止暴露参数<br>RedirectAttributes是Spring mvc 3.1版本之后出来的一个功能，专门用于重定向之后还能带参数跳转的的工具类 </p><a id="more"></a><p>有两种带参的方式： </p><ul><li>第一种： </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redirectAttributes.addAttributie(“prama”,value);这种方法相当于在重定向链接地址追加传递的参数，例如: </span><br><span class="line">redirectAttributes.addAttributie(<span class="string">"prama1"</span>,value1);  </span><br><span class="line">redirectAttributes.addAttributie(<span class="string">"prama2"</span>,value2); </span><br><span class="line"><span class="keyword">return</span>:<span class="string">"redirect：/path/list"</span>；</span><br></pre></td></tr></table></figure><p>以上重定向的方法等同于return:”redirect：/path/list？prama1=value1&amp;prama2=value2 “，注意这种方法直接将传递的参数暴露在链接地址上，非常的不安全，慎用。 </p><ul><li>第二种：</li></ul><p>redirectAttributes.addFlashAttributie(“prama”,value);这种方法是隐藏了参数，链接地址上不直接暴露，但是能且只能在重定向的 “页面” 获取prama参数值。其原理就是放到session中，session在跳到页面后马上移除对象。如果是重定向一个controller中是获取不到该prama属性值的。除非在controller中用(@RequestPrama(value = “prama”)String prama)注解，采用传参的方式。页面获值例如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redirectAttributes.addFlashAttributie(<span class="string">"prama1"</span>,value1); </span><br><span class="line">redirectAttributes.addFlashAttributie(<span class="string">"prama2"</span>,value2); </span><br><span class="line"><span class="keyword">return</span>:<span class="string">"redirect：/path/list.jsp"</span></span><br></pre></td></tr></table></figure><p>1、在以上参数均可在list.jsp页面使用EL表达式获取到参数值${prama*} </p><p>2、controller获得redirectAttributes重定向的值例如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redirectAttributes.addFlashAttributie(<span class="string">"prama1"</span>,value1); </span><br><span class="line">redirectAttributes.addFlashAttributie(<span class="string">"prama2"</span>,value2); </span><br><span class="line"><span class="keyword">return</span>:<span class="string">"redirect：/path/list/"</span></span><br></pre></td></tr></table></figure><p>通过在controller中的list方法体中可以获取到参数值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"list"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">list</span><span class="params">(@RequestPrama(value = <span class="string">"prama1"</span>)</span>String  prama1, </span></span><br><span class="line"><span class="function">   @<span class="title">RequestPrama</span><span class="params">(value = <span class="string">"prama2"</span>)</span>String  prama2,... </span></span><br><span class="line"><span class="function">)</span>&#123; </span><br><span class="line">    <span class="comment">//TODO </span></span><br><span class="line">    <span class="comment">//your code </span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringMVC中使用RedirectAttributes重定向传参,防止暴露参数&lt;br&gt;RedirectAttributes是Spring mvc 3.1版本之后出来的一个功能，专门用于重定向之后还能带参数跳转的的工具类 &lt;/p&gt;
    
    </summary>
    
      <category term="springmvc和springboot" scheme="http://yoursite.com/categories/springmvc%E5%92%8Cspringboot/"/>
    
    
      <category term="参数跳转" scheme="http://yoursite.com/tags/%E5%8F%82%E6%95%B0%E8%B7%B3%E8%BD%AC/"/>
    
  </entry>
  
</feed>
